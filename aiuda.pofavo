Grammar:

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> PUT ID IN ID AT expr , expr
Rule 17    envFunc -> RUN ID WITH expr ITERATIONS
Rule 18    envFunc -> RESET ID
Rule 19    envBody -> varList
Rule 20    agentBody -> varList
Rule 21    behaveBody -> statementList
Rule 22    varList -> empty
Rule 23    varList -> varAssign varList
Rule 24    varList -> varDecl varList
Rule 25    statementList -> empty
Rule 26    statementList -> statement statementList
Rule 27    statement -> primFuncStmt
Rule 28    statement -> incaseStmt
Rule 29    statement -> foreachStmt
Rule 30    statement -> repeatStmt
Rule 31    statement -> varAssign
Rule 32    statement -> varDecl
Rule 33    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 34    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 35    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 36    inothercaseStmt -> empty
Rule 37    inothercaseStmt -> OTHERWISE { statementList }
Rule 38    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 39    primFuncStmt -> FIND PEERS
Rule 40    primFuncStmt -> FIND OBJECTS
Rule 41    primFuncStmt -> RANDOM FROM expr TO expr
Rule 42    primFuncStmt -> PUT expr , expr SEP
Rule 43    primFuncStmt -> PICK expr SEP
Rule 44    primFuncStmt -> STOP SEP
Rule 45    primFuncStmt -> RESTART BEHAVE
Rule 46    primFuncStmt -> SELL expr , expr , expr SEP
Rule 47    primFuncStmt -> buyStmt SEP
Rule 48    primFuncStmt -> moveStmt SEP
Rule 49    primFuncStmt -> TALK expr SEP
Rule 50    moveStmt -> MOVE RIGHT SEP
Rule 51    moveStmt -> MOVE LEFT SEP
Rule 52    moveStmt -> MOVE DOWN SEP
Rule 53    moveStmt -> MOVE UP SEP
Rule 54    moveStmt -> MOVE SEP expr , expr SEP
Rule 55    buyStmt -> BUY expr SEP
Rule 56    buyStmt -> BUY expr , expr , expr SEP
Rule 57    expr -> call
Rule 58    expr -> - expr  [precedence=right, level=9]
Rule 59    expr -> ! expr  [precedence=right, level=10]
Rule 60    expr -> expr / expr  [precedence=left, level=8]
Rule 61    expr -> expr * expr  [precedence=left, level=8]
Rule 62    expr -> expr - expr  [precedence=left, level=7]
Rule 63    expr -> expr + expr  [precedence=left, level=7]
Rule 64    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 65    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 66    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 67    expr -> expr LESS expr  [precedence=left, level=5]
Rule 68    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 69    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 70    expr -> expr AND expr  [precedence=left, level=3]
Rule 71    expr -> expr OR expr  [precedence=left, level=2]
Rule 72    call -> ID dotTail
Rule 73    call -> primary
Rule 74    getter -> ID dotTail
Rule 75    dotTail -> empty
Rule 76    dotTail -> . idTail
Rule 77    idTail -> listFunc dotTail
Rule 78    idTail -> ID dotTail
Rule 79    listFunc -> REVERSE ( )
Rule 80    listFunc -> POP ( )
Rule 81    listFunc -> SIZE ( )
Rule 82    listFunc -> PUSH ( expr )
Rule 83    listFunc -> GET ( expr )
Rule 84    primary -> ( expr )
Rule 85    primary -> { bookItems }
Rule 86    primary -> [ listItems ]
Rule 87    primary -> STRING
Rule 88    primary -> NUMBER
Rule 89    primary -> FALSE
Rule 90    primary -> TRUE
Rule 91    listItems -> empty
Rule 92    listItems -> expr , listItems
Rule 93    bookItems -> empty
Rule 94    bookItems -> STRING : ( listItems ) , bookItems
Rule 95    type -> BOOK_TYPE
Rule 96    type -> LIST_TYPE
Rule 97    type -> STRING_TYPE
Rule 98    type -> BOOL_TYPE
Rule 99    type -> NUMBER_TYPE
Rule 100   empty -> <empty>

Unused terminals:

    SHL
    SLASHASGN
    ORASGN
    INC
    ANDASGN
    XORASGN
    SHR
    MINUSASGN
    PLUSASGN
    STARASGN
    SHLASGN
    SHRASGN
    MODULOASGN
    DEC

Terminals, with rules where they appear:

!                    : 59
(                    : 79 80 81 82 83 84 94
)                    : 79 80 81 82 83 84 94
*                    : 61
+                    : 63
,                    : 16 42 46 46 54 56 56 92 94
-                    : 58 62
.                    : 76
/                    : 60
:                    : 13 14 94
AGENT                : 11
AND                  : 70
ANDASGN              : 
ASSIGN               : 13 15
AT                   : 16
BEHAVE               : 12 45
BOOK_TYPE            : 95
BOOL_TYPE            : 98
BUY                  : 55 56
CASE                 : 35 38
DEC                  : 
DOWN                 : 52
ENV                  : 10
EQEQ                 : 68
FALSE                : 89
FIND                 : 39 40
FOREACH              : 34
FROM                 : 41
GET                  : 83
GREATER              : 64
GREATEREQ            : 65
ID                   : 10 11 12 13 14 16 16 17 18 34 72 74 78
IN                   : 16 34 35 38
INC                  : 
ITERATIONS           : 17
LEFT                 : 51
LESS                 : 67
LESSEQ               : 66
LET                  : 13 14
LIST_TYPE            : 96
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 50 51 52 53 54
NOTEQ                : 69
NUMBER               : 88
NUMBER_TYPE          : 99
OBJECTS              : 40
OR                   : 71
ORASGN               : 
OTHER                : 38
OTHERWISE            : 37
PEERS                : 39
PICK                 : 43
PLUSASGN             : 
POP                  : 80
PUSH                 : 82
PUT                  : 16 42
RANDOM               : 41
REPEAT               : 33
RESET                : 18
RESTART              : 45
REVERSE              : 79
RIGHT                : 50
RUN                  : 17
SELL                 : 46
SEP                  : 13 14 15 42 43 44 46 47 48 49 50 51 52 53 54 54 55 56
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 81
SLASHASGN            : 
STARASGN             : 
STOP                 : 44
STRING               : 87 94
STRING_TYPE          : 97
TALK                 : 49
TO                   : 41
TRUE                 : 90
UP                   : 53
WHEN                 : 33
WITH                 : 17
XORASGN              : 
[                    : 86
]                    : 86
error                : 
{                    : 10 11 12 33 34 35 37 38 85
}                    : 10 11 12 33 34 35 37 38 85

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 85 94
buyStmt              : 47
call                 : 57
declaration          : 3
declarationList      : 1 3
dotTail              : 72 74 77 78
empty                : 2 22 25 36 75 91 93
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 17 33 34 35 38 41 41 42 42 43 46 46 46 49 54 54 55 56 56 56 58 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 82 83 84 92
foreachStmt          : 29
getter               : 15
idTail               : 76
incaseStmt           : 28
inothercaseStmt      : 35 38
listFunc             : 77
listItems            : 86 92 94
moveStmt             : 48
primFuncStmt         : 27
primary              : 73
program              : 0
repeatStmt           : 30
statement            : 26
statementList        : 21 26 33 34 35 37 38
type                 : 13 14
varAssign            : 5 23 31
varDecl              : 6 24 32
varList              : 19 20 23 24


state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (100) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT ID IN ID AT expr , expr
    (17) envFunc -> . RUN ID WITH expr ITERATIONS
    (18) envFunc -> . RESET ID
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 100 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    empty                          shift and go to state 3
    declaration                    shift and go to state 4
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 1

    (0) S' -> program .


state 2

    (1) program -> declarationList .
    $end            reduce using rule 1 (program -> declarationList .)


state 3

    (2) declarationList -> empty .
    $end            reduce using rule 2 (declarationList -> empty .)


state 4

    (3) declarationList -> declaration . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (100) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT ID IN ID AT expr , expr
    (17) envFunc -> . RUN ID WITH expr ITERATIONS
    (18) envFunc -> . RESET ID
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 100 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    declaration                    shift and go to state 4
    declarationList                shift and go to state 20
    empty                          shift and go to state 3
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 5

    (4) declaration -> envFunc .
    PUT             reduce using rule 4 (declaration -> envFunc .)
    RUN             reduce using rule 4 (declaration -> envFunc .)
    RESET           reduce using rule 4 (declaration -> envFunc .)
    LET             reduce using rule 4 (declaration -> envFunc .)
    BEHAVE          reduce using rule 4 (declaration -> envFunc .)
    AGENT           reduce using rule 4 (declaration -> envFunc .)
    ENV             reduce using rule 4 (declaration -> envFunc .)
    ID              reduce using rule 4 (declaration -> envFunc .)
    $end            reduce using rule 4 (declaration -> envFunc .)


state 6

    (5) declaration -> varAssign .
    PUT             reduce using rule 5 (declaration -> varAssign .)
    RUN             reduce using rule 5 (declaration -> varAssign .)
    RESET           reduce using rule 5 (declaration -> varAssign .)
    LET             reduce using rule 5 (declaration -> varAssign .)
    BEHAVE          reduce using rule 5 (declaration -> varAssign .)
    AGENT           reduce using rule 5 (declaration -> varAssign .)
    ENV             reduce using rule 5 (declaration -> varAssign .)
    ID              reduce using rule 5 (declaration -> varAssign .)
    $end            reduce using rule 5 (declaration -> varAssign .)


state 7

    (6) declaration -> varDecl .
    PUT             reduce using rule 6 (declaration -> varDecl .)
    RUN             reduce using rule 6 (declaration -> varDecl .)
    RESET           reduce using rule 6 (declaration -> varDecl .)
    LET             reduce using rule 6 (declaration -> varDecl .)
    BEHAVE          reduce using rule 6 (declaration -> varDecl .)
    AGENT           reduce using rule 6 (declaration -> varDecl .)
    ENV             reduce using rule 6 (declaration -> varDecl .)
    ID              reduce using rule 6 (declaration -> varDecl .)
    $end            reduce using rule 6 (declaration -> varDecl .)


state 8

    (7) declaration -> behaveDecl .
    PUT             reduce using rule 7 (declaration -> behaveDecl .)
    RUN             reduce using rule 7 (declaration -> behaveDecl .)
    RESET           reduce using rule 7 (declaration -> behaveDecl .)
    LET             reduce using rule 7 (declaration -> behaveDecl .)
    BEHAVE          reduce using rule 7 (declaration -> behaveDecl .)
    AGENT           reduce using rule 7 (declaration -> behaveDecl .)
    ENV             reduce using rule 7 (declaration -> behaveDecl .)
    ID              reduce using rule 7 (declaration -> behaveDecl .)
    $end            reduce using rule 7 (declaration -> behaveDecl .)


state 9

    (8) declaration -> agentDecl .
    PUT             reduce using rule 8 (declaration -> agentDecl .)
    RUN             reduce using rule 8 (declaration -> agentDecl .)
    RESET           reduce using rule 8 (declaration -> agentDecl .)
    LET             reduce using rule 8 (declaration -> agentDecl .)
    BEHAVE          reduce using rule 8 (declaration -> agentDecl .)
    AGENT           reduce using rule 8 (declaration -> agentDecl .)
    ENV             reduce using rule 8 (declaration -> agentDecl .)
    ID              reduce using rule 8 (declaration -> agentDecl .)
    $end            reduce using rule 8 (declaration -> agentDecl .)


state 10

    (9) declaration -> envDecl .
    PUT             reduce using rule 9 (declaration -> envDecl .)
    RUN             reduce using rule 9 (declaration -> envDecl .)
    RESET           reduce using rule 9 (declaration -> envDecl .)
    LET             reduce using rule 9 (declaration -> envDecl .)
    BEHAVE          reduce using rule 9 (declaration -> envDecl .)
    AGENT           reduce using rule 9 (declaration -> envDecl .)
    ENV             reduce using rule 9 (declaration -> envDecl .)
    ID              reduce using rule 9 (declaration -> envDecl .)
    $end            reduce using rule 9 (declaration -> envDecl .)


state 11

    (16) envFunc -> PUT . ID IN ID AT expr , expr
    ID              shift and go to state 21


state 12

    (74) getter -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 24
    ASSIGN          reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 22
    empty                          shift and go to state 23

state 13

    (17) envFunc -> RUN . ID WITH expr ITERATIONS
    ID              shift and go to state 25


state 14

    (18) envFunc -> RESET . ID
    ID              shift and go to state 26


state 15

    (15) varAssign -> getter . ASSIGN expr SEP
    ASSIGN          shift and go to state 27


state 16

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 28


state 17

    (12) behaveDecl -> BEHAVE . ID { behaveBody }
    ID              shift and go to state 29


state 18

    (11) agentDecl -> AGENT . ID { agentBody }
    ID              shift and go to state 30


state 19

    (10) envDecl -> ENV . ID { envBody }
    ID              shift and go to state 31


state 20

    (3) declarationList -> declaration declarationList .
    $end            reduce using rule 3 (declarationList -> declaration declarationList .)


state 21

    (16) envFunc -> PUT ID . IN ID AT expr , expr
    IN              shift and go to state 32


state 22

    (74) getter -> ID dotTail .
    ASSIGN          reduce using rule 74 (getter -> ID dotTail .)


state 23

    (75) dotTail -> empty .
    ASSIGN          reduce using rule 75 (dotTail -> empty .)
    SEP             reduce using rule 75 (dotTail -> empty .)
    /               reduce using rule 75 (dotTail -> empty .)
    *               reduce using rule 75 (dotTail -> empty .)
    -               reduce using rule 75 (dotTail -> empty .)
    +               reduce using rule 75 (dotTail -> empty .)
    GREATER         reduce using rule 75 (dotTail -> empty .)
    GREATEREQ       reduce using rule 75 (dotTail -> empty .)
    LESSEQ          reduce using rule 75 (dotTail -> empty .)
    LESS            reduce using rule 75 (dotTail -> empty .)
    EQEQ            reduce using rule 75 (dotTail -> empty .)
    NOTEQ           reduce using rule 75 (dotTail -> empty .)
    AND             reduce using rule 75 (dotTail -> empty .)
    OR              reduce using rule 75 (dotTail -> empty .)
    ITERATIONS      reduce using rule 75 (dotTail -> empty .)
    )               reduce using rule 75 (dotTail -> empty .)
    ,               reduce using rule 75 (dotTail -> empty .)
    TO              reduce using rule 75 (dotTail -> empty .)
    {               reduce using rule 75 (dotTail -> empty .)
    PUT             reduce using rule 75 (dotTail -> empty .)
    RUN             reduce using rule 75 (dotTail -> empty .)
    RESET           reduce using rule 75 (dotTail -> empty .)
    LET             reduce using rule 75 (dotTail -> empty .)
    BEHAVE          reduce using rule 75 (dotTail -> empty .)
    AGENT           reduce using rule 75 (dotTail -> empty .)
    ENV             reduce using rule 75 (dotTail -> empty .)
    ID              reduce using rule 75 (dotTail -> empty .)
    $end            reduce using rule 75 (dotTail -> empty .)
    FIND            reduce using rule 75 (dotTail -> empty .)
    RANDOM          reduce using rule 75 (dotTail -> empty .)
    PICK            reduce using rule 75 (dotTail -> empty .)
    STOP            reduce using rule 75 (dotTail -> empty .)
    RESTART         reduce using rule 75 (dotTail -> empty .)
    SELL            reduce using rule 75 (dotTail -> empty .)
    TALK            reduce using rule 75 (dotTail -> empty .)
    IN              reduce using rule 75 (dotTail -> empty .)
    FOREACH         reduce using rule 75 (dotTail -> empty .)
    REPEAT          reduce using rule 75 (dotTail -> empty .)
    BUY             reduce using rule 75 (dotTail -> empty .)
    MOVE            reduce using rule 75 (dotTail -> empty .)
    }               reduce using rule 75 (dotTail -> empty .)


state 24

    (76) dotTail -> . . idTail
    (77) idTail -> . listFunc dotTail
    (78) idTail -> . ID dotTail
    (79) listFunc -> . REVERSE ( )
    (80) listFunc -> . POP ( )
    (81) listFunc -> . SIZE ( )
    (82) listFunc -> . PUSH ( expr )
    (83) listFunc -> . GET ( expr )
    ID              shift and go to state 35
    REVERSE         shift and go to state 36
    POP             shift and go to state 37
    SIZE            shift and go to state 38
    PUSH            shift and go to state 39
    GET             shift and go to state 40

    idTail                         shift and go to state 33
    listFunc                       shift and go to state 34

state 25

    (17) envFunc -> RUN ID . WITH expr ITERATIONS
    WITH            shift and go to state 41


state 26

    (18) envFunc -> RESET ID .
    PUT             reduce using rule 18 (envFunc -> RESET ID .)
    RUN             reduce using rule 18 (envFunc -> RESET ID .)
    RESET           reduce using rule 18 (envFunc -> RESET ID .)
    LET             reduce using rule 18 (envFunc -> RESET ID .)
    BEHAVE          reduce using rule 18 (envFunc -> RESET ID .)
    AGENT           reduce using rule 18 (envFunc -> RESET ID .)
    ENV             reduce using rule 18 (envFunc -> RESET ID .)
    ID              reduce using rule 18 (envFunc -> RESET ID .)
    $end            reduce using rule 18 (envFunc -> RESET ID .)


state 27

    (15) varAssign -> getter ASSIGN . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 42
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 28

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 55


state 29

    (12) behaveDecl -> BEHAVE ID . { behaveBody }
    {               shift and go to state 56


state 30

    (11) agentDecl -> AGENT ID . { agentBody }
    {               shift and go to state 57


state 31

    (10) envDecl -> ENV ID . { envBody }
    {               shift and go to state 58


state 32

    (16) envFunc -> PUT ID IN . ID AT expr , expr
    ID              shift and go to state 59


state 33

    (76) dotTail -> . idTail .
    ASSIGN          reduce using rule 76 (dotTail -> . idTail .)
    SEP             reduce using rule 76 (dotTail -> . idTail .)
    /               reduce using rule 76 (dotTail -> . idTail .)
    *               reduce using rule 76 (dotTail -> . idTail .)
    -               reduce using rule 76 (dotTail -> . idTail .)
    +               reduce using rule 76 (dotTail -> . idTail .)
    GREATER         reduce using rule 76 (dotTail -> . idTail .)
    GREATEREQ       reduce using rule 76 (dotTail -> . idTail .)
    LESSEQ          reduce using rule 76 (dotTail -> . idTail .)
    LESS            reduce using rule 76 (dotTail -> . idTail .)
    EQEQ            reduce using rule 76 (dotTail -> . idTail .)
    NOTEQ           reduce using rule 76 (dotTail -> . idTail .)
    AND             reduce using rule 76 (dotTail -> . idTail .)
    OR              reduce using rule 76 (dotTail -> . idTail .)
    ITERATIONS      reduce using rule 76 (dotTail -> . idTail .)
    )               reduce using rule 76 (dotTail -> . idTail .)
    ,               reduce using rule 76 (dotTail -> . idTail .)
    TO              reduce using rule 76 (dotTail -> . idTail .)
    {               reduce using rule 76 (dotTail -> . idTail .)
    PUT             reduce using rule 76 (dotTail -> . idTail .)
    RUN             reduce using rule 76 (dotTail -> . idTail .)
    RESET           reduce using rule 76 (dotTail -> . idTail .)
    LET             reduce using rule 76 (dotTail -> . idTail .)
    BEHAVE          reduce using rule 76 (dotTail -> . idTail .)
    AGENT           reduce using rule 76 (dotTail -> . idTail .)
    ENV             reduce using rule 76 (dotTail -> . idTail .)
    ID              reduce using rule 76 (dotTail -> . idTail .)
    $end            reduce using rule 76 (dotTail -> . idTail .)
    FIND            reduce using rule 76 (dotTail -> . idTail .)
    RANDOM          reduce using rule 76 (dotTail -> . idTail .)
    PICK            reduce using rule 76 (dotTail -> . idTail .)
    STOP            reduce using rule 76 (dotTail -> . idTail .)
    RESTART         reduce using rule 76 (dotTail -> . idTail .)
    SELL            reduce using rule 76 (dotTail -> . idTail .)
    TALK            reduce using rule 76 (dotTail -> . idTail .)
    IN              reduce using rule 76 (dotTail -> . idTail .)
    FOREACH         reduce using rule 76 (dotTail -> . idTail .)
    REPEAT          reduce using rule 76 (dotTail -> . idTail .)
    BUY             reduce using rule 76 (dotTail -> . idTail .)
    MOVE            reduce using rule 76 (dotTail -> . idTail .)
    }               reduce using rule 76 (dotTail -> . idTail .)


state 34

    (77) idTail -> listFunc . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 24
    ASSIGN          reduce using rule 100 (empty -> .)
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    ITERATIONS      reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    RUN             reduce using rule 100 (empty -> .)
    RESET           reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BEHAVE          reduce using rule 100 (empty -> .)
    AGENT           reduce using rule 100 (empty -> .)
    ENV             reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    FIND            reduce using rule 100 (empty -> .)
    RANDOM          reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    TALK            reduce using rule 100 (empty -> .)
    IN              reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 60
    empty                          shift and go to state 23

state 35

    (78) idTail -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 24
    ASSIGN          reduce using rule 100 (empty -> .)
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    ITERATIONS      reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    RUN             reduce using rule 100 (empty -> .)
    RESET           reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BEHAVE          reduce using rule 100 (empty -> .)
    AGENT           reduce using rule 100 (empty -> .)
    ENV             reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    FIND            reduce using rule 100 (empty -> .)
    RANDOM          reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    TALK            reduce using rule 100 (empty -> .)
    IN              reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 61
    empty                          shift and go to state 23

state 36

    (79) listFunc -> REVERSE . ( )
    (               shift and go to state 62


state 37

    (80) listFunc -> POP . ( )
    (               shift and go to state 63


state 38

    (81) listFunc -> SIZE . ( )
    (               shift and go to state 64


state 39

    (82) listFunc -> PUSH . ( expr )
    (               shift and go to state 65


state 40

    (83) listFunc -> GET . ( expr )
    (               shift and go to state 66


state 41

    (17) envFunc -> RUN ID WITH . expr ITERATIONS
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 67
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 42

    (15) varAssign -> getter ASSIGN expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 68
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 43

    (57) expr -> call .
    SEP             reduce using rule 57 (expr -> call .)
    /               reduce using rule 57 (expr -> call .)
    *               reduce using rule 57 (expr -> call .)
    -               reduce using rule 57 (expr -> call .)
    +               reduce using rule 57 (expr -> call .)
    GREATER         reduce using rule 57 (expr -> call .)
    GREATEREQ       reduce using rule 57 (expr -> call .)
    LESSEQ          reduce using rule 57 (expr -> call .)
    LESS            reduce using rule 57 (expr -> call .)
    EQEQ            reduce using rule 57 (expr -> call .)
    NOTEQ           reduce using rule 57 (expr -> call .)
    AND             reduce using rule 57 (expr -> call .)
    OR              reduce using rule 57 (expr -> call .)
    ITERATIONS      reduce using rule 57 (expr -> call .)
    )               reduce using rule 57 (expr -> call .)
    ,               reduce using rule 57 (expr -> call .)
    TO              reduce using rule 57 (expr -> call .)
    {               reduce using rule 57 (expr -> call .)
    PUT             reduce using rule 57 (expr -> call .)
    RUN             reduce using rule 57 (expr -> call .)
    RESET           reduce using rule 57 (expr -> call .)
    LET             reduce using rule 57 (expr -> call .)
    BEHAVE          reduce using rule 57 (expr -> call .)
    AGENT           reduce using rule 57 (expr -> call .)
    ENV             reduce using rule 57 (expr -> call .)
    ID              reduce using rule 57 (expr -> call .)
    $end            reduce using rule 57 (expr -> call .)
    FIND            reduce using rule 57 (expr -> call .)
    RANDOM          reduce using rule 57 (expr -> call .)
    PICK            reduce using rule 57 (expr -> call .)
    STOP            reduce using rule 57 (expr -> call .)
    RESTART         reduce using rule 57 (expr -> call .)
    SELL            reduce using rule 57 (expr -> call .)
    TALK            reduce using rule 57 (expr -> call .)
    IN              reduce using rule 57 (expr -> call .)
    FOREACH         reduce using rule 57 (expr -> call .)
    REPEAT          reduce using rule 57 (expr -> call .)
    BUY             reduce using rule 57 (expr -> call .)
    MOVE            reduce using rule 57 (expr -> call .)
    }               reduce using rule 57 (expr -> call .)


state 44

    (58) expr -> - . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 81
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 45

    (59) expr -> ! . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 82
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 46

    (72) call -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 24
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    ITERATIONS      reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    RUN             reduce using rule 100 (empty -> .)
    RESET           reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BEHAVE          reduce using rule 100 (empty -> .)
    AGENT           reduce using rule 100 (empty -> .)
    ENV             reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    FIND            reduce using rule 100 (empty -> .)
    RANDOM          reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    TALK            reduce using rule 100 (empty -> .)
    IN              reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 83
    empty                          shift and go to state 23

state 47

    (73) call -> primary .
    SEP             reduce using rule 73 (call -> primary .)
    /               reduce using rule 73 (call -> primary .)
    *               reduce using rule 73 (call -> primary .)
    -               reduce using rule 73 (call -> primary .)
    +               reduce using rule 73 (call -> primary .)
    GREATER         reduce using rule 73 (call -> primary .)
    GREATEREQ       reduce using rule 73 (call -> primary .)
    LESSEQ          reduce using rule 73 (call -> primary .)
    LESS            reduce using rule 73 (call -> primary .)
    EQEQ            reduce using rule 73 (call -> primary .)
    NOTEQ           reduce using rule 73 (call -> primary .)
    AND             reduce using rule 73 (call -> primary .)
    OR              reduce using rule 73 (call -> primary .)
    ITERATIONS      reduce using rule 73 (call -> primary .)
    )               reduce using rule 73 (call -> primary .)
    ,               reduce using rule 73 (call -> primary .)
    TO              reduce using rule 73 (call -> primary .)
    {               reduce using rule 73 (call -> primary .)
    PUT             reduce using rule 73 (call -> primary .)
    RUN             reduce using rule 73 (call -> primary .)
    RESET           reduce using rule 73 (call -> primary .)
    LET             reduce using rule 73 (call -> primary .)
    BEHAVE          reduce using rule 73 (call -> primary .)
    AGENT           reduce using rule 73 (call -> primary .)
    ENV             reduce using rule 73 (call -> primary .)
    ID              reduce using rule 73 (call -> primary .)
    $end            reduce using rule 73 (call -> primary .)
    FIND            reduce using rule 73 (call -> primary .)
    RANDOM          reduce using rule 73 (call -> primary .)
    PICK            reduce using rule 73 (call -> primary .)
    STOP            reduce using rule 73 (call -> primary .)
    RESTART         reduce using rule 73 (call -> primary .)
    SELL            reduce using rule 73 (call -> primary .)
    TALK            reduce using rule 73 (call -> primary .)
    IN              reduce using rule 73 (call -> primary .)
    FOREACH         reduce using rule 73 (call -> primary .)
    REPEAT          reduce using rule 73 (call -> primary .)
    BUY             reduce using rule 73 (call -> primary .)
    MOVE            reduce using rule 73 (call -> primary .)
    }               reduce using rule 73 (call -> primary .)


state 48

    (84) primary -> ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 84
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 49

    (85) primary -> { . bookItems }
    (93) bookItems -> . empty
    (94) bookItems -> . STRING : ( listItems ) , bookItems
    (100) empty -> .
    STRING          shift and go to state 87
    }               reduce using rule 100 (empty -> .)

    bookItems                      shift and go to state 85
    empty                          shift and go to state 86

state 50

    (86) primary -> [ . listItems ]
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    ]               reduce using rule 100 (empty -> .)
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    listItems                      shift and go to state 88
    empty                          shift and go to state 89
    expr                           shift and go to state 90
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 51

    (87) primary -> STRING .
    SEP             reduce using rule 87 (primary -> STRING .)
    /               reduce using rule 87 (primary -> STRING .)
    *               reduce using rule 87 (primary -> STRING .)
    -               reduce using rule 87 (primary -> STRING .)
    +               reduce using rule 87 (primary -> STRING .)
    GREATER         reduce using rule 87 (primary -> STRING .)
    GREATEREQ       reduce using rule 87 (primary -> STRING .)
    LESSEQ          reduce using rule 87 (primary -> STRING .)
    LESS            reduce using rule 87 (primary -> STRING .)
    EQEQ            reduce using rule 87 (primary -> STRING .)
    NOTEQ           reduce using rule 87 (primary -> STRING .)
    AND             reduce using rule 87 (primary -> STRING .)
    OR              reduce using rule 87 (primary -> STRING .)
    ITERATIONS      reduce using rule 87 (primary -> STRING .)
    )               reduce using rule 87 (primary -> STRING .)
    ,               reduce using rule 87 (primary -> STRING .)
    TO              reduce using rule 87 (primary -> STRING .)
    {               reduce using rule 87 (primary -> STRING .)
    PUT             reduce using rule 87 (primary -> STRING .)
    RUN             reduce using rule 87 (primary -> STRING .)
    RESET           reduce using rule 87 (primary -> STRING .)
    LET             reduce using rule 87 (primary -> STRING .)
    BEHAVE          reduce using rule 87 (primary -> STRING .)
    AGENT           reduce using rule 87 (primary -> STRING .)
    ENV             reduce using rule 87 (primary -> STRING .)
    ID              reduce using rule 87 (primary -> STRING .)
    $end            reduce using rule 87 (primary -> STRING .)
    FIND            reduce using rule 87 (primary -> STRING .)
    RANDOM          reduce using rule 87 (primary -> STRING .)
    PICK            reduce using rule 87 (primary -> STRING .)
    STOP            reduce using rule 87 (primary -> STRING .)
    RESTART         reduce using rule 87 (primary -> STRING .)
    SELL            reduce using rule 87 (primary -> STRING .)
    TALK            reduce using rule 87 (primary -> STRING .)
    IN              reduce using rule 87 (primary -> STRING .)
    FOREACH         reduce using rule 87 (primary -> STRING .)
    REPEAT          reduce using rule 87 (primary -> STRING .)
    BUY             reduce using rule 87 (primary -> STRING .)
    MOVE            reduce using rule 87 (primary -> STRING .)
    }               reduce using rule 87 (primary -> STRING .)


state 52

    (88) primary -> NUMBER .
    SEP             reduce using rule 88 (primary -> NUMBER .)
    /               reduce using rule 88 (primary -> NUMBER .)
    *               reduce using rule 88 (primary -> NUMBER .)
    -               reduce using rule 88 (primary -> NUMBER .)
    +               reduce using rule 88 (primary -> NUMBER .)
    GREATER         reduce using rule 88 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 88 (primary -> NUMBER .)
    LESSEQ          reduce using rule 88 (primary -> NUMBER .)
    LESS            reduce using rule 88 (primary -> NUMBER .)
    EQEQ            reduce using rule 88 (primary -> NUMBER .)
    NOTEQ           reduce using rule 88 (primary -> NUMBER .)
    AND             reduce using rule 88 (primary -> NUMBER .)
    OR              reduce using rule 88 (primary -> NUMBER .)
    ITERATIONS      reduce using rule 88 (primary -> NUMBER .)
    )               reduce using rule 88 (primary -> NUMBER .)
    ,               reduce using rule 88 (primary -> NUMBER .)
    TO              reduce using rule 88 (primary -> NUMBER .)
    {               reduce using rule 88 (primary -> NUMBER .)
    PUT             reduce using rule 88 (primary -> NUMBER .)
    RUN             reduce using rule 88 (primary -> NUMBER .)
    RESET           reduce using rule 88 (primary -> NUMBER .)
    LET             reduce using rule 88 (primary -> NUMBER .)
    BEHAVE          reduce using rule 88 (primary -> NUMBER .)
    AGENT           reduce using rule 88 (primary -> NUMBER .)
    ENV             reduce using rule 88 (primary -> NUMBER .)
    ID              reduce using rule 88 (primary -> NUMBER .)
    $end            reduce using rule 88 (primary -> NUMBER .)
    FIND            reduce using rule 88 (primary -> NUMBER .)
    RANDOM          reduce using rule 88 (primary -> NUMBER .)
    PICK            reduce using rule 88 (primary -> NUMBER .)
    STOP            reduce using rule 88 (primary -> NUMBER .)
    RESTART         reduce using rule 88 (primary -> NUMBER .)
    SELL            reduce using rule 88 (primary -> NUMBER .)
    TALK            reduce using rule 88 (primary -> NUMBER .)
    IN              reduce using rule 88 (primary -> NUMBER .)
    FOREACH         reduce using rule 88 (primary -> NUMBER .)
    REPEAT          reduce using rule 88 (primary -> NUMBER .)
    BUY             reduce using rule 88 (primary -> NUMBER .)
    MOVE            reduce using rule 88 (primary -> NUMBER .)
    }               reduce using rule 88 (primary -> NUMBER .)


state 53

    (89) primary -> FALSE .
    SEP             reduce using rule 89 (primary -> FALSE .)
    /               reduce using rule 89 (primary -> FALSE .)
    *               reduce using rule 89 (primary -> FALSE .)
    -               reduce using rule 89 (primary -> FALSE .)
    +               reduce using rule 89 (primary -> FALSE .)
    GREATER         reduce using rule 89 (primary -> FALSE .)
    GREATEREQ       reduce using rule 89 (primary -> FALSE .)
    LESSEQ          reduce using rule 89 (primary -> FALSE .)
    LESS            reduce using rule 89 (primary -> FALSE .)
    EQEQ            reduce using rule 89 (primary -> FALSE .)
    NOTEQ           reduce using rule 89 (primary -> FALSE .)
    AND             reduce using rule 89 (primary -> FALSE .)
    OR              reduce using rule 89 (primary -> FALSE .)
    ITERATIONS      reduce using rule 89 (primary -> FALSE .)
    )               reduce using rule 89 (primary -> FALSE .)
    ,               reduce using rule 89 (primary -> FALSE .)
    TO              reduce using rule 89 (primary -> FALSE .)
    {               reduce using rule 89 (primary -> FALSE .)
    PUT             reduce using rule 89 (primary -> FALSE .)
    RUN             reduce using rule 89 (primary -> FALSE .)
    RESET           reduce using rule 89 (primary -> FALSE .)
    LET             reduce using rule 89 (primary -> FALSE .)
    BEHAVE          reduce using rule 89 (primary -> FALSE .)
    AGENT           reduce using rule 89 (primary -> FALSE .)
    ENV             reduce using rule 89 (primary -> FALSE .)
    ID              reduce using rule 89 (primary -> FALSE .)
    $end            reduce using rule 89 (primary -> FALSE .)
    FIND            reduce using rule 89 (primary -> FALSE .)
    RANDOM          reduce using rule 89 (primary -> FALSE .)
    PICK            reduce using rule 89 (primary -> FALSE .)
    STOP            reduce using rule 89 (primary -> FALSE .)
    RESTART         reduce using rule 89 (primary -> FALSE .)
    SELL            reduce using rule 89 (primary -> FALSE .)
    TALK            reduce using rule 89 (primary -> FALSE .)
    IN              reduce using rule 89 (primary -> FALSE .)
    FOREACH         reduce using rule 89 (primary -> FALSE .)
    REPEAT          reduce using rule 89 (primary -> FALSE .)
    BUY             reduce using rule 89 (primary -> FALSE .)
    MOVE            reduce using rule 89 (primary -> FALSE .)
    }               reduce using rule 89 (primary -> FALSE .)


state 54

    (90) primary -> TRUE .
    SEP             reduce using rule 90 (primary -> TRUE .)
    /               reduce using rule 90 (primary -> TRUE .)
    *               reduce using rule 90 (primary -> TRUE .)
    -               reduce using rule 90 (primary -> TRUE .)
    +               reduce using rule 90 (primary -> TRUE .)
    GREATER         reduce using rule 90 (primary -> TRUE .)
    GREATEREQ       reduce using rule 90 (primary -> TRUE .)
    LESSEQ          reduce using rule 90 (primary -> TRUE .)
    LESS            reduce using rule 90 (primary -> TRUE .)
    EQEQ            reduce using rule 90 (primary -> TRUE .)
    NOTEQ           reduce using rule 90 (primary -> TRUE .)
    AND             reduce using rule 90 (primary -> TRUE .)
    OR              reduce using rule 90 (primary -> TRUE .)
    ITERATIONS      reduce using rule 90 (primary -> TRUE .)
    )               reduce using rule 90 (primary -> TRUE .)
    ,               reduce using rule 90 (primary -> TRUE .)
    TO              reduce using rule 90 (primary -> TRUE .)
    {               reduce using rule 90 (primary -> TRUE .)
    PUT             reduce using rule 90 (primary -> TRUE .)
    RUN             reduce using rule 90 (primary -> TRUE .)
    RESET           reduce using rule 90 (primary -> TRUE .)
    LET             reduce using rule 90 (primary -> TRUE .)
    BEHAVE          reduce using rule 90 (primary -> TRUE .)
    AGENT           reduce using rule 90 (primary -> TRUE .)
    ENV             reduce using rule 90 (primary -> TRUE .)
    ID              reduce using rule 90 (primary -> TRUE .)
    $end            reduce using rule 90 (primary -> TRUE .)
    FIND            reduce using rule 90 (primary -> TRUE .)
    RANDOM          reduce using rule 90 (primary -> TRUE .)
    PICK            reduce using rule 90 (primary -> TRUE .)
    STOP            reduce using rule 90 (primary -> TRUE .)
    RESTART         reduce using rule 90 (primary -> TRUE .)
    SELL            reduce using rule 90 (primary -> TRUE .)
    TALK            reduce using rule 90 (primary -> TRUE .)
    IN              reduce using rule 90 (primary -> TRUE .)
    FOREACH         reduce using rule 90 (primary -> TRUE .)
    REPEAT          reduce using rule 90 (primary -> TRUE .)
    BUY             reduce using rule 90 (primary -> TRUE .)
    MOVE            reduce using rule 90 (primary -> TRUE .)
    }               reduce using rule 90 (primary -> TRUE .)


state 55

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (95) type -> . BOOK_TYPE
    (96) type -> . LIST_TYPE
    (97) type -> . STRING_TYPE
    (98) type -> . BOOL_TYPE
    (99) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 92
    LIST_TYPE       shift and go to state 93
    STRING_TYPE     shift and go to state 94
    BOOL_TYPE       shift and go to state 95
    NUMBER_TYPE     shift and go to state 96

    type                           shift and go to state 91

state 56

    (12) behaveDecl -> BEHAVE ID { . behaveBody }
    (21) behaveBody -> . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    behaveBody                     shift and go to state 97
    statementList                  shift and go to state 98
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 57

    (11) agentDecl -> AGENT ID { . agentBody }
    (20) agentBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    agentBody                      shift and go to state 122
    varList                        shift and go to state 123
    empty                          shift and go to state 124
    varAssign                      shift and go to state 125
    varDecl                        shift and go to state 126
    getter                         shift and go to state 15

state 58

    (10) envDecl -> ENV ID { . envBody }
    (19) envBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    envBody                        shift and go to state 127
    varList                        shift and go to state 128
    empty                          shift and go to state 124
    varAssign                      shift and go to state 125
    varDecl                        shift and go to state 126
    getter                         shift and go to state 15

state 59

    (16) envFunc -> PUT ID IN ID . AT expr , expr
    AT              shift and go to state 129


state 60

    (77) idTail -> listFunc dotTail .
    ASSIGN          reduce using rule 77 (idTail -> listFunc dotTail .)
    SEP             reduce using rule 77 (idTail -> listFunc dotTail .)
    /               reduce using rule 77 (idTail -> listFunc dotTail .)
    *               reduce using rule 77 (idTail -> listFunc dotTail .)
    -               reduce using rule 77 (idTail -> listFunc dotTail .)
    +               reduce using rule 77 (idTail -> listFunc dotTail .)
    GREATER         reduce using rule 77 (idTail -> listFunc dotTail .)
    GREATEREQ       reduce using rule 77 (idTail -> listFunc dotTail .)
    LESSEQ          reduce using rule 77 (idTail -> listFunc dotTail .)
    LESS            reduce using rule 77 (idTail -> listFunc dotTail .)
    EQEQ            reduce using rule 77 (idTail -> listFunc dotTail .)
    NOTEQ           reduce using rule 77 (idTail -> listFunc dotTail .)
    AND             reduce using rule 77 (idTail -> listFunc dotTail .)
    OR              reduce using rule 77 (idTail -> listFunc dotTail .)
    ITERATIONS      reduce using rule 77 (idTail -> listFunc dotTail .)
    )               reduce using rule 77 (idTail -> listFunc dotTail .)
    ,               reduce using rule 77 (idTail -> listFunc dotTail .)
    TO              reduce using rule 77 (idTail -> listFunc dotTail .)
    {               reduce using rule 77 (idTail -> listFunc dotTail .)
    PUT             reduce using rule 77 (idTail -> listFunc dotTail .)
    RUN             reduce using rule 77 (idTail -> listFunc dotTail .)
    RESET           reduce using rule 77 (idTail -> listFunc dotTail .)
    LET             reduce using rule 77 (idTail -> listFunc dotTail .)
    BEHAVE          reduce using rule 77 (idTail -> listFunc dotTail .)
    AGENT           reduce using rule 77 (idTail -> listFunc dotTail .)
    ENV             reduce using rule 77 (idTail -> listFunc dotTail .)
    ID              reduce using rule 77 (idTail -> listFunc dotTail .)
    $end            reduce using rule 77 (idTail -> listFunc dotTail .)
    FIND            reduce using rule 77 (idTail -> listFunc dotTail .)
    RANDOM          reduce using rule 77 (idTail -> listFunc dotTail .)
    PICK            reduce using rule 77 (idTail -> listFunc dotTail .)
    STOP            reduce using rule 77 (idTail -> listFunc dotTail .)
    RESTART         reduce using rule 77 (idTail -> listFunc dotTail .)
    SELL            reduce using rule 77 (idTail -> listFunc dotTail .)
    TALK            reduce using rule 77 (idTail -> listFunc dotTail .)
    IN              reduce using rule 77 (idTail -> listFunc dotTail .)
    FOREACH         reduce using rule 77 (idTail -> listFunc dotTail .)
    REPEAT          reduce using rule 77 (idTail -> listFunc dotTail .)
    BUY             reduce using rule 77 (idTail -> listFunc dotTail .)
    MOVE            reduce using rule 77 (idTail -> listFunc dotTail .)
    }               reduce using rule 77 (idTail -> listFunc dotTail .)


state 61

    (78) idTail -> ID dotTail .
    ASSIGN          reduce using rule 78 (idTail -> ID dotTail .)
    SEP             reduce using rule 78 (idTail -> ID dotTail .)
    /               reduce using rule 78 (idTail -> ID dotTail .)
    *               reduce using rule 78 (idTail -> ID dotTail .)
    -               reduce using rule 78 (idTail -> ID dotTail .)
    +               reduce using rule 78 (idTail -> ID dotTail .)
    GREATER         reduce using rule 78 (idTail -> ID dotTail .)
    GREATEREQ       reduce using rule 78 (idTail -> ID dotTail .)
    LESSEQ          reduce using rule 78 (idTail -> ID dotTail .)
    LESS            reduce using rule 78 (idTail -> ID dotTail .)
    EQEQ            reduce using rule 78 (idTail -> ID dotTail .)
    NOTEQ           reduce using rule 78 (idTail -> ID dotTail .)
    AND             reduce using rule 78 (idTail -> ID dotTail .)
    OR              reduce using rule 78 (idTail -> ID dotTail .)
    ITERATIONS      reduce using rule 78 (idTail -> ID dotTail .)
    )               reduce using rule 78 (idTail -> ID dotTail .)
    ,               reduce using rule 78 (idTail -> ID dotTail .)
    TO              reduce using rule 78 (idTail -> ID dotTail .)
    {               reduce using rule 78 (idTail -> ID dotTail .)
    PUT             reduce using rule 78 (idTail -> ID dotTail .)
    RUN             reduce using rule 78 (idTail -> ID dotTail .)
    RESET           reduce using rule 78 (idTail -> ID dotTail .)
    LET             reduce using rule 78 (idTail -> ID dotTail .)
    BEHAVE          reduce using rule 78 (idTail -> ID dotTail .)
    AGENT           reduce using rule 78 (idTail -> ID dotTail .)
    ENV             reduce using rule 78 (idTail -> ID dotTail .)
    ID              reduce using rule 78 (idTail -> ID dotTail .)
    $end            reduce using rule 78 (idTail -> ID dotTail .)
    FIND            reduce using rule 78 (idTail -> ID dotTail .)
    RANDOM          reduce using rule 78 (idTail -> ID dotTail .)
    PICK            reduce using rule 78 (idTail -> ID dotTail .)
    STOP            reduce using rule 78 (idTail -> ID dotTail .)
    RESTART         reduce using rule 78 (idTail -> ID dotTail .)
    SELL            reduce using rule 78 (idTail -> ID dotTail .)
    TALK            reduce using rule 78 (idTail -> ID dotTail .)
    IN              reduce using rule 78 (idTail -> ID dotTail .)
    FOREACH         reduce using rule 78 (idTail -> ID dotTail .)
    REPEAT          reduce using rule 78 (idTail -> ID dotTail .)
    BUY             reduce using rule 78 (idTail -> ID dotTail .)
    MOVE            reduce using rule 78 (idTail -> ID dotTail .)
    }               reduce using rule 78 (idTail -> ID dotTail .)


state 62

    (79) listFunc -> REVERSE ( . )
    )               shift and go to state 130


state 63

    (80) listFunc -> POP ( . )
    )               shift and go to state 131


state 64

    (81) listFunc -> SIZE ( . )
    )               shift and go to state 132


state 65

    (82) listFunc -> PUSH ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 133
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 66

    (83) listFunc -> GET ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 134
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 67

    (17) envFunc -> RUN ID WITH expr . ITERATIONS
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ITERATIONS      shift and go to state 135
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 68

    (15) varAssign -> getter ASSIGN expr SEP .
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RUN             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESET           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BEHAVE          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    AGENT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ENV             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FIND            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RANDOM          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TALK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 69

    (60) expr -> expr / . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 136
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 70

    (61) expr -> expr * . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 137
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 71

    (62) expr -> expr - . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 138
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 72

    (63) expr -> expr + . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 139
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 73

    (64) expr -> expr GREATER . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 140
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 74

    (65) expr -> expr GREATEREQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 141
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 75

    (66) expr -> expr LESSEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 142
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 76

    (67) expr -> expr LESS . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 143
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 77

    (68) expr -> expr EQEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 144
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 78

    (69) expr -> expr NOTEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 145
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 79

    (70) expr -> expr AND . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 146
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 80

    (71) expr -> expr OR . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 147
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 81

    (58) expr -> - expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 58 (expr -> - expr .)
    /               reduce using rule 58 (expr -> - expr .)
    *               reduce using rule 58 (expr -> - expr .)
    -               reduce using rule 58 (expr -> - expr .)
    +               reduce using rule 58 (expr -> - expr .)
    GREATER         reduce using rule 58 (expr -> - expr .)
    GREATEREQ       reduce using rule 58 (expr -> - expr .)
    LESSEQ          reduce using rule 58 (expr -> - expr .)
    LESS            reduce using rule 58 (expr -> - expr .)
    EQEQ            reduce using rule 58 (expr -> - expr .)
    NOTEQ           reduce using rule 58 (expr -> - expr .)
    AND             reduce using rule 58 (expr -> - expr .)
    OR              reduce using rule 58 (expr -> - expr .)
    ITERATIONS      reduce using rule 58 (expr -> - expr .)
    )               reduce using rule 58 (expr -> - expr .)
    ,               reduce using rule 58 (expr -> - expr .)
    TO              reduce using rule 58 (expr -> - expr .)
    {               reduce using rule 58 (expr -> - expr .)
    PUT             reduce using rule 58 (expr -> - expr .)
    RUN             reduce using rule 58 (expr -> - expr .)
    RESET           reduce using rule 58 (expr -> - expr .)
    LET             reduce using rule 58 (expr -> - expr .)
    BEHAVE          reduce using rule 58 (expr -> - expr .)
    AGENT           reduce using rule 58 (expr -> - expr .)
    ENV             reduce using rule 58 (expr -> - expr .)
    ID              reduce using rule 58 (expr -> - expr .)
    $end            reduce using rule 58 (expr -> - expr .)
    FIND            reduce using rule 58 (expr -> - expr .)
    RANDOM          reduce using rule 58 (expr -> - expr .)
    PICK            reduce using rule 58 (expr -> - expr .)
    STOP            reduce using rule 58 (expr -> - expr .)
    RESTART         reduce using rule 58 (expr -> - expr .)
    SELL            reduce using rule 58 (expr -> - expr .)
    TALK            reduce using rule 58 (expr -> - expr .)
    IN              reduce using rule 58 (expr -> - expr .)
    FOREACH         reduce using rule 58 (expr -> - expr .)
    REPEAT          reduce using rule 58 (expr -> - expr .)
    BUY             reduce using rule 58 (expr -> - expr .)
    MOVE            reduce using rule 58 (expr -> - expr .)
    }               reduce using rule 58 (expr -> - expr .)


state 82

    (59) expr -> ! expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 59 (expr -> ! expr .)
    /               reduce using rule 59 (expr -> ! expr .)
    *               reduce using rule 59 (expr -> ! expr .)
    -               reduce using rule 59 (expr -> ! expr .)
    +               reduce using rule 59 (expr -> ! expr .)
    GREATER         reduce using rule 59 (expr -> ! expr .)
    GREATEREQ       reduce using rule 59 (expr -> ! expr .)
    LESSEQ          reduce using rule 59 (expr -> ! expr .)
    LESS            reduce using rule 59 (expr -> ! expr .)
    EQEQ            reduce using rule 59 (expr -> ! expr .)
    NOTEQ           reduce using rule 59 (expr -> ! expr .)
    AND             reduce using rule 59 (expr -> ! expr .)
    OR              reduce using rule 59 (expr -> ! expr .)
    ITERATIONS      reduce using rule 59 (expr -> ! expr .)
    )               reduce using rule 59 (expr -> ! expr .)
    ,               reduce using rule 59 (expr -> ! expr .)
    TO              reduce using rule 59 (expr -> ! expr .)
    {               reduce using rule 59 (expr -> ! expr .)
    PUT             reduce using rule 59 (expr -> ! expr .)
    RUN             reduce using rule 59 (expr -> ! expr .)
    RESET           reduce using rule 59 (expr -> ! expr .)
    LET             reduce using rule 59 (expr -> ! expr .)
    BEHAVE          reduce using rule 59 (expr -> ! expr .)
    AGENT           reduce using rule 59 (expr -> ! expr .)
    ENV             reduce using rule 59 (expr -> ! expr .)
    ID              reduce using rule 59 (expr -> ! expr .)
    $end            reduce using rule 59 (expr -> ! expr .)
    FIND            reduce using rule 59 (expr -> ! expr .)
    RANDOM          reduce using rule 59 (expr -> ! expr .)
    PICK            reduce using rule 59 (expr -> ! expr .)
    STOP            reduce using rule 59 (expr -> ! expr .)
    RESTART         reduce using rule 59 (expr -> ! expr .)
    SELL            reduce using rule 59 (expr -> ! expr .)
    TALK            reduce using rule 59 (expr -> ! expr .)
    IN              reduce using rule 59 (expr -> ! expr .)
    FOREACH         reduce using rule 59 (expr -> ! expr .)
    REPEAT          reduce using rule 59 (expr -> ! expr .)
    BUY             reduce using rule 59 (expr -> ! expr .)
    MOVE            reduce using rule 59 (expr -> ! expr .)
    }               reduce using rule 59 (expr -> ! expr .)


state 83

    (72) call -> ID dotTail .
    SEP             reduce using rule 72 (call -> ID dotTail .)
    /               reduce using rule 72 (call -> ID dotTail .)
    *               reduce using rule 72 (call -> ID dotTail .)
    -               reduce using rule 72 (call -> ID dotTail .)
    +               reduce using rule 72 (call -> ID dotTail .)
    GREATER         reduce using rule 72 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 72 (call -> ID dotTail .)
    LESSEQ          reduce using rule 72 (call -> ID dotTail .)
    LESS            reduce using rule 72 (call -> ID dotTail .)
    EQEQ            reduce using rule 72 (call -> ID dotTail .)
    NOTEQ           reduce using rule 72 (call -> ID dotTail .)
    AND             reduce using rule 72 (call -> ID dotTail .)
    OR              reduce using rule 72 (call -> ID dotTail .)
    ITERATIONS      reduce using rule 72 (call -> ID dotTail .)
    )               reduce using rule 72 (call -> ID dotTail .)
    ,               reduce using rule 72 (call -> ID dotTail .)
    TO              reduce using rule 72 (call -> ID dotTail .)
    {               reduce using rule 72 (call -> ID dotTail .)
    PUT             reduce using rule 72 (call -> ID dotTail .)
    RUN             reduce using rule 72 (call -> ID dotTail .)
    RESET           reduce using rule 72 (call -> ID dotTail .)
    LET             reduce using rule 72 (call -> ID dotTail .)
    BEHAVE          reduce using rule 72 (call -> ID dotTail .)
    AGENT           reduce using rule 72 (call -> ID dotTail .)
    ENV             reduce using rule 72 (call -> ID dotTail .)
    ID              reduce using rule 72 (call -> ID dotTail .)
    $end            reduce using rule 72 (call -> ID dotTail .)
    FIND            reduce using rule 72 (call -> ID dotTail .)
    RANDOM          reduce using rule 72 (call -> ID dotTail .)
    PICK            reduce using rule 72 (call -> ID dotTail .)
    STOP            reduce using rule 72 (call -> ID dotTail .)
    RESTART         reduce using rule 72 (call -> ID dotTail .)
    SELL            reduce using rule 72 (call -> ID dotTail .)
    TALK            reduce using rule 72 (call -> ID dotTail .)
    IN              reduce using rule 72 (call -> ID dotTail .)
    FOREACH         reduce using rule 72 (call -> ID dotTail .)
    REPEAT          reduce using rule 72 (call -> ID dotTail .)
    BUY             reduce using rule 72 (call -> ID dotTail .)
    MOVE            reduce using rule 72 (call -> ID dotTail .)
    }               reduce using rule 72 (call -> ID dotTail .)


state 84

    (84) primary -> ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 148
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 85

    (85) primary -> { bookItems . }
    }               shift and go to state 149


state 86

    (93) bookItems -> empty .
    }               reduce using rule 93 (bookItems -> empty .)


state 87

    (94) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 150


state 88

    (86) primary -> [ listItems . ]
    ]               shift and go to state 151


state 89

    (91) listItems -> empty .
    ]               reduce using rule 91 (listItems -> empty .)
    )               reduce using rule 91 (listItems -> empty .)


state 90

    (92) listItems -> expr . , listItems
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 152
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 91

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 153
    SEP             shift and go to state 154


state 92

    (95) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 95 (type -> BOOK_TYPE .)
    SEP             reduce using rule 95 (type -> BOOK_TYPE .)


state 93

    (96) type -> LIST_TYPE .
    ASSIGN          reduce using rule 96 (type -> LIST_TYPE .)
    SEP             reduce using rule 96 (type -> LIST_TYPE .)


state 94

    (97) type -> STRING_TYPE .
    ASSIGN          reduce using rule 97 (type -> STRING_TYPE .)
    SEP             reduce using rule 97 (type -> STRING_TYPE .)


state 95

    (98) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 98 (type -> BOOL_TYPE .)
    SEP             reduce using rule 98 (type -> BOOL_TYPE .)


state 96

    (99) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 99 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 99 (type -> NUMBER_TYPE .)


state 97

    (12) behaveDecl -> BEHAVE ID { behaveBody . }
    }               shift and go to state 155


state 98

    (21) behaveBody -> statementList .
    }               reduce using rule 21 (behaveBody -> statementList .)


state 99

    (25) statementList -> empty .
    }               reduce using rule 25 (statementList -> empty .)


state 100

    (26) statementList -> statement . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statement                      shift and go to state 100
    statementList                  shift and go to state 156
    empty                          shift and go to state 99
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 101

    (27) statement -> primFuncStmt .
    FIND            reduce using rule 27 (statement -> primFuncStmt .)
    RANDOM          reduce using rule 27 (statement -> primFuncStmt .)
    PUT             reduce using rule 27 (statement -> primFuncStmt .)
    PICK            reduce using rule 27 (statement -> primFuncStmt .)
    STOP            reduce using rule 27 (statement -> primFuncStmt .)
    RESTART         reduce using rule 27 (statement -> primFuncStmt .)
    SELL            reduce using rule 27 (statement -> primFuncStmt .)
    TALK            reduce using rule 27 (statement -> primFuncStmt .)
    IN              reduce using rule 27 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 27 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 27 (statement -> primFuncStmt .)
    LET             reduce using rule 27 (statement -> primFuncStmt .)
    BUY             reduce using rule 27 (statement -> primFuncStmt .)
    MOVE            reduce using rule 27 (statement -> primFuncStmt .)
    ID              reduce using rule 27 (statement -> primFuncStmt .)
    }               reduce using rule 27 (statement -> primFuncStmt .)


state 102

    (28) statement -> incaseStmt .
    FIND            reduce using rule 28 (statement -> incaseStmt .)
    RANDOM          reduce using rule 28 (statement -> incaseStmt .)
    PUT             reduce using rule 28 (statement -> incaseStmt .)
    PICK            reduce using rule 28 (statement -> incaseStmt .)
    STOP            reduce using rule 28 (statement -> incaseStmt .)
    RESTART         reduce using rule 28 (statement -> incaseStmt .)
    SELL            reduce using rule 28 (statement -> incaseStmt .)
    TALK            reduce using rule 28 (statement -> incaseStmt .)
    IN              reduce using rule 28 (statement -> incaseStmt .)
    FOREACH         reduce using rule 28 (statement -> incaseStmt .)
    REPEAT          reduce using rule 28 (statement -> incaseStmt .)
    LET             reduce using rule 28 (statement -> incaseStmt .)
    BUY             reduce using rule 28 (statement -> incaseStmt .)
    MOVE            reduce using rule 28 (statement -> incaseStmt .)
    ID              reduce using rule 28 (statement -> incaseStmt .)
    }               reduce using rule 28 (statement -> incaseStmt .)


state 103

    (29) statement -> foreachStmt .
    FIND            reduce using rule 29 (statement -> foreachStmt .)
    RANDOM          reduce using rule 29 (statement -> foreachStmt .)
    PUT             reduce using rule 29 (statement -> foreachStmt .)
    PICK            reduce using rule 29 (statement -> foreachStmt .)
    STOP            reduce using rule 29 (statement -> foreachStmt .)
    RESTART         reduce using rule 29 (statement -> foreachStmt .)
    SELL            reduce using rule 29 (statement -> foreachStmt .)
    TALK            reduce using rule 29 (statement -> foreachStmt .)
    IN              reduce using rule 29 (statement -> foreachStmt .)
    FOREACH         reduce using rule 29 (statement -> foreachStmt .)
    REPEAT          reduce using rule 29 (statement -> foreachStmt .)
    LET             reduce using rule 29 (statement -> foreachStmt .)
    BUY             reduce using rule 29 (statement -> foreachStmt .)
    MOVE            reduce using rule 29 (statement -> foreachStmt .)
    ID              reduce using rule 29 (statement -> foreachStmt .)
    }               reduce using rule 29 (statement -> foreachStmt .)


state 104

    (30) statement -> repeatStmt .
    FIND            reduce using rule 30 (statement -> repeatStmt .)
    RANDOM          reduce using rule 30 (statement -> repeatStmt .)
    PUT             reduce using rule 30 (statement -> repeatStmt .)
    PICK            reduce using rule 30 (statement -> repeatStmt .)
    STOP            reduce using rule 30 (statement -> repeatStmt .)
    RESTART         reduce using rule 30 (statement -> repeatStmt .)
    SELL            reduce using rule 30 (statement -> repeatStmt .)
    TALK            reduce using rule 30 (statement -> repeatStmt .)
    IN              reduce using rule 30 (statement -> repeatStmt .)
    FOREACH         reduce using rule 30 (statement -> repeatStmt .)
    REPEAT          reduce using rule 30 (statement -> repeatStmt .)
    LET             reduce using rule 30 (statement -> repeatStmt .)
    BUY             reduce using rule 30 (statement -> repeatStmt .)
    MOVE            reduce using rule 30 (statement -> repeatStmt .)
    ID              reduce using rule 30 (statement -> repeatStmt .)
    }               reduce using rule 30 (statement -> repeatStmt .)


state 105

    (31) statement -> varAssign .
    FIND            reduce using rule 31 (statement -> varAssign .)
    RANDOM          reduce using rule 31 (statement -> varAssign .)
    PUT             reduce using rule 31 (statement -> varAssign .)
    PICK            reduce using rule 31 (statement -> varAssign .)
    STOP            reduce using rule 31 (statement -> varAssign .)
    RESTART         reduce using rule 31 (statement -> varAssign .)
    SELL            reduce using rule 31 (statement -> varAssign .)
    TALK            reduce using rule 31 (statement -> varAssign .)
    IN              reduce using rule 31 (statement -> varAssign .)
    FOREACH         reduce using rule 31 (statement -> varAssign .)
    REPEAT          reduce using rule 31 (statement -> varAssign .)
    LET             reduce using rule 31 (statement -> varAssign .)
    BUY             reduce using rule 31 (statement -> varAssign .)
    MOVE            reduce using rule 31 (statement -> varAssign .)
    ID              reduce using rule 31 (statement -> varAssign .)
    }               reduce using rule 31 (statement -> varAssign .)


state 106

    (32) statement -> varDecl .
    FIND            reduce using rule 32 (statement -> varDecl .)
    RANDOM          reduce using rule 32 (statement -> varDecl .)
    PUT             reduce using rule 32 (statement -> varDecl .)
    PICK            reduce using rule 32 (statement -> varDecl .)
    STOP            reduce using rule 32 (statement -> varDecl .)
    RESTART         reduce using rule 32 (statement -> varDecl .)
    SELL            reduce using rule 32 (statement -> varDecl .)
    TALK            reduce using rule 32 (statement -> varDecl .)
    IN              reduce using rule 32 (statement -> varDecl .)
    FOREACH         reduce using rule 32 (statement -> varDecl .)
    REPEAT          reduce using rule 32 (statement -> varDecl .)
    LET             reduce using rule 32 (statement -> varDecl .)
    BUY             reduce using rule 32 (statement -> varDecl .)
    MOVE            reduce using rule 32 (statement -> varDecl .)
    ID              reduce using rule 32 (statement -> varDecl .)
    }               reduce using rule 32 (statement -> varDecl .)


state 107

    (39) primFuncStmt -> FIND . PEERS
    (40) primFuncStmt -> FIND . OBJECTS
    PEERS           shift and go to state 157
    OBJECTS         shift and go to state 158


state 108

    (41) primFuncStmt -> RANDOM . FROM expr TO expr
    FROM            shift and go to state 159


state 109

    (42) primFuncStmt -> PUT . expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 160
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 110

    (43) primFuncStmt -> PICK . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 161
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 111

    (44) primFuncStmt -> STOP . SEP
    SEP             shift and go to state 162


state 112

    (45) primFuncStmt -> RESTART . BEHAVE
    BEHAVE          shift and go to state 163


state 113

    (46) primFuncStmt -> SELL . expr , expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 164
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 114

    (47) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 165


state 115

    (48) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 166


state 116

    (49) primFuncStmt -> TALK . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 167
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 117

    (35) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 168


state 118

    (34) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 169


state 119

    (33) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 170


state 120

    (55) buyStmt -> BUY . expr SEP
    (56) buyStmt -> BUY . expr , expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 171
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 121

    (50) moveStmt -> MOVE . RIGHT SEP
    (51) moveStmt -> MOVE . LEFT SEP
    (52) moveStmt -> MOVE . DOWN SEP
    (53) moveStmt -> MOVE . UP SEP
    (54) moveStmt -> MOVE . SEP expr , expr SEP
    RIGHT           shift and go to state 172
    LEFT            shift and go to state 174
    DOWN            shift and go to state 175
    UP              shift and go to state 176
    SEP             shift and go to state 173


state 122

    (11) agentDecl -> AGENT ID { agentBody . }
    }               shift and go to state 177


state 123

    (20) agentBody -> varList .
    }               reduce using rule 20 (agentBody -> varList .)


state 124

    (22) varList -> empty .
    }               reduce using rule 22 (varList -> empty .)


state 125

    (23) varList -> varAssign . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varAssign                      shift and go to state 125
    varList                        shift and go to state 178
    empty                          shift and go to state 124
    varDecl                        shift and go to state 126
    getter                         shift and go to state 15

state 126

    (24) varList -> varDecl . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varDecl                        shift and go to state 126
    varList                        shift and go to state 179
    empty                          shift and go to state 124
    varAssign                      shift and go to state 125
    getter                         shift and go to state 15

state 127

    (10) envDecl -> ENV ID { envBody . }
    }               shift and go to state 180


state 128

    (19) envBody -> varList .
    }               reduce using rule 19 (envBody -> varList .)


state 129

    (16) envFunc -> PUT ID IN ID AT . expr , expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 181
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 130

    (79) listFunc -> REVERSE ( ) .
    .               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ASSIGN          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    SEP             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    /               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    *               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    -               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    +               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    GREATER         reduce using rule 79 (listFunc -> REVERSE ( ) .)
    GREATEREQ       reduce using rule 79 (listFunc -> REVERSE ( ) .)
    LESSEQ          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    LESS            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    EQEQ            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    NOTEQ           reduce using rule 79 (listFunc -> REVERSE ( ) .)
    AND             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    OR              reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ITERATIONS      reduce using rule 79 (listFunc -> REVERSE ( ) .)
    )               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ,               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    TO              reduce using rule 79 (listFunc -> REVERSE ( ) .)
    {               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    PUT             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    RUN             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    RESET           reduce using rule 79 (listFunc -> REVERSE ( ) .)
    LET             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    BEHAVE          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    AGENT           reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ENV             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ID              reduce using rule 79 (listFunc -> REVERSE ( ) .)
    $end            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    FIND            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    RANDOM          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    PICK            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    STOP            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    RESTART         reduce using rule 79 (listFunc -> REVERSE ( ) .)
    SELL            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    TALK            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    IN              reduce using rule 79 (listFunc -> REVERSE ( ) .)
    FOREACH         reduce using rule 79 (listFunc -> REVERSE ( ) .)
    REPEAT          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    BUY             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    MOVE            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    }               reduce using rule 79 (listFunc -> REVERSE ( ) .)


state 131

    (80) listFunc -> POP ( ) .
    .               reduce using rule 80 (listFunc -> POP ( ) .)
    ASSIGN          reduce using rule 80 (listFunc -> POP ( ) .)
    SEP             reduce using rule 80 (listFunc -> POP ( ) .)
    /               reduce using rule 80 (listFunc -> POP ( ) .)
    *               reduce using rule 80 (listFunc -> POP ( ) .)
    -               reduce using rule 80 (listFunc -> POP ( ) .)
    +               reduce using rule 80 (listFunc -> POP ( ) .)
    GREATER         reduce using rule 80 (listFunc -> POP ( ) .)
    GREATEREQ       reduce using rule 80 (listFunc -> POP ( ) .)
    LESSEQ          reduce using rule 80 (listFunc -> POP ( ) .)
    LESS            reduce using rule 80 (listFunc -> POP ( ) .)
    EQEQ            reduce using rule 80 (listFunc -> POP ( ) .)
    NOTEQ           reduce using rule 80 (listFunc -> POP ( ) .)
    AND             reduce using rule 80 (listFunc -> POP ( ) .)
    OR              reduce using rule 80 (listFunc -> POP ( ) .)
    ITERATIONS      reduce using rule 80 (listFunc -> POP ( ) .)
    )               reduce using rule 80 (listFunc -> POP ( ) .)
    ,               reduce using rule 80 (listFunc -> POP ( ) .)
    TO              reduce using rule 80 (listFunc -> POP ( ) .)
    {               reduce using rule 80 (listFunc -> POP ( ) .)
    PUT             reduce using rule 80 (listFunc -> POP ( ) .)
    RUN             reduce using rule 80 (listFunc -> POP ( ) .)
    RESET           reduce using rule 80 (listFunc -> POP ( ) .)
    LET             reduce using rule 80 (listFunc -> POP ( ) .)
    BEHAVE          reduce using rule 80 (listFunc -> POP ( ) .)
    AGENT           reduce using rule 80 (listFunc -> POP ( ) .)
    ENV             reduce using rule 80 (listFunc -> POP ( ) .)
    ID              reduce using rule 80 (listFunc -> POP ( ) .)
    $end            reduce using rule 80 (listFunc -> POP ( ) .)
    FIND            reduce using rule 80 (listFunc -> POP ( ) .)
    RANDOM          reduce using rule 80 (listFunc -> POP ( ) .)
    PICK            reduce using rule 80 (listFunc -> POP ( ) .)
    STOP            reduce using rule 80 (listFunc -> POP ( ) .)
    RESTART         reduce using rule 80 (listFunc -> POP ( ) .)
    SELL            reduce using rule 80 (listFunc -> POP ( ) .)
    TALK            reduce using rule 80 (listFunc -> POP ( ) .)
    IN              reduce using rule 80 (listFunc -> POP ( ) .)
    FOREACH         reduce using rule 80 (listFunc -> POP ( ) .)
    REPEAT          reduce using rule 80 (listFunc -> POP ( ) .)
    BUY             reduce using rule 80 (listFunc -> POP ( ) .)
    MOVE            reduce using rule 80 (listFunc -> POP ( ) .)
    }               reduce using rule 80 (listFunc -> POP ( ) .)


state 132

    (81) listFunc -> SIZE ( ) .
    .               reduce using rule 81 (listFunc -> SIZE ( ) .)
    ASSIGN          reduce using rule 81 (listFunc -> SIZE ( ) .)
    SEP             reduce using rule 81 (listFunc -> SIZE ( ) .)
    /               reduce using rule 81 (listFunc -> SIZE ( ) .)
    *               reduce using rule 81 (listFunc -> SIZE ( ) .)
    -               reduce using rule 81 (listFunc -> SIZE ( ) .)
    +               reduce using rule 81 (listFunc -> SIZE ( ) .)
    GREATER         reduce using rule 81 (listFunc -> SIZE ( ) .)
    GREATEREQ       reduce using rule 81 (listFunc -> SIZE ( ) .)
    LESSEQ          reduce using rule 81 (listFunc -> SIZE ( ) .)
    LESS            reduce using rule 81 (listFunc -> SIZE ( ) .)
    EQEQ            reduce using rule 81 (listFunc -> SIZE ( ) .)
    NOTEQ           reduce using rule 81 (listFunc -> SIZE ( ) .)
    AND             reduce using rule 81 (listFunc -> SIZE ( ) .)
    OR              reduce using rule 81 (listFunc -> SIZE ( ) .)
    ITERATIONS      reduce using rule 81 (listFunc -> SIZE ( ) .)
    )               reduce using rule 81 (listFunc -> SIZE ( ) .)
    ,               reduce using rule 81 (listFunc -> SIZE ( ) .)
    TO              reduce using rule 81 (listFunc -> SIZE ( ) .)
    {               reduce using rule 81 (listFunc -> SIZE ( ) .)
    PUT             reduce using rule 81 (listFunc -> SIZE ( ) .)
    RUN             reduce using rule 81 (listFunc -> SIZE ( ) .)
    RESET           reduce using rule 81 (listFunc -> SIZE ( ) .)
    LET             reduce using rule 81 (listFunc -> SIZE ( ) .)
    BEHAVE          reduce using rule 81 (listFunc -> SIZE ( ) .)
    AGENT           reduce using rule 81 (listFunc -> SIZE ( ) .)
    ENV             reduce using rule 81 (listFunc -> SIZE ( ) .)
    ID              reduce using rule 81 (listFunc -> SIZE ( ) .)
    $end            reduce using rule 81 (listFunc -> SIZE ( ) .)
    FIND            reduce using rule 81 (listFunc -> SIZE ( ) .)
    RANDOM          reduce using rule 81 (listFunc -> SIZE ( ) .)
    PICK            reduce using rule 81 (listFunc -> SIZE ( ) .)
    STOP            reduce using rule 81 (listFunc -> SIZE ( ) .)
    RESTART         reduce using rule 81 (listFunc -> SIZE ( ) .)
    SELL            reduce using rule 81 (listFunc -> SIZE ( ) .)
    TALK            reduce using rule 81 (listFunc -> SIZE ( ) .)
    IN              reduce using rule 81 (listFunc -> SIZE ( ) .)
    FOREACH         reduce using rule 81 (listFunc -> SIZE ( ) .)
    REPEAT          reduce using rule 81 (listFunc -> SIZE ( ) .)
    BUY             reduce using rule 81 (listFunc -> SIZE ( ) .)
    MOVE            reduce using rule 81 (listFunc -> SIZE ( ) .)
    }               reduce using rule 81 (listFunc -> SIZE ( ) .)


state 133

    (82) listFunc -> PUSH ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 182
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 134

    (83) listFunc -> GET ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 183
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 135

    (17) envFunc -> RUN ID WITH expr ITERATIONS .
    PUT             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    RUN             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    RESET           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    LET             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    BEHAVE          reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    AGENT           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    ENV             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    ID              reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)
    $end            reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS .)


state 136

    (60) expr -> expr / expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 60 (expr -> expr / expr .)
    /               reduce using rule 60 (expr -> expr / expr .)
    *               reduce using rule 60 (expr -> expr / expr .)
    -               reduce using rule 60 (expr -> expr / expr .)
    +               reduce using rule 60 (expr -> expr / expr .)
    GREATER         reduce using rule 60 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 60 (expr -> expr / expr .)
    LESSEQ          reduce using rule 60 (expr -> expr / expr .)
    LESS            reduce using rule 60 (expr -> expr / expr .)
    EQEQ            reduce using rule 60 (expr -> expr / expr .)
    NOTEQ           reduce using rule 60 (expr -> expr / expr .)
    AND             reduce using rule 60 (expr -> expr / expr .)
    OR              reduce using rule 60 (expr -> expr / expr .)
    ITERATIONS      reduce using rule 60 (expr -> expr / expr .)
    )               reduce using rule 60 (expr -> expr / expr .)
    ,               reduce using rule 60 (expr -> expr / expr .)
    TO              reduce using rule 60 (expr -> expr / expr .)
    {               reduce using rule 60 (expr -> expr / expr .)
    PUT             reduce using rule 60 (expr -> expr / expr .)
    RUN             reduce using rule 60 (expr -> expr / expr .)
    RESET           reduce using rule 60 (expr -> expr / expr .)
    LET             reduce using rule 60 (expr -> expr / expr .)
    BEHAVE          reduce using rule 60 (expr -> expr / expr .)
    AGENT           reduce using rule 60 (expr -> expr / expr .)
    ENV             reduce using rule 60 (expr -> expr / expr .)
    ID              reduce using rule 60 (expr -> expr / expr .)
    $end            reduce using rule 60 (expr -> expr / expr .)
    FIND            reduce using rule 60 (expr -> expr / expr .)
    RANDOM          reduce using rule 60 (expr -> expr / expr .)
    PICK            reduce using rule 60 (expr -> expr / expr .)
    STOP            reduce using rule 60 (expr -> expr / expr .)
    RESTART         reduce using rule 60 (expr -> expr / expr .)
    SELL            reduce using rule 60 (expr -> expr / expr .)
    TALK            reduce using rule 60 (expr -> expr / expr .)
    IN              reduce using rule 60 (expr -> expr / expr .)
    FOREACH         reduce using rule 60 (expr -> expr / expr .)
    REPEAT          reduce using rule 60 (expr -> expr / expr .)
    BUY             reduce using rule 60 (expr -> expr / expr .)
    MOVE            reduce using rule 60 (expr -> expr / expr .)
    }               reduce using rule 60 (expr -> expr / expr .)


state 137

    (61) expr -> expr * expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 61 (expr -> expr * expr .)
    /               reduce using rule 61 (expr -> expr * expr .)
    *               reduce using rule 61 (expr -> expr * expr .)
    -               reduce using rule 61 (expr -> expr * expr .)
    +               reduce using rule 61 (expr -> expr * expr .)
    GREATER         reduce using rule 61 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr * expr .)
    LESSEQ          reduce using rule 61 (expr -> expr * expr .)
    LESS            reduce using rule 61 (expr -> expr * expr .)
    EQEQ            reduce using rule 61 (expr -> expr * expr .)
    NOTEQ           reduce using rule 61 (expr -> expr * expr .)
    AND             reduce using rule 61 (expr -> expr * expr .)
    OR              reduce using rule 61 (expr -> expr * expr .)
    ITERATIONS      reduce using rule 61 (expr -> expr * expr .)
    )               reduce using rule 61 (expr -> expr * expr .)
    ,               reduce using rule 61 (expr -> expr * expr .)
    TO              reduce using rule 61 (expr -> expr * expr .)
    {               reduce using rule 61 (expr -> expr * expr .)
    PUT             reduce using rule 61 (expr -> expr * expr .)
    RUN             reduce using rule 61 (expr -> expr * expr .)
    RESET           reduce using rule 61 (expr -> expr * expr .)
    LET             reduce using rule 61 (expr -> expr * expr .)
    BEHAVE          reduce using rule 61 (expr -> expr * expr .)
    AGENT           reduce using rule 61 (expr -> expr * expr .)
    ENV             reduce using rule 61 (expr -> expr * expr .)
    ID              reduce using rule 61 (expr -> expr * expr .)
    $end            reduce using rule 61 (expr -> expr * expr .)
    FIND            reduce using rule 61 (expr -> expr * expr .)
    RANDOM          reduce using rule 61 (expr -> expr * expr .)
    PICK            reduce using rule 61 (expr -> expr * expr .)
    STOP            reduce using rule 61 (expr -> expr * expr .)
    RESTART         reduce using rule 61 (expr -> expr * expr .)
    SELL            reduce using rule 61 (expr -> expr * expr .)
    TALK            reduce using rule 61 (expr -> expr * expr .)
    IN              reduce using rule 61 (expr -> expr * expr .)
    FOREACH         reduce using rule 61 (expr -> expr * expr .)
    REPEAT          reduce using rule 61 (expr -> expr * expr .)
    BUY             reduce using rule 61 (expr -> expr * expr .)
    MOVE            reduce using rule 61 (expr -> expr * expr .)
    }               reduce using rule 61 (expr -> expr * expr .)


state 138

    (62) expr -> expr - expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 62 (expr -> expr - expr .)
    -               reduce using rule 62 (expr -> expr - expr .)
    +               reduce using rule 62 (expr -> expr - expr .)
    GREATER         reduce using rule 62 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr - expr .)
    LESSEQ          reduce using rule 62 (expr -> expr - expr .)
    LESS            reduce using rule 62 (expr -> expr - expr .)
    EQEQ            reduce using rule 62 (expr -> expr - expr .)
    NOTEQ           reduce using rule 62 (expr -> expr - expr .)
    AND             reduce using rule 62 (expr -> expr - expr .)
    OR              reduce using rule 62 (expr -> expr - expr .)
    ITERATIONS      reduce using rule 62 (expr -> expr - expr .)
    )               reduce using rule 62 (expr -> expr - expr .)
    ,               reduce using rule 62 (expr -> expr - expr .)
    TO              reduce using rule 62 (expr -> expr - expr .)
    {               reduce using rule 62 (expr -> expr - expr .)
    PUT             reduce using rule 62 (expr -> expr - expr .)
    RUN             reduce using rule 62 (expr -> expr - expr .)
    RESET           reduce using rule 62 (expr -> expr - expr .)
    LET             reduce using rule 62 (expr -> expr - expr .)
    BEHAVE          reduce using rule 62 (expr -> expr - expr .)
    AGENT           reduce using rule 62 (expr -> expr - expr .)
    ENV             reduce using rule 62 (expr -> expr - expr .)
    ID              reduce using rule 62 (expr -> expr - expr .)
    $end            reduce using rule 62 (expr -> expr - expr .)
    FIND            reduce using rule 62 (expr -> expr - expr .)
    RANDOM          reduce using rule 62 (expr -> expr - expr .)
    PICK            reduce using rule 62 (expr -> expr - expr .)
    STOP            reduce using rule 62 (expr -> expr - expr .)
    RESTART         reduce using rule 62 (expr -> expr - expr .)
    SELL            reduce using rule 62 (expr -> expr - expr .)
    TALK            reduce using rule 62 (expr -> expr - expr .)
    IN              reduce using rule 62 (expr -> expr - expr .)
    FOREACH         reduce using rule 62 (expr -> expr - expr .)
    REPEAT          reduce using rule 62 (expr -> expr - expr .)
    BUY             reduce using rule 62 (expr -> expr - expr .)
    MOVE            reduce using rule 62 (expr -> expr - expr .)
    }               reduce using rule 62 (expr -> expr - expr .)
    /               shift and go to state 69
    *               shift and go to state 70


state 139

    (63) expr -> expr + expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 63 (expr -> expr + expr .)
    -               reduce using rule 63 (expr -> expr + expr .)
    +               reduce using rule 63 (expr -> expr + expr .)
    GREATER         reduce using rule 63 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr + expr .)
    LESSEQ          reduce using rule 63 (expr -> expr + expr .)
    LESS            reduce using rule 63 (expr -> expr + expr .)
    EQEQ            reduce using rule 63 (expr -> expr + expr .)
    NOTEQ           reduce using rule 63 (expr -> expr + expr .)
    AND             reduce using rule 63 (expr -> expr + expr .)
    OR              reduce using rule 63 (expr -> expr + expr .)
    ITERATIONS      reduce using rule 63 (expr -> expr + expr .)
    )               reduce using rule 63 (expr -> expr + expr .)
    ,               reduce using rule 63 (expr -> expr + expr .)
    TO              reduce using rule 63 (expr -> expr + expr .)
    {               reduce using rule 63 (expr -> expr + expr .)
    PUT             reduce using rule 63 (expr -> expr + expr .)
    RUN             reduce using rule 63 (expr -> expr + expr .)
    RESET           reduce using rule 63 (expr -> expr + expr .)
    LET             reduce using rule 63 (expr -> expr + expr .)
    BEHAVE          reduce using rule 63 (expr -> expr + expr .)
    AGENT           reduce using rule 63 (expr -> expr + expr .)
    ENV             reduce using rule 63 (expr -> expr + expr .)
    ID              reduce using rule 63 (expr -> expr + expr .)
    $end            reduce using rule 63 (expr -> expr + expr .)
    FIND            reduce using rule 63 (expr -> expr + expr .)
    RANDOM          reduce using rule 63 (expr -> expr + expr .)
    PICK            reduce using rule 63 (expr -> expr + expr .)
    STOP            reduce using rule 63 (expr -> expr + expr .)
    RESTART         reduce using rule 63 (expr -> expr + expr .)
    SELL            reduce using rule 63 (expr -> expr + expr .)
    TALK            reduce using rule 63 (expr -> expr + expr .)
    IN              reduce using rule 63 (expr -> expr + expr .)
    FOREACH         reduce using rule 63 (expr -> expr + expr .)
    REPEAT          reduce using rule 63 (expr -> expr + expr .)
    BUY             reduce using rule 63 (expr -> expr + expr .)
    MOVE            reduce using rule 63 (expr -> expr + expr .)
    }               reduce using rule 63 (expr -> expr + expr .)
    /               shift and go to state 69
    *               shift and go to state 70


state 140

    (64) expr -> expr GREATER expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 64 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 64 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 64 (expr -> expr GREATER expr .)
    LESS            reduce using rule 64 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 64 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 64 (expr -> expr GREATER expr .)
    AND             reduce using rule 64 (expr -> expr GREATER expr .)
    OR              reduce using rule 64 (expr -> expr GREATER expr .)
    ITERATIONS      reduce using rule 64 (expr -> expr GREATER expr .)
    )               reduce using rule 64 (expr -> expr GREATER expr .)
    ,               reduce using rule 64 (expr -> expr GREATER expr .)
    TO              reduce using rule 64 (expr -> expr GREATER expr .)
    {               reduce using rule 64 (expr -> expr GREATER expr .)
    PUT             reduce using rule 64 (expr -> expr GREATER expr .)
    RUN             reduce using rule 64 (expr -> expr GREATER expr .)
    RESET           reduce using rule 64 (expr -> expr GREATER expr .)
    LET             reduce using rule 64 (expr -> expr GREATER expr .)
    BEHAVE          reduce using rule 64 (expr -> expr GREATER expr .)
    AGENT           reduce using rule 64 (expr -> expr GREATER expr .)
    ENV             reduce using rule 64 (expr -> expr GREATER expr .)
    ID              reduce using rule 64 (expr -> expr GREATER expr .)
    $end            reduce using rule 64 (expr -> expr GREATER expr .)
    FIND            reduce using rule 64 (expr -> expr GREATER expr .)
    RANDOM          reduce using rule 64 (expr -> expr GREATER expr .)
    PICK            reduce using rule 64 (expr -> expr GREATER expr .)
    STOP            reduce using rule 64 (expr -> expr GREATER expr .)
    RESTART         reduce using rule 64 (expr -> expr GREATER expr .)
    SELL            reduce using rule 64 (expr -> expr GREATER expr .)
    TALK            reduce using rule 64 (expr -> expr GREATER expr .)
    IN              reduce using rule 64 (expr -> expr GREATER expr .)
    FOREACH         reduce using rule 64 (expr -> expr GREATER expr .)
    REPEAT          reduce using rule 64 (expr -> expr GREATER expr .)
    BUY             reduce using rule 64 (expr -> expr GREATER expr .)
    MOVE            reduce using rule 64 (expr -> expr GREATER expr .)
    }               reduce using rule 64 (expr -> expr GREATER expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72


state 141

    (65) expr -> expr GREATEREQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 65 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 65 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 65 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 65 (expr -> expr GREATEREQ expr .)
    ITERATIONS      reduce using rule 65 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 65 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    PUT             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    RUN             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    RESET           reduce using rule 65 (expr -> expr GREATEREQ expr .)
    LET             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    BEHAVE          reduce using rule 65 (expr -> expr GREATEREQ expr .)
    AGENT           reduce using rule 65 (expr -> expr GREATEREQ expr .)
    ENV             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    ID              reduce using rule 65 (expr -> expr GREATEREQ expr .)
    $end            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    FIND            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    RANDOM          reduce using rule 65 (expr -> expr GREATEREQ expr .)
    PICK            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    STOP            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    RESTART         reduce using rule 65 (expr -> expr GREATEREQ expr .)
    SELL            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    TALK            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    IN              reduce using rule 65 (expr -> expr GREATEREQ expr .)
    FOREACH         reduce using rule 65 (expr -> expr GREATEREQ expr .)
    REPEAT          reduce using rule 65 (expr -> expr GREATEREQ expr .)
    BUY             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    MOVE            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    }               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72


state 142

    (66) expr -> expr LESSEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 66 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 66 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 66 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 66 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 66 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 66 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 66 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 66 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 66 (expr -> expr LESSEQ expr .)
    ITERATIONS      reduce using rule 66 (expr -> expr LESSEQ expr .)
    )               reduce using rule 66 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 66 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 66 (expr -> expr LESSEQ expr .)
    {               reduce using rule 66 (expr -> expr LESSEQ expr .)
    PUT             reduce using rule 66 (expr -> expr LESSEQ expr .)
    RUN             reduce using rule 66 (expr -> expr LESSEQ expr .)
    RESET           reduce using rule 66 (expr -> expr LESSEQ expr .)
    LET             reduce using rule 66 (expr -> expr LESSEQ expr .)
    BEHAVE          reduce using rule 66 (expr -> expr LESSEQ expr .)
    AGENT           reduce using rule 66 (expr -> expr LESSEQ expr .)
    ENV             reduce using rule 66 (expr -> expr LESSEQ expr .)
    ID              reduce using rule 66 (expr -> expr LESSEQ expr .)
    $end            reduce using rule 66 (expr -> expr LESSEQ expr .)
    FIND            reduce using rule 66 (expr -> expr LESSEQ expr .)
    RANDOM          reduce using rule 66 (expr -> expr LESSEQ expr .)
    PICK            reduce using rule 66 (expr -> expr LESSEQ expr .)
    STOP            reduce using rule 66 (expr -> expr LESSEQ expr .)
    RESTART         reduce using rule 66 (expr -> expr LESSEQ expr .)
    SELL            reduce using rule 66 (expr -> expr LESSEQ expr .)
    TALK            reduce using rule 66 (expr -> expr LESSEQ expr .)
    IN              reduce using rule 66 (expr -> expr LESSEQ expr .)
    FOREACH         reduce using rule 66 (expr -> expr LESSEQ expr .)
    REPEAT          reduce using rule 66 (expr -> expr LESSEQ expr .)
    BUY             reduce using rule 66 (expr -> expr LESSEQ expr .)
    MOVE            reduce using rule 66 (expr -> expr LESSEQ expr .)
    }               reduce using rule 66 (expr -> expr LESSEQ expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72


state 143

    (67) expr -> expr LESS expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 67 (expr -> expr LESS expr .)
    GREATER         reduce using rule 67 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 67 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 67 (expr -> expr LESS expr .)
    LESS            reduce using rule 67 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 67 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 67 (expr -> expr LESS expr .)
    AND             reduce using rule 67 (expr -> expr LESS expr .)
    OR              reduce using rule 67 (expr -> expr LESS expr .)
    ITERATIONS      reduce using rule 67 (expr -> expr LESS expr .)
    )               reduce using rule 67 (expr -> expr LESS expr .)
    ,               reduce using rule 67 (expr -> expr LESS expr .)
    TO              reduce using rule 67 (expr -> expr LESS expr .)
    {               reduce using rule 67 (expr -> expr LESS expr .)
    PUT             reduce using rule 67 (expr -> expr LESS expr .)
    RUN             reduce using rule 67 (expr -> expr LESS expr .)
    RESET           reduce using rule 67 (expr -> expr LESS expr .)
    LET             reduce using rule 67 (expr -> expr LESS expr .)
    BEHAVE          reduce using rule 67 (expr -> expr LESS expr .)
    AGENT           reduce using rule 67 (expr -> expr LESS expr .)
    ENV             reduce using rule 67 (expr -> expr LESS expr .)
    ID              reduce using rule 67 (expr -> expr LESS expr .)
    $end            reduce using rule 67 (expr -> expr LESS expr .)
    FIND            reduce using rule 67 (expr -> expr LESS expr .)
    RANDOM          reduce using rule 67 (expr -> expr LESS expr .)
    PICK            reduce using rule 67 (expr -> expr LESS expr .)
    STOP            reduce using rule 67 (expr -> expr LESS expr .)
    RESTART         reduce using rule 67 (expr -> expr LESS expr .)
    SELL            reduce using rule 67 (expr -> expr LESS expr .)
    TALK            reduce using rule 67 (expr -> expr LESS expr .)
    IN              reduce using rule 67 (expr -> expr LESS expr .)
    FOREACH         reduce using rule 67 (expr -> expr LESS expr .)
    REPEAT          reduce using rule 67 (expr -> expr LESS expr .)
    BUY             reduce using rule 67 (expr -> expr LESS expr .)
    MOVE            reduce using rule 67 (expr -> expr LESS expr .)
    }               reduce using rule 67 (expr -> expr LESS expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72


state 144

    (68) expr -> expr EQEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 68 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 68 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 68 (expr -> expr EQEQ expr .)
    AND             reduce using rule 68 (expr -> expr EQEQ expr .)
    OR              reduce using rule 68 (expr -> expr EQEQ expr .)
    ITERATIONS      reduce using rule 68 (expr -> expr EQEQ expr .)
    )               reduce using rule 68 (expr -> expr EQEQ expr .)
    ,               reduce using rule 68 (expr -> expr EQEQ expr .)
    TO              reduce using rule 68 (expr -> expr EQEQ expr .)
    {               reduce using rule 68 (expr -> expr EQEQ expr .)
    PUT             reduce using rule 68 (expr -> expr EQEQ expr .)
    RUN             reduce using rule 68 (expr -> expr EQEQ expr .)
    RESET           reduce using rule 68 (expr -> expr EQEQ expr .)
    LET             reduce using rule 68 (expr -> expr EQEQ expr .)
    BEHAVE          reduce using rule 68 (expr -> expr EQEQ expr .)
    AGENT           reduce using rule 68 (expr -> expr EQEQ expr .)
    ENV             reduce using rule 68 (expr -> expr EQEQ expr .)
    ID              reduce using rule 68 (expr -> expr EQEQ expr .)
    $end            reduce using rule 68 (expr -> expr EQEQ expr .)
    FIND            reduce using rule 68 (expr -> expr EQEQ expr .)
    RANDOM          reduce using rule 68 (expr -> expr EQEQ expr .)
    PICK            reduce using rule 68 (expr -> expr EQEQ expr .)
    STOP            reduce using rule 68 (expr -> expr EQEQ expr .)
    RESTART         reduce using rule 68 (expr -> expr EQEQ expr .)
    SELL            reduce using rule 68 (expr -> expr EQEQ expr .)
    TALK            reduce using rule 68 (expr -> expr EQEQ expr .)
    IN              reduce using rule 68 (expr -> expr EQEQ expr .)
    FOREACH         reduce using rule 68 (expr -> expr EQEQ expr .)
    REPEAT          reduce using rule 68 (expr -> expr EQEQ expr .)
    BUY             reduce using rule 68 (expr -> expr EQEQ expr .)
    MOVE            reduce using rule 68 (expr -> expr EQEQ expr .)
    }               reduce using rule 68 (expr -> expr EQEQ expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76


state 145

    (69) expr -> expr NOTEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 69 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 69 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 69 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 69 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 69 (expr -> expr NOTEQ expr .)
    ITERATIONS      reduce using rule 69 (expr -> expr NOTEQ expr .)
    )               reduce using rule 69 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 69 (expr -> expr NOTEQ expr .)
    TO              reduce using rule 69 (expr -> expr NOTEQ expr .)
    {               reduce using rule 69 (expr -> expr NOTEQ expr .)
    PUT             reduce using rule 69 (expr -> expr NOTEQ expr .)
    RUN             reduce using rule 69 (expr -> expr NOTEQ expr .)
    RESET           reduce using rule 69 (expr -> expr NOTEQ expr .)
    LET             reduce using rule 69 (expr -> expr NOTEQ expr .)
    BEHAVE          reduce using rule 69 (expr -> expr NOTEQ expr .)
    AGENT           reduce using rule 69 (expr -> expr NOTEQ expr .)
    ENV             reduce using rule 69 (expr -> expr NOTEQ expr .)
    ID              reduce using rule 69 (expr -> expr NOTEQ expr .)
    $end            reduce using rule 69 (expr -> expr NOTEQ expr .)
    FIND            reduce using rule 69 (expr -> expr NOTEQ expr .)
    RANDOM          reduce using rule 69 (expr -> expr NOTEQ expr .)
    PICK            reduce using rule 69 (expr -> expr NOTEQ expr .)
    STOP            reduce using rule 69 (expr -> expr NOTEQ expr .)
    RESTART         reduce using rule 69 (expr -> expr NOTEQ expr .)
    SELL            reduce using rule 69 (expr -> expr NOTEQ expr .)
    TALK            reduce using rule 69 (expr -> expr NOTEQ expr .)
    IN              reduce using rule 69 (expr -> expr NOTEQ expr .)
    FOREACH         reduce using rule 69 (expr -> expr NOTEQ expr .)
    REPEAT          reduce using rule 69 (expr -> expr NOTEQ expr .)
    BUY             reduce using rule 69 (expr -> expr NOTEQ expr .)
    MOVE            reduce using rule 69 (expr -> expr NOTEQ expr .)
    }               reduce using rule 69 (expr -> expr NOTEQ expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76


state 146

    (70) expr -> expr AND expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 70 (expr -> expr AND expr .)
    AND             reduce using rule 70 (expr -> expr AND expr .)
    OR              reduce using rule 70 (expr -> expr AND expr .)
    ITERATIONS      reduce using rule 70 (expr -> expr AND expr .)
    )               reduce using rule 70 (expr -> expr AND expr .)
    ,               reduce using rule 70 (expr -> expr AND expr .)
    TO              reduce using rule 70 (expr -> expr AND expr .)
    {               reduce using rule 70 (expr -> expr AND expr .)
    PUT             reduce using rule 70 (expr -> expr AND expr .)
    RUN             reduce using rule 70 (expr -> expr AND expr .)
    RESET           reduce using rule 70 (expr -> expr AND expr .)
    LET             reduce using rule 70 (expr -> expr AND expr .)
    BEHAVE          reduce using rule 70 (expr -> expr AND expr .)
    AGENT           reduce using rule 70 (expr -> expr AND expr .)
    ENV             reduce using rule 70 (expr -> expr AND expr .)
    ID              reduce using rule 70 (expr -> expr AND expr .)
    $end            reduce using rule 70 (expr -> expr AND expr .)
    FIND            reduce using rule 70 (expr -> expr AND expr .)
    RANDOM          reduce using rule 70 (expr -> expr AND expr .)
    PICK            reduce using rule 70 (expr -> expr AND expr .)
    STOP            reduce using rule 70 (expr -> expr AND expr .)
    RESTART         reduce using rule 70 (expr -> expr AND expr .)
    SELL            reduce using rule 70 (expr -> expr AND expr .)
    TALK            reduce using rule 70 (expr -> expr AND expr .)
    IN              reduce using rule 70 (expr -> expr AND expr .)
    FOREACH         reduce using rule 70 (expr -> expr AND expr .)
    REPEAT          reduce using rule 70 (expr -> expr AND expr .)
    BUY             reduce using rule 70 (expr -> expr AND expr .)
    MOVE            reduce using rule 70 (expr -> expr AND expr .)
    }               reduce using rule 70 (expr -> expr AND expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78


state 147

    (71) expr -> expr OR expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 71 (expr -> expr OR expr .)
    OR              reduce using rule 71 (expr -> expr OR expr .)
    ITERATIONS      reduce using rule 71 (expr -> expr OR expr .)
    )               reduce using rule 71 (expr -> expr OR expr .)
    ,               reduce using rule 71 (expr -> expr OR expr .)
    TO              reduce using rule 71 (expr -> expr OR expr .)
    {               reduce using rule 71 (expr -> expr OR expr .)
    PUT             reduce using rule 71 (expr -> expr OR expr .)
    RUN             reduce using rule 71 (expr -> expr OR expr .)
    RESET           reduce using rule 71 (expr -> expr OR expr .)
    LET             reduce using rule 71 (expr -> expr OR expr .)
    BEHAVE          reduce using rule 71 (expr -> expr OR expr .)
    AGENT           reduce using rule 71 (expr -> expr OR expr .)
    ENV             reduce using rule 71 (expr -> expr OR expr .)
    ID              reduce using rule 71 (expr -> expr OR expr .)
    $end            reduce using rule 71 (expr -> expr OR expr .)
    FIND            reduce using rule 71 (expr -> expr OR expr .)
    RANDOM          reduce using rule 71 (expr -> expr OR expr .)
    PICK            reduce using rule 71 (expr -> expr OR expr .)
    STOP            reduce using rule 71 (expr -> expr OR expr .)
    RESTART         reduce using rule 71 (expr -> expr OR expr .)
    SELL            reduce using rule 71 (expr -> expr OR expr .)
    TALK            reduce using rule 71 (expr -> expr OR expr .)
    IN              reduce using rule 71 (expr -> expr OR expr .)
    FOREACH         reduce using rule 71 (expr -> expr OR expr .)
    REPEAT          reduce using rule 71 (expr -> expr OR expr .)
    BUY             reduce using rule 71 (expr -> expr OR expr .)
    MOVE            reduce using rule 71 (expr -> expr OR expr .)
    }               reduce using rule 71 (expr -> expr OR expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79


state 148

    (84) primary -> ( expr ) .
    SEP             reduce using rule 84 (primary -> ( expr ) .)
    /               reduce using rule 84 (primary -> ( expr ) .)
    *               reduce using rule 84 (primary -> ( expr ) .)
    -               reduce using rule 84 (primary -> ( expr ) .)
    +               reduce using rule 84 (primary -> ( expr ) .)
    GREATER         reduce using rule 84 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 84 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 84 (primary -> ( expr ) .)
    LESS            reduce using rule 84 (primary -> ( expr ) .)
    EQEQ            reduce using rule 84 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 84 (primary -> ( expr ) .)
    AND             reduce using rule 84 (primary -> ( expr ) .)
    OR              reduce using rule 84 (primary -> ( expr ) .)
    ITERATIONS      reduce using rule 84 (primary -> ( expr ) .)
    )               reduce using rule 84 (primary -> ( expr ) .)
    ,               reduce using rule 84 (primary -> ( expr ) .)
    TO              reduce using rule 84 (primary -> ( expr ) .)
    {               reduce using rule 84 (primary -> ( expr ) .)
    PUT             reduce using rule 84 (primary -> ( expr ) .)
    RUN             reduce using rule 84 (primary -> ( expr ) .)
    RESET           reduce using rule 84 (primary -> ( expr ) .)
    LET             reduce using rule 84 (primary -> ( expr ) .)
    BEHAVE          reduce using rule 84 (primary -> ( expr ) .)
    AGENT           reduce using rule 84 (primary -> ( expr ) .)
    ENV             reduce using rule 84 (primary -> ( expr ) .)
    ID              reduce using rule 84 (primary -> ( expr ) .)
    $end            reduce using rule 84 (primary -> ( expr ) .)
    FIND            reduce using rule 84 (primary -> ( expr ) .)
    RANDOM          reduce using rule 84 (primary -> ( expr ) .)
    PICK            reduce using rule 84 (primary -> ( expr ) .)
    STOP            reduce using rule 84 (primary -> ( expr ) .)
    RESTART         reduce using rule 84 (primary -> ( expr ) .)
    SELL            reduce using rule 84 (primary -> ( expr ) .)
    TALK            reduce using rule 84 (primary -> ( expr ) .)
    IN              reduce using rule 84 (primary -> ( expr ) .)
    FOREACH         reduce using rule 84 (primary -> ( expr ) .)
    REPEAT          reduce using rule 84 (primary -> ( expr ) .)
    BUY             reduce using rule 84 (primary -> ( expr ) .)
    MOVE            reduce using rule 84 (primary -> ( expr ) .)
    }               reduce using rule 84 (primary -> ( expr ) .)


state 149

    (85) primary -> { bookItems } .
    SEP             reduce using rule 85 (primary -> { bookItems } .)
    /               reduce using rule 85 (primary -> { bookItems } .)
    *               reduce using rule 85 (primary -> { bookItems } .)
    -               reduce using rule 85 (primary -> { bookItems } .)
    +               reduce using rule 85 (primary -> { bookItems } .)
    GREATER         reduce using rule 85 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 85 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 85 (primary -> { bookItems } .)
    LESS            reduce using rule 85 (primary -> { bookItems } .)
    EQEQ            reduce using rule 85 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 85 (primary -> { bookItems } .)
    AND             reduce using rule 85 (primary -> { bookItems } .)
    OR              reduce using rule 85 (primary -> { bookItems } .)
    ITERATIONS      reduce using rule 85 (primary -> { bookItems } .)
    )               reduce using rule 85 (primary -> { bookItems } .)
    ,               reduce using rule 85 (primary -> { bookItems } .)
    TO              reduce using rule 85 (primary -> { bookItems } .)
    {               reduce using rule 85 (primary -> { bookItems } .)
    PUT             reduce using rule 85 (primary -> { bookItems } .)
    RUN             reduce using rule 85 (primary -> { bookItems } .)
    RESET           reduce using rule 85 (primary -> { bookItems } .)
    LET             reduce using rule 85 (primary -> { bookItems } .)
    BEHAVE          reduce using rule 85 (primary -> { bookItems } .)
    AGENT           reduce using rule 85 (primary -> { bookItems } .)
    ENV             reduce using rule 85 (primary -> { bookItems } .)
    ID              reduce using rule 85 (primary -> { bookItems } .)
    $end            reduce using rule 85 (primary -> { bookItems } .)
    FIND            reduce using rule 85 (primary -> { bookItems } .)
    RANDOM          reduce using rule 85 (primary -> { bookItems } .)
    PICK            reduce using rule 85 (primary -> { bookItems } .)
    STOP            reduce using rule 85 (primary -> { bookItems } .)
    RESTART         reduce using rule 85 (primary -> { bookItems } .)
    SELL            reduce using rule 85 (primary -> { bookItems } .)
    TALK            reduce using rule 85 (primary -> { bookItems } .)
    IN              reduce using rule 85 (primary -> { bookItems } .)
    FOREACH         reduce using rule 85 (primary -> { bookItems } .)
    REPEAT          reduce using rule 85 (primary -> { bookItems } .)
    BUY             reduce using rule 85 (primary -> { bookItems } .)
    MOVE            reduce using rule 85 (primary -> { bookItems } .)
    }               reduce using rule 85 (primary -> { bookItems } .)


state 150

    (94) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 184


state 151

    (86) primary -> [ listItems ] .
    SEP             reduce using rule 86 (primary -> [ listItems ] .)
    /               reduce using rule 86 (primary -> [ listItems ] .)
    *               reduce using rule 86 (primary -> [ listItems ] .)
    -               reduce using rule 86 (primary -> [ listItems ] .)
    +               reduce using rule 86 (primary -> [ listItems ] .)
    GREATER         reduce using rule 86 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 86 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 86 (primary -> [ listItems ] .)
    LESS            reduce using rule 86 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 86 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 86 (primary -> [ listItems ] .)
    AND             reduce using rule 86 (primary -> [ listItems ] .)
    OR              reduce using rule 86 (primary -> [ listItems ] .)
    ITERATIONS      reduce using rule 86 (primary -> [ listItems ] .)
    )               reduce using rule 86 (primary -> [ listItems ] .)
    ,               reduce using rule 86 (primary -> [ listItems ] .)
    TO              reduce using rule 86 (primary -> [ listItems ] .)
    {               reduce using rule 86 (primary -> [ listItems ] .)
    PUT             reduce using rule 86 (primary -> [ listItems ] .)
    RUN             reduce using rule 86 (primary -> [ listItems ] .)
    RESET           reduce using rule 86 (primary -> [ listItems ] .)
    LET             reduce using rule 86 (primary -> [ listItems ] .)
    BEHAVE          reduce using rule 86 (primary -> [ listItems ] .)
    AGENT           reduce using rule 86 (primary -> [ listItems ] .)
    ENV             reduce using rule 86 (primary -> [ listItems ] .)
    ID              reduce using rule 86 (primary -> [ listItems ] .)
    $end            reduce using rule 86 (primary -> [ listItems ] .)
    FIND            reduce using rule 86 (primary -> [ listItems ] .)
    RANDOM          reduce using rule 86 (primary -> [ listItems ] .)
    PICK            reduce using rule 86 (primary -> [ listItems ] .)
    STOP            reduce using rule 86 (primary -> [ listItems ] .)
    RESTART         reduce using rule 86 (primary -> [ listItems ] .)
    SELL            reduce using rule 86 (primary -> [ listItems ] .)
    TALK            reduce using rule 86 (primary -> [ listItems ] .)
    IN              reduce using rule 86 (primary -> [ listItems ] .)
    FOREACH         reduce using rule 86 (primary -> [ listItems ] .)
    REPEAT          reduce using rule 86 (primary -> [ listItems ] .)
    BUY             reduce using rule 86 (primary -> [ listItems ] .)
    MOVE            reduce using rule 86 (primary -> [ listItems ] .)
    }               reduce using rule 86 (primary -> [ listItems ] .)


state 152

    (92) listItems -> expr , . listItems
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    ]               reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 90
    listItems                      shift and go to state 185
    empty                          shift and go to state 89
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 153

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 186
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 154

    (14) varDecl -> LET ID : type SEP .
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RUN             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESET           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BEHAVE          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    AGENT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ENV             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FIND            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RANDOM          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TALK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 155

    (12) behaveDecl -> BEHAVE ID { behaveBody } .
    PUT             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RUN             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RESET           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    LET             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    BEHAVE          reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    AGENT           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ENV             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ID              reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    $end            reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)


state 156

    (26) statementList -> statement statementList .
    }               reduce using rule 26 (statementList -> statement statementList .)


state 157

    (39) primFuncStmt -> FIND PEERS .
    FIND            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    RANDOM          reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    PUT             reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    PICK            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    STOP            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    RESTART         reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    SELL            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    TALK            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    IN              reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    FOREACH         reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    REPEAT          reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    LET             reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    BUY             reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    MOVE            reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    ID              reduce using rule 39 (primFuncStmt -> FIND PEERS .)
    }               reduce using rule 39 (primFuncStmt -> FIND PEERS .)


state 158

    (40) primFuncStmt -> FIND OBJECTS .
    FIND            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    RANDOM          reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    PUT             reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    PICK            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    STOP            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    RESTART         reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    SELL            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    TALK            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    IN              reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    FOREACH         reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    REPEAT          reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    LET             reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    BUY             reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    MOVE            reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    ID              reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)
    }               reduce using rule 40 (primFuncStmt -> FIND OBJECTS .)


state 159

    (41) primFuncStmt -> RANDOM FROM . expr TO expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 187
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 160

    (42) primFuncStmt -> PUT expr . , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 188
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 161

    (43) primFuncStmt -> PICK expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 189
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 162

    (44) primFuncStmt -> STOP SEP .
    FIND            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    RANDOM          reduce using rule 44 (primFuncStmt -> STOP SEP .)
    PUT             reduce using rule 44 (primFuncStmt -> STOP SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> STOP SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    TALK            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    IN              reduce using rule 44 (primFuncStmt -> STOP SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> STOP SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> STOP SEP .)
    LET             reduce using rule 44 (primFuncStmt -> STOP SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> STOP SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> STOP SEP .)
    ID              reduce using rule 44 (primFuncStmt -> STOP SEP .)
    }               reduce using rule 44 (primFuncStmt -> STOP SEP .)


state 163

    (45) primFuncStmt -> RESTART BEHAVE .
    FIND            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    RANDOM          reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    PUT             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    PICK            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    STOP            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    RESTART         reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    SELL            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    TALK            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    IN              reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    FOREACH         reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    REPEAT          reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    LET             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    BUY             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    MOVE            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    ID              reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    }               reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)


state 164

    (46) primFuncStmt -> SELL expr . , expr , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 190
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 165

    (47) primFuncStmt -> buyStmt SEP .
    FIND            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    RANDOM          reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    PUT             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    TALK            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    ID              reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 47 (primFuncStmt -> buyStmt SEP .)


state 166

    (48) primFuncStmt -> moveStmt SEP .
    FIND            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    RANDOM          reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    PUT             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    TALK            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    ID              reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 48 (primFuncStmt -> moveStmt SEP .)


state 167

    (49) primFuncStmt -> TALK expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 191
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 168

    (35) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 192
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 169

    (34) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 193


state 170

    (33) repeatStmt -> REPEAT WHEN . expr { statementList }
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 194
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 171

    (55) buyStmt -> BUY expr . SEP
    (56) buyStmt -> BUY expr . , expr , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 195
    ,               shift and go to state 196
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 172

    (50) moveStmt -> MOVE RIGHT . SEP
    SEP             shift and go to state 197


state 173

    (54) moveStmt -> MOVE SEP . expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 198
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 174

    (51) moveStmt -> MOVE LEFT . SEP
    SEP             shift and go to state 199


state 175

    (52) moveStmt -> MOVE DOWN . SEP
    SEP             shift and go to state 200


state 176

    (53) moveStmt -> MOVE UP . SEP
    SEP             shift and go to state 201


state 177

    (11) agentDecl -> AGENT ID { agentBody } .
    PUT             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RUN             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RESET           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    LET             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    BEHAVE          reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    AGENT           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ENV             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ID              reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    $end            reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)


state 178

    (23) varList -> varAssign varList .
    }               reduce using rule 23 (varList -> varAssign varList .)


state 179

    (24) varList -> varDecl varList .
    }               reduce using rule 24 (varList -> varDecl varList .)


state 180

    (10) envDecl -> ENV ID { envBody } .
    PUT             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RUN             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RESET           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    LET             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    BEHAVE          reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    AGENT           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ENV             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ID              reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    $end            reduce using rule 10 (envDecl -> ENV ID { envBody } .)


state 181

    (16) envFunc -> PUT ID IN ID AT expr . , expr
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 202
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 182

    (82) listFunc -> PUSH ( expr ) .
    .               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ASSIGN          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    SEP             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    /               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    *               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    -               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    +               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    GREATER         reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    GREATEREQ       reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    LESSEQ          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    LESS            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    EQEQ            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    NOTEQ           reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    AND             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    OR              reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ITERATIONS      reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    )               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ,               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    TO              reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    {               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    PUT             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    RUN             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    RESET           reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    LET             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    BEHAVE          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    AGENT           reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ENV             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ID              reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    $end            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    FIND            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    RANDOM          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    PICK            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    STOP            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    RESTART         reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    SELL            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    TALK            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    IN              reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    FOREACH         reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    REPEAT          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    BUY             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    MOVE            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    }               reduce using rule 82 (listFunc -> PUSH ( expr ) .)


state 183

    (83) listFunc -> GET ( expr ) .
    .               reduce using rule 83 (listFunc -> GET ( expr ) .)
    ASSIGN          reduce using rule 83 (listFunc -> GET ( expr ) .)
    SEP             reduce using rule 83 (listFunc -> GET ( expr ) .)
    /               reduce using rule 83 (listFunc -> GET ( expr ) .)
    *               reduce using rule 83 (listFunc -> GET ( expr ) .)
    -               reduce using rule 83 (listFunc -> GET ( expr ) .)
    +               reduce using rule 83 (listFunc -> GET ( expr ) .)
    GREATER         reduce using rule 83 (listFunc -> GET ( expr ) .)
    GREATEREQ       reduce using rule 83 (listFunc -> GET ( expr ) .)
    LESSEQ          reduce using rule 83 (listFunc -> GET ( expr ) .)
    LESS            reduce using rule 83 (listFunc -> GET ( expr ) .)
    EQEQ            reduce using rule 83 (listFunc -> GET ( expr ) .)
    NOTEQ           reduce using rule 83 (listFunc -> GET ( expr ) .)
    AND             reduce using rule 83 (listFunc -> GET ( expr ) .)
    OR              reduce using rule 83 (listFunc -> GET ( expr ) .)
    ITERATIONS      reduce using rule 83 (listFunc -> GET ( expr ) .)
    )               reduce using rule 83 (listFunc -> GET ( expr ) .)
    ,               reduce using rule 83 (listFunc -> GET ( expr ) .)
    TO              reduce using rule 83 (listFunc -> GET ( expr ) .)
    {               reduce using rule 83 (listFunc -> GET ( expr ) .)
    PUT             reduce using rule 83 (listFunc -> GET ( expr ) .)
    RUN             reduce using rule 83 (listFunc -> GET ( expr ) .)
    RESET           reduce using rule 83 (listFunc -> GET ( expr ) .)
    LET             reduce using rule 83 (listFunc -> GET ( expr ) .)
    BEHAVE          reduce using rule 83 (listFunc -> GET ( expr ) .)
    AGENT           reduce using rule 83 (listFunc -> GET ( expr ) .)
    ENV             reduce using rule 83 (listFunc -> GET ( expr ) .)
    ID              reduce using rule 83 (listFunc -> GET ( expr ) .)
    $end            reduce using rule 83 (listFunc -> GET ( expr ) .)
    FIND            reduce using rule 83 (listFunc -> GET ( expr ) .)
    RANDOM          reduce using rule 83 (listFunc -> GET ( expr ) .)
    PICK            reduce using rule 83 (listFunc -> GET ( expr ) .)
    STOP            reduce using rule 83 (listFunc -> GET ( expr ) .)
    RESTART         reduce using rule 83 (listFunc -> GET ( expr ) .)
    SELL            reduce using rule 83 (listFunc -> GET ( expr ) .)
    TALK            reduce using rule 83 (listFunc -> GET ( expr ) .)
    IN              reduce using rule 83 (listFunc -> GET ( expr ) .)
    FOREACH         reduce using rule 83 (listFunc -> GET ( expr ) .)
    REPEAT          reduce using rule 83 (listFunc -> GET ( expr ) .)
    BUY             reduce using rule 83 (listFunc -> GET ( expr ) .)
    MOVE            reduce using rule 83 (listFunc -> GET ( expr ) .)
    }               reduce using rule 83 (listFunc -> GET ( expr ) .)


state 184

    (94) bookItems -> STRING : ( . listItems ) , bookItems
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    )               reduce using rule 100 (empty -> .)
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    listItems                      shift and go to state 203
    empty                          shift and go to state 89
    expr                           shift and go to state 90
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 185

    (92) listItems -> expr , listItems .
    ]               reduce using rule 92 (listItems -> expr , listItems .)
    )               reduce using rule 92 (listItems -> expr , listItems .)


state 186

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 204
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 187

    (41) primFuncStmt -> RANDOM FROM expr . TO expr
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    TO              shift and go to state 205
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 188

    (42) primFuncStmt -> PUT expr , . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 206
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 189

    (43) primFuncStmt -> PICK expr SEP .
    FIND            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    RANDOM          reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    PUT             reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    PICK            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    STOP            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    RESTART         reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    SELL            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    TALK            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    IN              reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    FOREACH         reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    REPEAT          reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    LET             reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    BUY             reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    MOVE            reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    ID              reduce using rule 43 (primFuncStmt -> PICK expr SEP .)
    }               reduce using rule 43 (primFuncStmt -> PICK expr SEP .)


state 190

    (46) primFuncStmt -> SELL expr , . expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 207
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 191

    (49) primFuncStmt -> TALK expr SEP .
    FIND            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    RANDOM          reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    PUT             reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    PICK            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    STOP            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    RESTART         reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    SELL            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    TALK            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    IN              reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    FOREACH         reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    REPEAT          reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    LET             reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    BUY             reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    MOVE            reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    ID              reduce using rule 49 (primFuncStmt -> TALK expr SEP .)
    }               reduce using rule 49 (primFuncStmt -> TALK expr SEP .)


state 192

    (35) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 208
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 193

    (34) foreachStmt -> FOREACH ID IN . expr { statementList }
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 209
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 194

    (33) repeatStmt -> REPEAT WHEN expr . { statementList }
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 210
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 195

    (55) buyStmt -> BUY expr SEP .
    SEP             reduce using rule 55 (buyStmt -> BUY expr SEP .)


state 196

    (56) buyStmt -> BUY expr , . expr , expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 211
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 197

    (50) moveStmt -> MOVE RIGHT SEP .
    SEP             reduce using rule 50 (moveStmt -> MOVE RIGHT SEP .)


state 198

    (54) moveStmt -> MOVE SEP expr . , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 212
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 199

    (51) moveStmt -> MOVE LEFT SEP .
    SEP             reduce using rule 51 (moveStmt -> MOVE LEFT SEP .)


state 200

    (52) moveStmt -> MOVE DOWN SEP .
    SEP             reduce using rule 52 (moveStmt -> MOVE DOWN SEP .)


state 201

    (53) moveStmt -> MOVE UP SEP .
    SEP             reduce using rule 53 (moveStmt -> MOVE UP SEP .)


state 202

    (16) envFunc -> PUT ID IN ID AT expr , . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 213
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 203

    (94) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 214


state 204

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RUN             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESET           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BEHAVE          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    AGENT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ENV             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FIND            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RANDOM          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TALK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 205

    (41) primFuncStmt -> RANDOM FROM expr TO . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 215
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 206

    (42) primFuncStmt -> PUT expr , expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 216
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 207

    (46) primFuncStmt -> SELL expr , expr . , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 217
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 208

    (35) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statementList                  shift and go to state 218
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 209

    (34) foreachStmt -> FOREACH ID IN expr . { statementList }
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 219
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 210

    (33) repeatStmt -> REPEAT WHEN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statementList                  shift and go to state 220
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 211

    (56) buyStmt -> BUY expr , expr . , expr SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 221
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 212

    (54) moveStmt -> MOVE SEP expr , . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 222
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 213

    (16) envFunc -> PUT ID IN ID AT expr , expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    PUT             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    RUN             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    RESET           reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    LET             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    BEHAVE          reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    AGENT           reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    ENV             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    ID              reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    $end            reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 214

    (94) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 223


state 215

    (41) primFuncStmt -> RANDOM FROM expr TO expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    FIND            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    RANDOM          reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    PUT             reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    PICK            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    STOP            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    RESTART         reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    SELL            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    TALK            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    IN              reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    FOREACH         reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    REPEAT          reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    LET             reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    BUY             reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    MOVE            reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    ID              reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    }               reduce using rule 41 (primFuncStmt -> RANDOM FROM expr TO expr .)
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 216

    (42) primFuncStmt -> PUT expr , expr SEP .
    FIND            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    RANDOM          reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    PUT             reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    TALK            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    IN              reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    LET             reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    ID              reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)
    }               reduce using rule 42 (primFuncStmt -> PUT expr , expr SEP .)


state 217

    (46) primFuncStmt -> SELL expr , expr , . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 224
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 218

    (35) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 225


state 219

    (34) foreachStmt -> FOREACH ID IN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statementList                  shift and go to state 226
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 220

    (33) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 227


state 221

    (56) buyStmt -> BUY expr , expr , . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 228
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 222

    (54) moveStmt -> MOVE SEP expr , expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 229
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 223

    (94) bookItems -> STRING : ( listItems ) , . bookItems
    (93) bookItems -> . empty
    (94) bookItems -> . STRING : ( listItems ) , bookItems
    (100) empty -> .
    STRING          shift and go to state 87
    }               reduce using rule 100 (empty -> .)

    bookItems                      shift and go to state 230
    empty                          shift and go to state 86

state 224

    (46) primFuncStmt -> SELL expr , expr , expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 231
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 225

    (35) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (100) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 235
    IN              shift and go to state 232
    FIND            reduce using rule 100 (empty -> .)
    RANDOM          reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    TALK            reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    inothercaseStmt                shift and go to state 233
    empty                          shift and go to state 234

state 226

    (34) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 236


state 227

    (33) repeatStmt -> REPEAT WHEN expr { statementList } .
    FIND            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RANDOM          reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PUT             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TALK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    ID              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 228

    (56) buyStmt -> BUY expr , expr , expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 237
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 229

    (54) moveStmt -> MOVE SEP expr , expr SEP .
    SEP             reduce using rule 54 (moveStmt -> MOVE SEP expr , expr SEP .)


state 230

    (94) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 94 (bookItems -> STRING : ( listItems ) , bookItems .)


state 231

    (46) primFuncStmt -> SELL expr , expr , expr SEP .
    FIND            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RANDOM          reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PUT             reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TALK            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    IN              reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    LET             reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    ID              reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)
    }               reduce using rule 46 (primFuncStmt -> SELL expr , expr , expr SEP .)


state 232

    (38) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 238


state 233

    (35) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    FIND            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PUT             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 234

    (36) inothercaseStmt -> empty .
    FIND            reduce using rule 36 (inothercaseStmt -> empty .)
    RANDOM          reduce using rule 36 (inothercaseStmt -> empty .)
    PUT             reduce using rule 36 (inothercaseStmt -> empty .)
    PICK            reduce using rule 36 (inothercaseStmt -> empty .)
    STOP            reduce using rule 36 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 36 (inothercaseStmt -> empty .)
    SELL            reduce using rule 36 (inothercaseStmt -> empty .)
    TALK            reduce using rule 36 (inothercaseStmt -> empty .)
    IN              reduce using rule 36 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 36 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 36 (inothercaseStmt -> empty .)
    LET             reduce using rule 36 (inothercaseStmt -> empty .)
    BUY             reduce using rule 36 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 36 (inothercaseStmt -> empty .)
    ID              reduce using rule 36 (inothercaseStmt -> empty .)
    }               reduce using rule 36 (inothercaseStmt -> empty .)


state 235

    (37) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 239


state 236

    (34) foreachStmt -> FOREACH ID IN expr { statementList } .
    FIND            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RANDOM          reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PUT             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TALK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    ID              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 237

    (56) buyStmt -> BUY expr , expr , expr SEP .
    SEP             reduce using rule 56 (buyStmt -> BUY expr , expr , expr SEP .)


state 238

    (38) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 240


state 239

    (37) inothercaseStmt -> OTHERWISE { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statementList                  shift and go to state 241
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 240

    (38) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 44
    !               shift and go to state 45
    ID              shift and go to state 46
    (               shift and go to state 48
    {               shift and go to state 49
    [               shift and go to state 50
    STRING          shift and go to state 51
    NUMBER          shift and go to state 52
    FALSE           shift and go to state 53
    TRUE            shift and go to state 54

    expr                           shift and go to state 242
    call                           shift and go to state 43
    primary                        shift and go to state 47

state 241

    (37) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 243


state 242

    (38) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 244
    /               shift and go to state 69
    *               shift and go to state 70
    -               shift and go to state 71
    +               shift and go to state 72
    GREATER         shift and go to state 73
    GREATEREQ       shift and go to state 74
    LESSEQ          shift and go to state 75
    LESS            shift and go to state 76
    EQEQ            shift and go to state 77
    NOTEQ           shift and go to state 78
    AND             shift and go to state 79
    OR              shift and go to state 80


state 243

    (37) inothercaseStmt -> OTHERWISE { statementList } .
    FIND            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    RANDOM          reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PUT             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    TALK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    ID              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)


state 244

    (38) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . FIND PEERS
    (40) primFuncStmt -> . FIND OBJECTS
    (41) primFuncStmt -> . RANDOM FROM expr TO expr
    (42) primFuncStmt -> . PUT expr , expr SEP
    (43) primFuncStmt -> . PICK expr SEP
    (44) primFuncStmt -> . STOP SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL expr , expr , expr SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY expr SEP
    (56) buyStmt -> . BUY expr , expr , expr SEP
    (50) moveStmt -> . MOVE RIGHT SEP
    (51) moveStmt -> . MOVE LEFT SEP
    (52) moveStmt -> . MOVE DOWN SEP
    (53) moveStmt -> . MOVE UP SEP
    (54) moveStmt -> . MOVE SEP expr , expr SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    FIND            shift and go to state 107
    RANDOM          shift and go to state 108
    PUT             shift and go to state 109
    PICK            shift and go to state 110
    STOP            shift and go to state 111
    RESTART         shift and go to state 112
    SELL            shift and go to state 113
    TALK            shift and go to state 116
    IN              shift and go to state 117
    FOREACH         shift and go to state 118
    REPEAT          shift and go to state 119
    LET             shift and go to state 16
    BUY             shift and go to state 120
    MOVE            shift and go to state 121
    ID              shift and go to state 12

    statementList                  shift and go to state 245
    empty                          shift and go to state 99
    statement                      shift and go to state 100
    primFuncStmt                   shift and go to state 101
    incaseStmt                     shift and go to state 102
    foreachStmt                    shift and go to state 103
    repeatStmt                     shift and go to state 104
    varAssign                      shift and go to state 105
    varDecl                        shift and go to state 106
    buyStmt                        shift and go to state 114
    moveStmt                       shift and go to state 115
    getter                         shift and go to state 15

state 245

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 246


state 246

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (100) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 235
    IN              shift and go to state 232
    FIND            reduce using rule 100 (empty -> .)
    RANDOM          reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    TALK            reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    inothercaseStmt                shift and go to state 247
    empty                          shift and go to state 234

state 247

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    FIND            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PUT             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for IN in state 225 resolved as shift
shift/reduce conflict for IN in state 246 resolved as shift