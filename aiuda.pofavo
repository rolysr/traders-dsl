Grammar:

Rule 0     S' -> statementList
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> PUT ID IN ID AT expr , expr SEP
Rule 17    envFunc -> RUN ID WITH expr ITERATIONS SEP
Rule 18    envFunc -> RESET ID SEP
Rule 19    envBody -> varList
Rule 20    agentBody -> varList
Rule 21    behaveBody -> statementList
Rule 22    varList -> empty
Rule 23    varList -> varAssign varList
Rule 24    varList -> varDecl varList
Rule 25    statementList -> empty
Rule 26    statementList -> statement statementList
Rule 27    statement -> primFuncStmt
Rule 28    statement -> incaseStmt
Rule 29    statement -> foreachStmt
Rule 30    statement -> repeatStmt
Rule 31    statement -> varAssign
Rule 32    statement -> varDecl
Rule 33    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 34    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 35    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 36    inothercaseStmt -> empty
Rule 37    inothercaseStmt -> OTHERWISE { statementList }
Rule 38    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 39    primFuncStmt -> getter . listVoidFunc SEP
Rule 40    primFuncStmt -> PUT expr , expr SEP
Rule 41    primFuncStmt -> PICK expr SEP
Rule 42    primFuncStmt -> STOP SEP
Rule 43    primFuncStmt -> RESTART BEHAVE
Rule 44    primFuncStmt -> SELL expr , expr , expr SEP
Rule 45    primFuncStmt -> buyStmt SEP
Rule 46    primFuncStmt -> moveStmt SEP
Rule 47    primFuncStmt -> TALK expr SEP
Rule 48    listVoidFunc -> REVERSE
Rule 49    listVoidFunc -> POP
Rule 50    listVoidFunc -> PUSH expr
Rule 51    moveStmt -> MOVE RIGHT SEP
Rule 52    moveStmt -> MOVE LEFT SEP
Rule 53    moveStmt -> MOVE DOWN SEP
Rule 54    moveStmt -> MOVE UP SEP
Rule 55    moveStmt -> MOVE SEP expr , expr SEP
Rule 56    buyStmt -> BUY expr SEP
Rule 57    buyStmt -> BUY expr , expr , expr SEP
Rule 58    expr -> call
Rule 59    expr -> - expr  [precedence=right, level=9]
Rule 60    expr -> ! expr  [precedence=right, level=10]
Rule 61    expr -> expr / expr  [precedence=left, level=8]
Rule 62    expr -> expr * expr  [precedence=left, level=8]
Rule 63    expr -> expr - expr  [precedence=left, level=7]
Rule 64    expr -> expr + expr  [precedence=left, level=7]
Rule 65    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 66    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 67    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 68    expr -> expr LESS expr  [precedence=left, level=5]
Rule 69    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 70    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 71    expr -> expr AND expr  [precedence=left, level=3]
Rule 72    expr -> expr OR expr  [precedence=left, level=2]
Rule 73    call -> ID dotTail
Rule 74    call -> primitiveValue
Rule 75    call -> primary
Rule 76    getter -> ID dotTail
Rule 77    dotTail -> empty
Rule 78    dotTail -> . idTail dotTail
Rule 79    idTail -> listValueFunc
Rule 80    idTail -> ID
Rule 81    listValueFunc -> SIZE
Rule 82    listValueFunc -> GET expr
Rule 83    primitiveValue -> FIND PEERS
Rule 84    primitiveValue -> FIND OBJECTS
Rule 85    primitiveValue -> RANDOM FROM expr TO expr
Rule 86    primary -> ( expr )
Rule 87    primary -> { bookItems }
Rule 88    primary -> [ listItems ]
Rule 89    primary -> STRING
Rule 90    primary -> NUMBER
Rule 91    primary -> FALSE
Rule 92    primary -> TRUE
Rule 93    listItems -> empty
Rule 94    listItems -> expr , listItems
Rule 95    bookItems -> empty
Rule 96    bookItems -> STRING : ( listItems ) , bookItems
Rule 97    type -> BOOK_TYPE
Rule 98    type -> LIST_TYPE
Rule 99    type -> STRING_TYPE
Rule 100   type -> BOOL_TYPE
Rule 101   type -> NUMBER_TYPE
Rule 102   empty -> <empty>

Unused terminals:

    ORASGN
    STARASGN
    SHR
    SHRASGN
    PLUSASGN
    MINUSASGN
    SHL
    INC
    XORASGN
    SHLASGN
    DEC
    SLASHASGN
    ANDASGN
    MODULOASGN

Terminals, with rules where they appear:

!                    : 60
(                    : 86 96
)                    : 86 96
*                    : 62
+                    : 64
,                    : 16 40 44 44 55 57 57 94 96
-                    : 59 63
.                    : 39 78
/                    : 61
:                    : 13 14 96
AGENT                : 11
AND                  : 71
ANDASGN              : 
ASSIGN               : 13 15
AT                   : 16
BEHAVE               : 12 43
BOOK_TYPE            : 97
BOOL_TYPE            : 100
BUY                  : 56 57
CASE                 : 35 38
DEC                  : 
DOWN                 : 53
ENV                  : 10
EQEQ                 : 69
FALSE                : 91
FIND                 : 83 84
FOREACH              : 34
FROM                 : 85
GET                  : 82
GREATER              : 65
GREATEREQ            : 66
ID                   : 10 11 12 13 14 16 16 17 18 34 73 76 80
IN                   : 16 34 35 38
INC                  : 
ITERATIONS           : 17
LEFT                 : 52
LESS                 : 68
LESSEQ               : 67
LET                  : 13 14
LIST_TYPE            : 98
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 51 52 53 54 55
NOTEQ                : 70
NUMBER               : 90
NUMBER_TYPE          : 101
OBJECTS              : 84
OR                   : 72
ORASGN               : 
OTHER                : 38
OTHERWISE            : 37
PEERS                : 83
PICK                 : 41
PLUSASGN             : 
POP                  : 49
PUSH                 : 50
PUT                  : 16 40
RANDOM               : 85
REPEAT               : 33
RESET                : 18
RESTART              : 43
REVERSE              : 48
RIGHT                : 51
RUN                  : 17
SELL                 : 44
SEP                  : 13 14 15 16 17 18 39 40 41 42 44 45 46 47 51 52 53 54 55 55 56 57
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 81
SLASHASGN            : 
STARASGN             : 
STOP                 : 42
STRING               : 89 96
STRING_TYPE          : 99
TALK                 : 47
TO                   : 85
TRUE                 : 92
UP                   : 54
WHEN                 : 33
WITH                 : 17
XORASGN              : 
[                    : 88
]                    : 88
error                : 
{                    : 10 11 12 33 34 35 37 38 87
}                    : 10 11 12 33 34 35 37 38 87

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 87 96
buyStmt              : 45
call                 : 58
declaration          : 3
declarationList      : 1 3
dotTail              : 73 76 78
empty                : 2 22 25 36 77 93 95
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 17 33 34 35 38 40 40 41 44 44 44 47 50 55 55 56 57 57 57 59 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 82 85 85 86 94
foreachStmt          : 29
getter               : 15 39
idTail               : 78
incaseStmt           : 28
inothercaseStmt      : 35 38
listItems            : 88 94 96
listValueFunc        : 79
listVoidFunc         : 39
moveStmt             : 46
primFuncStmt         : 27
primary              : 75
primitiveValue       : 74
program              : 
repeatStmt           : 30
statement            : 26
statementList        : 21 26 33 34 35 37 38 0
type                 : 13 14
varAssign            : 5 23 31
varDecl              : 6 24 32
varList              : 19 20 23 24


state 0

    (0) S' -> . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    $end            reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 1
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 1

    (0) S' -> statementList .


state 2

    (25) statementList -> empty .
    $end            reduce using rule 25 (statementList -> empty .)
    }               reduce using rule 25 (statementList -> empty .)


state 3

    (26) statementList -> statement . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    $end            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statement                      shift and go to state 3
    statementList                  shift and go to state 26
    empty                          shift and go to state 2
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 4

    (27) statement -> primFuncStmt .
    PUT             reduce using rule 27 (statement -> primFuncStmt .)
    PICK            reduce using rule 27 (statement -> primFuncStmt .)
    STOP            reduce using rule 27 (statement -> primFuncStmt .)
    RESTART         reduce using rule 27 (statement -> primFuncStmt .)
    SELL            reduce using rule 27 (statement -> primFuncStmt .)
    TALK            reduce using rule 27 (statement -> primFuncStmt .)
    IN              reduce using rule 27 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 27 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 27 (statement -> primFuncStmt .)
    LET             reduce using rule 27 (statement -> primFuncStmt .)
    ID              reduce using rule 27 (statement -> primFuncStmt .)
    BUY             reduce using rule 27 (statement -> primFuncStmt .)
    MOVE            reduce using rule 27 (statement -> primFuncStmt .)
    $end            reduce using rule 27 (statement -> primFuncStmt .)
    }               reduce using rule 27 (statement -> primFuncStmt .)


state 5

    (28) statement -> incaseStmt .
    PUT             reduce using rule 28 (statement -> incaseStmt .)
    PICK            reduce using rule 28 (statement -> incaseStmt .)
    STOP            reduce using rule 28 (statement -> incaseStmt .)
    RESTART         reduce using rule 28 (statement -> incaseStmt .)
    SELL            reduce using rule 28 (statement -> incaseStmt .)
    TALK            reduce using rule 28 (statement -> incaseStmt .)
    IN              reduce using rule 28 (statement -> incaseStmt .)
    FOREACH         reduce using rule 28 (statement -> incaseStmt .)
    REPEAT          reduce using rule 28 (statement -> incaseStmt .)
    LET             reduce using rule 28 (statement -> incaseStmt .)
    ID              reduce using rule 28 (statement -> incaseStmt .)
    BUY             reduce using rule 28 (statement -> incaseStmt .)
    MOVE            reduce using rule 28 (statement -> incaseStmt .)
    $end            reduce using rule 28 (statement -> incaseStmt .)
    }               reduce using rule 28 (statement -> incaseStmt .)


state 6

    (29) statement -> foreachStmt .
    PUT             reduce using rule 29 (statement -> foreachStmt .)
    PICK            reduce using rule 29 (statement -> foreachStmt .)
    STOP            reduce using rule 29 (statement -> foreachStmt .)
    RESTART         reduce using rule 29 (statement -> foreachStmt .)
    SELL            reduce using rule 29 (statement -> foreachStmt .)
    TALK            reduce using rule 29 (statement -> foreachStmt .)
    IN              reduce using rule 29 (statement -> foreachStmt .)
    FOREACH         reduce using rule 29 (statement -> foreachStmt .)
    REPEAT          reduce using rule 29 (statement -> foreachStmt .)
    LET             reduce using rule 29 (statement -> foreachStmt .)
    ID              reduce using rule 29 (statement -> foreachStmt .)
    BUY             reduce using rule 29 (statement -> foreachStmt .)
    MOVE            reduce using rule 29 (statement -> foreachStmt .)
    $end            reduce using rule 29 (statement -> foreachStmt .)
    }               reduce using rule 29 (statement -> foreachStmt .)


state 7

    (30) statement -> repeatStmt .
    PUT             reduce using rule 30 (statement -> repeatStmt .)
    PICK            reduce using rule 30 (statement -> repeatStmt .)
    STOP            reduce using rule 30 (statement -> repeatStmt .)
    RESTART         reduce using rule 30 (statement -> repeatStmt .)
    SELL            reduce using rule 30 (statement -> repeatStmt .)
    TALK            reduce using rule 30 (statement -> repeatStmt .)
    IN              reduce using rule 30 (statement -> repeatStmt .)
    FOREACH         reduce using rule 30 (statement -> repeatStmt .)
    REPEAT          reduce using rule 30 (statement -> repeatStmt .)
    LET             reduce using rule 30 (statement -> repeatStmt .)
    ID              reduce using rule 30 (statement -> repeatStmt .)
    BUY             reduce using rule 30 (statement -> repeatStmt .)
    MOVE            reduce using rule 30 (statement -> repeatStmt .)
    $end            reduce using rule 30 (statement -> repeatStmt .)
    }               reduce using rule 30 (statement -> repeatStmt .)


state 8

    (31) statement -> varAssign .
    PUT             reduce using rule 31 (statement -> varAssign .)
    PICK            reduce using rule 31 (statement -> varAssign .)
    STOP            reduce using rule 31 (statement -> varAssign .)
    RESTART         reduce using rule 31 (statement -> varAssign .)
    SELL            reduce using rule 31 (statement -> varAssign .)
    TALK            reduce using rule 31 (statement -> varAssign .)
    IN              reduce using rule 31 (statement -> varAssign .)
    FOREACH         reduce using rule 31 (statement -> varAssign .)
    REPEAT          reduce using rule 31 (statement -> varAssign .)
    LET             reduce using rule 31 (statement -> varAssign .)
    ID              reduce using rule 31 (statement -> varAssign .)
    BUY             reduce using rule 31 (statement -> varAssign .)
    MOVE            reduce using rule 31 (statement -> varAssign .)
    $end            reduce using rule 31 (statement -> varAssign .)
    }               reduce using rule 31 (statement -> varAssign .)


state 9

    (32) statement -> varDecl .
    PUT             reduce using rule 32 (statement -> varDecl .)
    PICK            reduce using rule 32 (statement -> varDecl .)
    STOP            reduce using rule 32 (statement -> varDecl .)
    RESTART         reduce using rule 32 (statement -> varDecl .)
    SELL            reduce using rule 32 (statement -> varDecl .)
    TALK            reduce using rule 32 (statement -> varDecl .)
    IN              reduce using rule 32 (statement -> varDecl .)
    FOREACH         reduce using rule 32 (statement -> varDecl .)
    REPEAT          reduce using rule 32 (statement -> varDecl .)
    LET             reduce using rule 32 (statement -> varDecl .)
    ID              reduce using rule 32 (statement -> varDecl .)
    BUY             reduce using rule 32 (statement -> varDecl .)
    MOVE            reduce using rule 32 (statement -> varDecl .)
    $end            reduce using rule 32 (statement -> varDecl .)
    }               reduce using rule 32 (statement -> varDecl .)


state 10

    (39) primFuncStmt -> getter . . listVoidFunc SEP
    (15) varAssign -> getter . ASSIGN expr SEP
    .               shift and go to state 27
    ASSIGN          shift and go to state 28


state 11

    (40) primFuncStmt -> PUT . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 29
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 12

    (41) primFuncStmt -> PICK . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 45
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 13

    (42) primFuncStmt -> STOP . SEP
    SEP             shift and go to state 46


state 14

    (43) primFuncStmt -> RESTART . BEHAVE
    BEHAVE          shift and go to state 47


state 15

    (44) primFuncStmt -> SELL . expr , expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 48
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 16

    (45) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 49


state 17

    (46) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 50


state 18

    (47) primFuncStmt -> TALK . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 51
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 19

    (35) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 52


state 20

    (34) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 53


state 21

    (76) getter -> ID . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 56
    ASSIGN          reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 54
    empty                          shift and go to state 55

state 22

    (33) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 57


state 23

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 58


state 24

    (56) buyStmt -> BUY . expr SEP
    (57) buyStmt -> BUY . expr , expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 59
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 25

    (51) moveStmt -> MOVE . RIGHT SEP
    (52) moveStmt -> MOVE . LEFT SEP
    (53) moveStmt -> MOVE . DOWN SEP
    (54) moveStmt -> MOVE . UP SEP
    (55) moveStmt -> MOVE . SEP expr , expr SEP
    RIGHT           shift and go to state 60
    LEFT            shift and go to state 62
    DOWN            shift and go to state 63
    UP              shift and go to state 64
    SEP             shift and go to state 61


state 26

    (26) statementList -> statement statementList .
    $end            reduce using rule 26 (statementList -> statement statementList .)
    }               reduce using rule 26 (statementList -> statement statementList .)


state 27

    (39) primFuncStmt -> getter . . listVoidFunc SEP
    (48) listVoidFunc -> . REVERSE
    (49) listVoidFunc -> . POP
    (50) listVoidFunc -> . PUSH expr
    REVERSE         shift and go to state 66
    POP             shift and go to state 67
    PUSH            shift and go to state 68

    listVoidFunc                   shift and go to state 65

state 28

    (15) varAssign -> getter ASSIGN . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 69
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 29

    (40) primFuncStmt -> PUT expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 70
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 30

    (58) expr -> call .
    ,               reduce using rule 58 (expr -> call .)
    /               reduce using rule 58 (expr -> call .)
    *               reduce using rule 58 (expr -> call .)
    -               reduce using rule 58 (expr -> call .)
    +               reduce using rule 58 (expr -> call .)
    GREATER         reduce using rule 58 (expr -> call .)
    GREATEREQ       reduce using rule 58 (expr -> call .)
    LESSEQ          reduce using rule 58 (expr -> call .)
    LESS            reduce using rule 58 (expr -> call .)
    EQEQ            reduce using rule 58 (expr -> call .)
    NOTEQ           reduce using rule 58 (expr -> call .)
    AND             reduce using rule 58 (expr -> call .)
    OR              reduce using rule 58 (expr -> call .)
    SEP             reduce using rule 58 (expr -> call .)
    )               reduce using rule 58 (expr -> call .)
    {               reduce using rule 58 (expr -> call .)
    TO              reduce using rule 58 (expr -> call .)
    .               reduce using rule 58 (expr -> call .)
    ASSIGN          reduce using rule 58 (expr -> call .)


state 31

    (59) expr -> - . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 83
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 32

    (60) expr -> ! . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 84
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 33

    (73) call -> ID . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 56
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    ASSIGN          reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 85
    empty                          shift and go to state 55

state 34

    (74) call -> primitiveValue .
    ,               reduce using rule 74 (call -> primitiveValue .)
    /               reduce using rule 74 (call -> primitiveValue .)
    *               reduce using rule 74 (call -> primitiveValue .)
    -               reduce using rule 74 (call -> primitiveValue .)
    +               reduce using rule 74 (call -> primitiveValue .)
    GREATER         reduce using rule 74 (call -> primitiveValue .)
    GREATEREQ       reduce using rule 74 (call -> primitiveValue .)
    LESSEQ          reduce using rule 74 (call -> primitiveValue .)
    LESS            reduce using rule 74 (call -> primitiveValue .)
    EQEQ            reduce using rule 74 (call -> primitiveValue .)
    NOTEQ           reduce using rule 74 (call -> primitiveValue .)
    AND             reduce using rule 74 (call -> primitiveValue .)
    OR              reduce using rule 74 (call -> primitiveValue .)
    SEP             reduce using rule 74 (call -> primitiveValue .)
    )               reduce using rule 74 (call -> primitiveValue .)
    {               reduce using rule 74 (call -> primitiveValue .)
    TO              reduce using rule 74 (call -> primitiveValue .)
    .               reduce using rule 74 (call -> primitiveValue .)
    ASSIGN          reduce using rule 74 (call -> primitiveValue .)


state 35

    (75) call -> primary .
    ,               reduce using rule 75 (call -> primary .)
    /               reduce using rule 75 (call -> primary .)
    *               reduce using rule 75 (call -> primary .)
    -               reduce using rule 75 (call -> primary .)
    +               reduce using rule 75 (call -> primary .)
    GREATER         reduce using rule 75 (call -> primary .)
    GREATEREQ       reduce using rule 75 (call -> primary .)
    LESSEQ          reduce using rule 75 (call -> primary .)
    LESS            reduce using rule 75 (call -> primary .)
    EQEQ            reduce using rule 75 (call -> primary .)
    NOTEQ           reduce using rule 75 (call -> primary .)
    AND             reduce using rule 75 (call -> primary .)
    OR              reduce using rule 75 (call -> primary .)
    SEP             reduce using rule 75 (call -> primary .)
    )               reduce using rule 75 (call -> primary .)
    {               reduce using rule 75 (call -> primary .)
    TO              reduce using rule 75 (call -> primary .)
    .               reduce using rule 75 (call -> primary .)
    ASSIGN          reduce using rule 75 (call -> primary .)


state 36

    (83) primitiveValue -> FIND . PEERS
    (84) primitiveValue -> FIND . OBJECTS
    PEERS           shift and go to state 86
    OBJECTS         shift and go to state 87


state 37

    (85) primitiveValue -> RANDOM . FROM expr TO expr
    FROM            shift and go to state 88


state 38

    (86) primary -> ( . expr )
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 89
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 39

    (87) primary -> { . bookItems }
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 92
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 90
    empty                          shift and go to state 91

state 40

    (88) primary -> [ . listItems ]
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    listItems                      shift and go to state 93
    empty                          shift and go to state 94
    expr                           shift and go to state 95
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 41

    (89) primary -> STRING .
    ,               reduce using rule 89 (primary -> STRING .)
    /               reduce using rule 89 (primary -> STRING .)
    *               reduce using rule 89 (primary -> STRING .)
    -               reduce using rule 89 (primary -> STRING .)
    +               reduce using rule 89 (primary -> STRING .)
    GREATER         reduce using rule 89 (primary -> STRING .)
    GREATEREQ       reduce using rule 89 (primary -> STRING .)
    LESSEQ          reduce using rule 89 (primary -> STRING .)
    LESS            reduce using rule 89 (primary -> STRING .)
    EQEQ            reduce using rule 89 (primary -> STRING .)
    NOTEQ           reduce using rule 89 (primary -> STRING .)
    AND             reduce using rule 89 (primary -> STRING .)
    OR              reduce using rule 89 (primary -> STRING .)
    SEP             reduce using rule 89 (primary -> STRING .)
    )               reduce using rule 89 (primary -> STRING .)
    {               reduce using rule 89 (primary -> STRING .)
    TO              reduce using rule 89 (primary -> STRING .)
    .               reduce using rule 89 (primary -> STRING .)
    ASSIGN          reduce using rule 89 (primary -> STRING .)


state 42

    (90) primary -> NUMBER .
    ,               reduce using rule 90 (primary -> NUMBER .)
    /               reduce using rule 90 (primary -> NUMBER .)
    *               reduce using rule 90 (primary -> NUMBER .)
    -               reduce using rule 90 (primary -> NUMBER .)
    +               reduce using rule 90 (primary -> NUMBER .)
    GREATER         reduce using rule 90 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 90 (primary -> NUMBER .)
    LESSEQ          reduce using rule 90 (primary -> NUMBER .)
    LESS            reduce using rule 90 (primary -> NUMBER .)
    EQEQ            reduce using rule 90 (primary -> NUMBER .)
    NOTEQ           reduce using rule 90 (primary -> NUMBER .)
    AND             reduce using rule 90 (primary -> NUMBER .)
    OR              reduce using rule 90 (primary -> NUMBER .)
    SEP             reduce using rule 90 (primary -> NUMBER .)
    )               reduce using rule 90 (primary -> NUMBER .)
    {               reduce using rule 90 (primary -> NUMBER .)
    TO              reduce using rule 90 (primary -> NUMBER .)
    .               reduce using rule 90 (primary -> NUMBER .)
    ASSIGN          reduce using rule 90 (primary -> NUMBER .)


state 43

    (91) primary -> FALSE .
    ,               reduce using rule 91 (primary -> FALSE .)
    /               reduce using rule 91 (primary -> FALSE .)
    *               reduce using rule 91 (primary -> FALSE .)
    -               reduce using rule 91 (primary -> FALSE .)
    +               reduce using rule 91 (primary -> FALSE .)
    GREATER         reduce using rule 91 (primary -> FALSE .)
    GREATEREQ       reduce using rule 91 (primary -> FALSE .)
    LESSEQ          reduce using rule 91 (primary -> FALSE .)
    LESS            reduce using rule 91 (primary -> FALSE .)
    EQEQ            reduce using rule 91 (primary -> FALSE .)
    NOTEQ           reduce using rule 91 (primary -> FALSE .)
    AND             reduce using rule 91 (primary -> FALSE .)
    OR              reduce using rule 91 (primary -> FALSE .)
    SEP             reduce using rule 91 (primary -> FALSE .)
    )               reduce using rule 91 (primary -> FALSE .)
    {               reduce using rule 91 (primary -> FALSE .)
    TO              reduce using rule 91 (primary -> FALSE .)
    .               reduce using rule 91 (primary -> FALSE .)
    ASSIGN          reduce using rule 91 (primary -> FALSE .)


state 44

    (92) primary -> TRUE .
    ,               reduce using rule 92 (primary -> TRUE .)
    /               reduce using rule 92 (primary -> TRUE .)
    *               reduce using rule 92 (primary -> TRUE .)
    -               reduce using rule 92 (primary -> TRUE .)
    +               reduce using rule 92 (primary -> TRUE .)
    GREATER         reduce using rule 92 (primary -> TRUE .)
    GREATEREQ       reduce using rule 92 (primary -> TRUE .)
    LESSEQ          reduce using rule 92 (primary -> TRUE .)
    LESS            reduce using rule 92 (primary -> TRUE .)
    EQEQ            reduce using rule 92 (primary -> TRUE .)
    NOTEQ           reduce using rule 92 (primary -> TRUE .)
    AND             reduce using rule 92 (primary -> TRUE .)
    OR              reduce using rule 92 (primary -> TRUE .)
    SEP             reduce using rule 92 (primary -> TRUE .)
    )               reduce using rule 92 (primary -> TRUE .)
    {               reduce using rule 92 (primary -> TRUE .)
    TO              reduce using rule 92 (primary -> TRUE .)
    .               reduce using rule 92 (primary -> TRUE .)
    ASSIGN          reduce using rule 92 (primary -> TRUE .)


state 45

    (41) primFuncStmt -> PICK expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 96
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 46

    (42) primFuncStmt -> STOP SEP .
    PUT             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    TALK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    IN              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    LET             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    ID              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    $end            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    }               reduce using rule 42 (primFuncStmt -> STOP SEP .)


state 47

    (43) primFuncStmt -> RESTART BEHAVE .
    PUT             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    PICK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    STOP            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    RESTART         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    SELL            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    TALK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    IN              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    FOREACH         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    REPEAT          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    LET             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    ID              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    BUY             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    MOVE            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    $end            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)
    }               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE .)


state 48

    (44) primFuncStmt -> SELL expr . , expr , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 97
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 49

    (45) primFuncStmt -> buyStmt SEP .
    PUT             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    TALK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    ID              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    $end            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)


state 50

    (46) primFuncStmt -> moveStmt SEP .
    PUT             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    TALK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    ID              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    $end            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)


state 51

    (47) primFuncStmt -> TALK expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 98
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 52

    (35) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 99
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 53

    (34) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 100


state 54

    (76) getter -> ID dotTail .
    .               reduce using rule 76 (getter -> ID dotTail .)
    ASSIGN          reduce using rule 76 (getter -> ID dotTail .)


state 55

    (77) dotTail -> empty .
    .               reduce using rule 77 (dotTail -> empty .)
    ASSIGN          reduce using rule 77 (dotTail -> empty .)
    /               reduce using rule 77 (dotTail -> empty .)
    *               reduce using rule 77 (dotTail -> empty .)
    -               reduce using rule 77 (dotTail -> empty .)
    +               reduce using rule 77 (dotTail -> empty .)
    GREATER         reduce using rule 77 (dotTail -> empty .)
    GREATEREQ       reduce using rule 77 (dotTail -> empty .)
    LESSEQ          reduce using rule 77 (dotTail -> empty .)
    LESS            reduce using rule 77 (dotTail -> empty .)
    EQEQ            reduce using rule 77 (dotTail -> empty .)
    NOTEQ           reduce using rule 77 (dotTail -> empty .)
    AND             reduce using rule 77 (dotTail -> empty .)
    OR              reduce using rule 77 (dotTail -> empty .)
    ,               reduce using rule 77 (dotTail -> empty .)
    SEP             reduce using rule 77 (dotTail -> empty .)
    )               reduce using rule 77 (dotTail -> empty .)
    {               reduce using rule 77 (dotTail -> empty .)
    TO              reduce using rule 77 (dotTail -> empty .)


state 56

    (78) dotTail -> . . idTail dotTail
    (79) idTail -> . listValueFunc
    (80) idTail -> . ID
    (81) listValueFunc -> . SIZE
    (82) listValueFunc -> . GET expr
    ID              shift and go to state 103
    SIZE            shift and go to state 104
    GET             shift and go to state 105

    idTail                         shift and go to state 101
    listValueFunc                  shift and go to state 102

state 57

    (33) repeatStmt -> REPEAT WHEN . expr { statementList }
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 106
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 58

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 107


state 59

    (56) buyStmt -> BUY expr . SEP
    (57) buyStmt -> BUY expr . , expr , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 108
    ,               shift and go to state 109
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 60

    (51) moveStmt -> MOVE RIGHT . SEP
    SEP             shift and go to state 110


state 61

    (55) moveStmt -> MOVE SEP . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 111
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 62

    (52) moveStmt -> MOVE LEFT . SEP
    SEP             shift and go to state 112


state 63

    (53) moveStmt -> MOVE DOWN . SEP
    SEP             shift and go to state 113


state 64

    (54) moveStmt -> MOVE UP . SEP
    SEP             shift and go to state 114


state 65

    (39) primFuncStmt -> getter . listVoidFunc . SEP
    SEP             shift and go to state 115


state 66

    (48) listVoidFunc -> REVERSE .
    SEP             reduce using rule 48 (listVoidFunc -> REVERSE .)


state 67

    (49) listVoidFunc -> POP .
    SEP             reduce using rule 49 (listVoidFunc -> POP .)


state 68

    (50) listVoidFunc -> PUSH . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 116
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 69

    (15) varAssign -> getter ASSIGN expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 117
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 70

    (40) primFuncStmt -> PUT expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 118
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 71

    (61) expr -> expr / . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 119
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 72

    (62) expr -> expr * . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 120
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 73

    (63) expr -> expr - . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 121
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 74

    (64) expr -> expr + . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 122
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 75

    (65) expr -> expr GREATER . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 123
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 76

    (66) expr -> expr GREATEREQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 124
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 77

    (67) expr -> expr LESSEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 125
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 78

    (68) expr -> expr LESS . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 126
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 79

    (69) expr -> expr EQEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 127
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 80

    (70) expr -> expr NOTEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 128
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 81

    (71) expr -> expr AND . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 129
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 82

    (72) expr -> expr OR . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 130
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 83

    (59) expr -> - expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 59 (expr -> - expr .)
    /               reduce using rule 59 (expr -> - expr .)
    *               reduce using rule 59 (expr -> - expr .)
    -               reduce using rule 59 (expr -> - expr .)
    +               reduce using rule 59 (expr -> - expr .)
    GREATER         reduce using rule 59 (expr -> - expr .)
    GREATEREQ       reduce using rule 59 (expr -> - expr .)
    LESSEQ          reduce using rule 59 (expr -> - expr .)
    LESS            reduce using rule 59 (expr -> - expr .)
    EQEQ            reduce using rule 59 (expr -> - expr .)
    NOTEQ           reduce using rule 59 (expr -> - expr .)
    AND             reduce using rule 59 (expr -> - expr .)
    OR              reduce using rule 59 (expr -> - expr .)
    SEP             reduce using rule 59 (expr -> - expr .)
    )               reduce using rule 59 (expr -> - expr .)
    {               reduce using rule 59 (expr -> - expr .)
    TO              reduce using rule 59 (expr -> - expr .)
    .               reduce using rule 59 (expr -> - expr .)
    ASSIGN          reduce using rule 59 (expr -> - expr .)


state 84

    (60) expr -> ! expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 60 (expr -> ! expr .)
    /               reduce using rule 60 (expr -> ! expr .)
    *               reduce using rule 60 (expr -> ! expr .)
    -               reduce using rule 60 (expr -> ! expr .)
    +               reduce using rule 60 (expr -> ! expr .)
    GREATER         reduce using rule 60 (expr -> ! expr .)
    GREATEREQ       reduce using rule 60 (expr -> ! expr .)
    LESSEQ          reduce using rule 60 (expr -> ! expr .)
    LESS            reduce using rule 60 (expr -> ! expr .)
    EQEQ            reduce using rule 60 (expr -> ! expr .)
    NOTEQ           reduce using rule 60 (expr -> ! expr .)
    AND             reduce using rule 60 (expr -> ! expr .)
    OR              reduce using rule 60 (expr -> ! expr .)
    SEP             reduce using rule 60 (expr -> ! expr .)
    )               reduce using rule 60 (expr -> ! expr .)
    {               reduce using rule 60 (expr -> ! expr .)
    TO              reduce using rule 60 (expr -> ! expr .)
    .               reduce using rule 60 (expr -> ! expr .)
    ASSIGN          reduce using rule 60 (expr -> ! expr .)


state 85

    (73) call -> ID dotTail .
    ,               reduce using rule 73 (call -> ID dotTail .)
    /               reduce using rule 73 (call -> ID dotTail .)
    *               reduce using rule 73 (call -> ID dotTail .)
    -               reduce using rule 73 (call -> ID dotTail .)
    +               reduce using rule 73 (call -> ID dotTail .)
    GREATER         reduce using rule 73 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 73 (call -> ID dotTail .)
    LESSEQ          reduce using rule 73 (call -> ID dotTail .)
    LESS            reduce using rule 73 (call -> ID dotTail .)
    EQEQ            reduce using rule 73 (call -> ID dotTail .)
    NOTEQ           reduce using rule 73 (call -> ID dotTail .)
    AND             reduce using rule 73 (call -> ID dotTail .)
    OR              reduce using rule 73 (call -> ID dotTail .)
    SEP             reduce using rule 73 (call -> ID dotTail .)
    )               reduce using rule 73 (call -> ID dotTail .)
    {               reduce using rule 73 (call -> ID dotTail .)
    TO              reduce using rule 73 (call -> ID dotTail .)
    .               reduce using rule 73 (call -> ID dotTail .)
    ASSIGN          reduce using rule 73 (call -> ID dotTail .)


state 86

    (83) primitiveValue -> FIND PEERS .
    ,               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    /               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    *               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    -               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    +               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATER         reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATEREQ       reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESSEQ          reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESS            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    EQEQ            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    NOTEQ           reduce using rule 83 (primitiveValue -> FIND PEERS .)
    AND             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    OR              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    SEP             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    )               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    {               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    TO              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    .               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ASSIGN          reduce using rule 83 (primitiveValue -> FIND PEERS .)


state 87

    (84) primitiveValue -> FIND OBJECTS .
    ,               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    /               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    *               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    -               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    +               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATER         reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATEREQ       reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESSEQ          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESS            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    EQEQ            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    NOTEQ           reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    AND             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    OR              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    SEP             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    )               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    {               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    TO              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    .               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ASSIGN          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)


state 88

    (85) primitiveValue -> RANDOM FROM . expr TO expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 131
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 89

    (86) primary -> ( expr . )
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    )               shift and go to state 132
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 90

    (87) primary -> { bookItems . }
    }               shift and go to state 133


state 91

    (95) bookItems -> empty .
    }               reduce using rule 95 (bookItems -> empty .)


state 92

    (96) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 134


state 93

    (88) primary -> [ listItems . ]
    ]               shift and go to state 135


state 94

    (93) listItems -> empty .
    ]               reduce using rule 93 (listItems -> empty .)
    )               reduce using rule 93 (listItems -> empty .)


state 95

    (94) listItems -> expr . , listItems
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 136
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 96

    (41) primFuncStmt -> PICK expr SEP .
    PUT             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    PICK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    STOP            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    RESTART         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    SELL            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    TALK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    IN              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    FOREACH         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    REPEAT          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    LET             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    ID              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    BUY             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    MOVE            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    $end            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    }               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)


state 97

    (44) primFuncStmt -> SELL expr , . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 137
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 98

    (47) primFuncStmt -> TALK expr SEP .
    PUT             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    TALK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    IN              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    LET             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    ID              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    $end            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    }               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)


state 99

    (35) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 138
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 100

    (34) foreachStmt -> FOREACH ID IN . expr { statementList }
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 139
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 101

    (78) dotTail -> . idTail . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 56
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    ASSIGN          reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 140
    empty                          shift and go to state 55

state 102

    (79) idTail -> listValueFunc .
    /               reduce using rule 79 (idTail -> listValueFunc .)
    *               reduce using rule 79 (idTail -> listValueFunc .)
    -               reduce using rule 79 (idTail -> listValueFunc .)
    +               reduce using rule 79 (idTail -> listValueFunc .)
    GREATER         reduce using rule 79 (idTail -> listValueFunc .)
    GREATEREQ       reduce using rule 79 (idTail -> listValueFunc .)
    LESSEQ          reduce using rule 79 (idTail -> listValueFunc .)
    LESS            reduce using rule 79 (idTail -> listValueFunc .)
    EQEQ            reduce using rule 79 (idTail -> listValueFunc .)
    NOTEQ           reduce using rule 79 (idTail -> listValueFunc .)
    AND             reduce using rule 79 (idTail -> listValueFunc .)
    OR              reduce using rule 79 (idTail -> listValueFunc .)
    ,               reduce using rule 79 (idTail -> listValueFunc .)
    SEP             reduce using rule 79 (idTail -> listValueFunc .)
    )               reduce using rule 79 (idTail -> listValueFunc .)
    {               reduce using rule 79 (idTail -> listValueFunc .)
    TO              reduce using rule 79 (idTail -> listValueFunc .)
    .               reduce using rule 79 (idTail -> listValueFunc .)
    ASSIGN          reduce using rule 79 (idTail -> listValueFunc .)


state 103

    (80) idTail -> ID .
    /               reduce using rule 80 (idTail -> ID .)
    *               reduce using rule 80 (idTail -> ID .)
    -               reduce using rule 80 (idTail -> ID .)
    +               reduce using rule 80 (idTail -> ID .)
    GREATER         reduce using rule 80 (idTail -> ID .)
    GREATEREQ       reduce using rule 80 (idTail -> ID .)
    LESSEQ          reduce using rule 80 (idTail -> ID .)
    LESS            reduce using rule 80 (idTail -> ID .)
    EQEQ            reduce using rule 80 (idTail -> ID .)
    NOTEQ           reduce using rule 80 (idTail -> ID .)
    AND             reduce using rule 80 (idTail -> ID .)
    OR              reduce using rule 80 (idTail -> ID .)
    ,               reduce using rule 80 (idTail -> ID .)
    SEP             reduce using rule 80 (idTail -> ID .)
    )               reduce using rule 80 (idTail -> ID .)
    {               reduce using rule 80 (idTail -> ID .)
    TO              reduce using rule 80 (idTail -> ID .)
    .               reduce using rule 80 (idTail -> ID .)
    ASSIGN          reduce using rule 80 (idTail -> ID .)


state 104

    (81) listValueFunc -> SIZE .
    /               reduce using rule 81 (listValueFunc -> SIZE .)
    *               reduce using rule 81 (listValueFunc -> SIZE .)
    -               reduce using rule 81 (listValueFunc -> SIZE .)
    +               reduce using rule 81 (listValueFunc -> SIZE .)
    GREATER         reduce using rule 81 (listValueFunc -> SIZE .)
    GREATEREQ       reduce using rule 81 (listValueFunc -> SIZE .)
    LESSEQ          reduce using rule 81 (listValueFunc -> SIZE .)
    LESS            reduce using rule 81 (listValueFunc -> SIZE .)
    EQEQ            reduce using rule 81 (listValueFunc -> SIZE .)
    NOTEQ           reduce using rule 81 (listValueFunc -> SIZE .)
    AND             reduce using rule 81 (listValueFunc -> SIZE .)
    OR              reduce using rule 81 (listValueFunc -> SIZE .)
    ,               reduce using rule 81 (listValueFunc -> SIZE .)
    SEP             reduce using rule 81 (listValueFunc -> SIZE .)
    )               reduce using rule 81 (listValueFunc -> SIZE .)
    {               reduce using rule 81 (listValueFunc -> SIZE .)
    TO              reduce using rule 81 (listValueFunc -> SIZE .)
    .               reduce using rule 81 (listValueFunc -> SIZE .)
    ASSIGN          reduce using rule 81 (listValueFunc -> SIZE .)


state 105

    (82) listValueFunc -> GET . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 141
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 106

    (33) repeatStmt -> REPEAT WHEN expr . { statementList }
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 142
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 107

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (97) type -> . BOOK_TYPE
    (98) type -> . LIST_TYPE
    (99) type -> . STRING_TYPE
    (100) type -> . BOOL_TYPE
    (101) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 144
    LIST_TYPE       shift and go to state 145
    STRING_TYPE     shift and go to state 146
    BOOL_TYPE       shift and go to state 147
    NUMBER_TYPE     shift and go to state 148

    type                           shift and go to state 143

state 108

    (56) buyStmt -> BUY expr SEP .
    SEP             reduce using rule 56 (buyStmt -> BUY expr SEP .)


state 109

    (57) buyStmt -> BUY expr , . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 149
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 110

    (51) moveStmt -> MOVE RIGHT SEP .
    SEP             reduce using rule 51 (moveStmt -> MOVE RIGHT SEP .)


state 111

    (55) moveStmt -> MOVE SEP expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 150
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 112

    (52) moveStmt -> MOVE LEFT SEP .
    SEP             reduce using rule 52 (moveStmt -> MOVE LEFT SEP .)


state 113

    (53) moveStmt -> MOVE DOWN SEP .
    SEP             reduce using rule 53 (moveStmt -> MOVE DOWN SEP .)


state 114

    (54) moveStmt -> MOVE UP SEP .
    SEP             reduce using rule 54 (moveStmt -> MOVE UP SEP .)


state 115

    (39) primFuncStmt -> getter . listVoidFunc SEP .
    PUT             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    PICK            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    STOP            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    RESTART         reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    SELL            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    TALK            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    IN              reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    FOREACH         reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    REPEAT          reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    LET             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    ID              reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    BUY             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    MOVE            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    $end            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    }               reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)


state 116

    (50) listVoidFunc -> PUSH expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 50 (listVoidFunc -> PUSH expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 117

    (15) varAssign -> getter ASSIGN expr SEP .
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TALK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 118

    (40) primFuncStmt -> PUT expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 151
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 119

    (61) expr -> expr / expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 61 (expr -> expr / expr .)
    /               reduce using rule 61 (expr -> expr / expr .)
    *               reduce using rule 61 (expr -> expr / expr .)
    -               reduce using rule 61 (expr -> expr / expr .)
    +               reduce using rule 61 (expr -> expr / expr .)
    GREATER         reduce using rule 61 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr / expr .)
    LESSEQ          reduce using rule 61 (expr -> expr / expr .)
    LESS            reduce using rule 61 (expr -> expr / expr .)
    EQEQ            reduce using rule 61 (expr -> expr / expr .)
    NOTEQ           reduce using rule 61 (expr -> expr / expr .)
    AND             reduce using rule 61 (expr -> expr / expr .)
    OR              reduce using rule 61 (expr -> expr / expr .)
    SEP             reduce using rule 61 (expr -> expr / expr .)
    )               reduce using rule 61 (expr -> expr / expr .)
    {               reduce using rule 61 (expr -> expr / expr .)
    TO              reduce using rule 61 (expr -> expr / expr .)
    .               reduce using rule 61 (expr -> expr / expr .)
    ASSIGN          reduce using rule 61 (expr -> expr / expr .)


state 120

    (62) expr -> expr * expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 62 (expr -> expr * expr .)
    /               reduce using rule 62 (expr -> expr * expr .)
    *               reduce using rule 62 (expr -> expr * expr .)
    -               reduce using rule 62 (expr -> expr * expr .)
    +               reduce using rule 62 (expr -> expr * expr .)
    GREATER         reduce using rule 62 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr * expr .)
    LESSEQ          reduce using rule 62 (expr -> expr * expr .)
    LESS            reduce using rule 62 (expr -> expr * expr .)
    EQEQ            reduce using rule 62 (expr -> expr * expr .)
    NOTEQ           reduce using rule 62 (expr -> expr * expr .)
    AND             reduce using rule 62 (expr -> expr * expr .)
    OR              reduce using rule 62 (expr -> expr * expr .)
    SEP             reduce using rule 62 (expr -> expr * expr .)
    )               reduce using rule 62 (expr -> expr * expr .)
    {               reduce using rule 62 (expr -> expr * expr .)
    TO              reduce using rule 62 (expr -> expr * expr .)
    .               reduce using rule 62 (expr -> expr * expr .)
    ASSIGN          reduce using rule 62 (expr -> expr * expr .)


state 121

    (63) expr -> expr - expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 63 (expr -> expr - expr .)
    -               reduce using rule 63 (expr -> expr - expr .)
    +               reduce using rule 63 (expr -> expr - expr .)
    GREATER         reduce using rule 63 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr - expr .)
    LESSEQ          reduce using rule 63 (expr -> expr - expr .)
    LESS            reduce using rule 63 (expr -> expr - expr .)
    EQEQ            reduce using rule 63 (expr -> expr - expr .)
    NOTEQ           reduce using rule 63 (expr -> expr - expr .)
    AND             reduce using rule 63 (expr -> expr - expr .)
    OR              reduce using rule 63 (expr -> expr - expr .)
    SEP             reduce using rule 63 (expr -> expr - expr .)
    )               reduce using rule 63 (expr -> expr - expr .)
    {               reduce using rule 63 (expr -> expr - expr .)
    TO              reduce using rule 63 (expr -> expr - expr .)
    .               reduce using rule 63 (expr -> expr - expr .)
    ASSIGN          reduce using rule 63 (expr -> expr - expr .)
    /               shift and go to state 71
    *               shift and go to state 72


state 122

    (64) expr -> expr + expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 64 (expr -> expr + expr .)
    -               reduce using rule 64 (expr -> expr + expr .)
    +               reduce using rule 64 (expr -> expr + expr .)
    GREATER         reduce using rule 64 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr + expr .)
    LESSEQ          reduce using rule 64 (expr -> expr + expr .)
    LESS            reduce using rule 64 (expr -> expr + expr .)
    EQEQ            reduce using rule 64 (expr -> expr + expr .)
    NOTEQ           reduce using rule 64 (expr -> expr + expr .)
    AND             reduce using rule 64 (expr -> expr + expr .)
    OR              reduce using rule 64 (expr -> expr + expr .)
    SEP             reduce using rule 64 (expr -> expr + expr .)
    )               reduce using rule 64 (expr -> expr + expr .)
    {               reduce using rule 64 (expr -> expr + expr .)
    TO              reduce using rule 64 (expr -> expr + expr .)
    .               reduce using rule 64 (expr -> expr + expr .)
    ASSIGN          reduce using rule 64 (expr -> expr + expr .)
    /               shift and go to state 71
    *               shift and go to state 72


state 123

    (65) expr -> expr GREATER expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 65 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 65 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 65 (expr -> expr GREATER expr .)
    LESS            reduce using rule 65 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 65 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 65 (expr -> expr GREATER expr .)
    AND             reduce using rule 65 (expr -> expr GREATER expr .)
    OR              reduce using rule 65 (expr -> expr GREATER expr .)
    SEP             reduce using rule 65 (expr -> expr GREATER expr .)
    )               reduce using rule 65 (expr -> expr GREATER expr .)
    {               reduce using rule 65 (expr -> expr GREATER expr .)
    TO              reduce using rule 65 (expr -> expr GREATER expr .)
    .               reduce using rule 65 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 65 (expr -> expr GREATER expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 124

    (66) expr -> expr GREATEREQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 66 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 66 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 66 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 66 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 66 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 66 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 66 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 66 (expr -> expr GREATEREQ expr .)
    SEP             reduce using rule 66 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 66 (expr -> expr GREATEREQ expr .)
    .               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    ASSIGN          reduce using rule 66 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 125

    (67) expr -> expr LESSEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 67 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 67 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 67 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 67 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 67 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 67 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 67 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 67 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 67 (expr -> expr LESSEQ expr .)
    SEP             reduce using rule 67 (expr -> expr LESSEQ expr .)
    )               reduce using rule 67 (expr -> expr LESSEQ expr .)
    {               reduce using rule 67 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 67 (expr -> expr LESSEQ expr .)
    .               reduce using rule 67 (expr -> expr LESSEQ expr .)
    ASSIGN          reduce using rule 67 (expr -> expr LESSEQ expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 126

    (68) expr -> expr LESS expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 68 (expr -> expr LESS expr .)
    GREATER         reduce using rule 68 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 68 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 68 (expr -> expr LESS expr .)
    LESS            reduce using rule 68 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 68 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 68 (expr -> expr LESS expr .)
    AND             reduce using rule 68 (expr -> expr LESS expr .)
    OR              reduce using rule 68 (expr -> expr LESS expr .)
    SEP             reduce using rule 68 (expr -> expr LESS expr .)
    )               reduce using rule 68 (expr -> expr LESS expr .)
    {               reduce using rule 68 (expr -> expr LESS expr .)
    TO              reduce using rule 68 (expr -> expr LESS expr .)
    .               reduce using rule 68 (expr -> expr LESS expr .)
    ASSIGN          reduce using rule 68 (expr -> expr LESS expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74


state 127

    (69) expr -> expr EQEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 69 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 69 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 69 (expr -> expr EQEQ expr .)
    AND             reduce using rule 69 (expr -> expr EQEQ expr .)
    OR              reduce using rule 69 (expr -> expr EQEQ expr .)
    SEP             reduce using rule 69 (expr -> expr EQEQ expr .)
    )               reduce using rule 69 (expr -> expr EQEQ expr .)
    {               reduce using rule 69 (expr -> expr EQEQ expr .)
    TO              reduce using rule 69 (expr -> expr EQEQ expr .)
    .               reduce using rule 69 (expr -> expr EQEQ expr .)
    ASSIGN          reduce using rule 69 (expr -> expr EQEQ expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78


state 128

    (70) expr -> expr NOTEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 70 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 70 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 70 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 70 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 70 (expr -> expr NOTEQ expr .)
    SEP             reduce using rule 70 (expr -> expr NOTEQ expr .)
    )               reduce using rule 70 (expr -> expr NOTEQ expr .)
    {               reduce using rule 70 (expr -> expr NOTEQ expr .)
    TO              reduce using rule 70 (expr -> expr NOTEQ expr .)
    .               reduce using rule 70 (expr -> expr NOTEQ expr .)
    ASSIGN          reduce using rule 70 (expr -> expr NOTEQ expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78


state 129

    (71) expr -> expr AND expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 71 (expr -> expr AND expr .)
    AND             reduce using rule 71 (expr -> expr AND expr .)
    OR              reduce using rule 71 (expr -> expr AND expr .)
    SEP             reduce using rule 71 (expr -> expr AND expr .)
    )               reduce using rule 71 (expr -> expr AND expr .)
    {               reduce using rule 71 (expr -> expr AND expr .)
    TO              reduce using rule 71 (expr -> expr AND expr .)
    .               reduce using rule 71 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 71 (expr -> expr AND expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80


state 130

    (72) expr -> expr OR expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               reduce using rule 72 (expr -> expr OR expr .)
    OR              reduce using rule 72 (expr -> expr OR expr .)
    SEP             reduce using rule 72 (expr -> expr OR expr .)
    )               reduce using rule 72 (expr -> expr OR expr .)
    {               reduce using rule 72 (expr -> expr OR expr .)
    TO              reduce using rule 72 (expr -> expr OR expr .)
    .               reduce using rule 72 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 72 (expr -> expr OR expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81


state 131

    (85) primitiveValue -> RANDOM FROM expr . TO expr
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    TO              shift and go to state 152
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 132

    (86) primary -> ( expr ) .
    ,               reduce using rule 86 (primary -> ( expr ) .)
    /               reduce using rule 86 (primary -> ( expr ) .)
    *               reduce using rule 86 (primary -> ( expr ) .)
    -               reduce using rule 86 (primary -> ( expr ) .)
    +               reduce using rule 86 (primary -> ( expr ) .)
    GREATER         reduce using rule 86 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 86 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 86 (primary -> ( expr ) .)
    LESS            reduce using rule 86 (primary -> ( expr ) .)
    EQEQ            reduce using rule 86 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 86 (primary -> ( expr ) .)
    AND             reduce using rule 86 (primary -> ( expr ) .)
    OR              reduce using rule 86 (primary -> ( expr ) .)
    SEP             reduce using rule 86 (primary -> ( expr ) .)
    )               reduce using rule 86 (primary -> ( expr ) .)
    {               reduce using rule 86 (primary -> ( expr ) .)
    TO              reduce using rule 86 (primary -> ( expr ) .)
    .               reduce using rule 86 (primary -> ( expr ) .)
    ASSIGN          reduce using rule 86 (primary -> ( expr ) .)


state 133

    (87) primary -> { bookItems } .
    ,               reduce using rule 87 (primary -> { bookItems } .)
    /               reduce using rule 87 (primary -> { bookItems } .)
    *               reduce using rule 87 (primary -> { bookItems } .)
    -               reduce using rule 87 (primary -> { bookItems } .)
    +               reduce using rule 87 (primary -> { bookItems } .)
    GREATER         reduce using rule 87 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 87 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 87 (primary -> { bookItems } .)
    LESS            reduce using rule 87 (primary -> { bookItems } .)
    EQEQ            reduce using rule 87 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 87 (primary -> { bookItems } .)
    AND             reduce using rule 87 (primary -> { bookItems } .)
    OR              reduce using rule 87 (primary -> { bookItems } .)
    SEP             reduce using rule 87 (primary -> { bookItems } .)
    )               reduce using rule 87 (primary -> { bookItems } .)
    {               reduce using rule 87 (primary -> { bookItems } .)
    TO              reduce using rule 87 (primary -> { bookItems } .)
    .               reduce using rule 87 (primary -> { bookItems } .)
    ASSIGN          reduce using rule 87 (primary -> { bookItems } .)


state 134

    (96) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 153


state 135

    (88) primary -> [ listItems ] .
    ,               reduce using rule 88 (primary -> [ listItems ] .)
    /               reduce using rule 88 (primary -> [ listItems ] .)
    *               reduce using rule 88 (primary -> [ listItems ] .)
    -               reduce using rule 88 (primary -> [ listItems ] .)
    +               reduce using rule 88 (primary -> [ listItems ] .)
    GREATER         reduce using rule 88 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 88 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 88 (primary -> [ listItems ] .)
    LESS            reduce using rule 88 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 88 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 88 (primary -> [ listItems ] .)
    AND             reduce using rule 88 (primary -> [ listItems ] .)
    OR              reduce using rule 88 (primary -> [ listItems ] .)
    SEP             reduce using rule 88 (primary -> [ listItems ] .)
    )               reduce using rule 88 (primary -> [ listItems ] .)
    {               reduce using rule 88 (primary -> [ listItems ] .)
    TO              reduce using rule 88 (primary -> [ listItems ] .)
    .               reduce using rule 88 (primary -> [ listItems ] .)
    ASSIGN          reduce using rule 88 (primary -> [ listItems ] .)


state 136

    (94) listItems -> expr , . listItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 95
    listItems                      shift and go to state 154
    empty                          shift and go to state 94
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 137

    (44) primFuncStmt -> SELL expr , expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 155
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 138

    (35) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 156
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 139

    (34) foreachStmt -> FOREACH ID IN expr . { statementList }
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 157
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 140

    (78) dotTail -> . idTail dotTail .
    .               reduce using rule 78 (dotTail -> . idTail dotTail .)
    ASSIGN          reduce using rule 78 (dotTail -> . idTail dotTail .)
    /               reduce using rule 78 (dotTail -> . idTail dotTail .)
    *               reduce using rule 78 (dotTail -> . idTail dotTail .)
    -               reduce using rule 78 (dotTail -> . idTail dotTail .)
    +               reduce using rule 78 (dotTail -> . idTail dotTail .)
    GREATER         reduce using rule 78 (dotTail -> . idTail dotTail .)
    GREATEREQ       reduce using rule 78 (dotTail -> . idTail dotTail .)
    LESSEQ          reduce using rule 78 (dotTail -> . idTail dotTail .)
    LESS            reduce using rule 78 (dotTail -> . idTail dotTail .)
    EQEQ            reduce using rule 78 (dotTail -> . idTail dotTail .)
    NOTEQ           reduce using rule 78 (dotTail -> . idTail dotTail .)
    AND             reduce using rule 78 (dotTail -> . idTail dotTail .)
    OR              reduce using rule 78 (dotTail -> . idTail dotTail .)
    ,               reduce using rule 78 (dotTail -> . idTail dotTail .)
    SEP             reduce using rule 78 (dotTail -> . idTail dotTail .)
    )               reduce using rule 78 (dotTail -> . idTail dotTail .)
    {               reduce using rule 78 (dotTail -> . idTail dotTail .)
    TO              reduce using rule 78 (dotTail -> . idTail dotTail .)


state 141

    (82) listValueFunc -> GET expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ,               reduce using rule 82 (listValueFunc -> GET expr .)
    SEP             reduce using rule 82 (listValueFunc -> GET expr .)
    )               reduce using rule 82 (listValueFunc -> GET expr .)
    {               reduce using rule 82 (listValueFunc -> GET expr .)
    TO              reduce using rule 82 (listValueFunc -> GET expr .)
    .               reduce using rule 82 (listValueFunc -> GET expr .)
    ASSIGN          reduce using rule 82 (listValueFunc -> GET expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 142

    (33) repeatStmt -> REPEAT WHEN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 158
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 143

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 159
    SEP             shift and go to state 160


state 144

    (97) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 97 (type -> BOOK_TYPE .)
    SEP             reduce using rule 97 (type -> BOOK_TYPE .)


state 145

    (98) type -> LIST_TYPE .
    ASSIGN          reduce using rule 98 (type -> LIST_TYPE .)
    SEP             reduce using rule 98 (type -> LIST_TYPE .)


state 146

    (99) type -> STRING_TYPE .
    ASSIGN          reduce using rule 99 (type -> STRING_TYPE .)
    SEP             reduce using rule 99 (type -> STRING_TYPE .)


state 147

    (100) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 100 (type -> BOOL_TYPE .)
    SEP             reduce using rule 100 (type -> BOOL_TYPE .)


state 148

    (101) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 101 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 101 (type -> NUMBER_TYPE .)


state 149

    (57) buyStmt -> BUY expr , expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 161
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 150

    (55) moveStmt -> MOVE SEP expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 162
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 151

    (40) primFuncStmt -> PUT expr , expr SEP .
    PUT             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    PICK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    STOP            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    RESTART         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    SELL            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    TALK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    IN              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    FOREACH         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    REPEAT          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    LET             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    ID              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    BUY             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    MOVE            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    $end            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    }               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)


state 152

    (85) primitiveValue -> RANDOM FROM expr TO . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 163
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 153

    (96) bookItems -> STRING : ( . listItems ) , bookItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    listItems                      shift and go to state 164
    empty                          shift and go to state 94
    expr                           shift and go to state 95
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 154

    (94) listItems -> expr , listItems .
    ]               reduce using rule 94 (listItems -> expr , listItems .)
    )               reduce using rule 94 (listItems -> expr , listItems .)


state 155

    (44) primFuncStmt -> SELL expr , expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 165
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 156

    (35) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 166


state 157

    (34) foreachStmt -> FOREACH ID IN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 167
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 158

    (33) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 168


state 159

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 169
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 160

    (14) varDecl -> LET ID : type SEP .
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TALK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 161

    (57) buyStmt -> BUY expr , expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 170
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 162

    (55) moveStmt -> MOVE SEP expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 171
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 163

    (85) primitiveValue -> RANDOM FROM expr TO expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ,               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    SEP             reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    )               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    {               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    TO              reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    .               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ASSIGN          reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 164

    (96) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 172


state 165

    (44) primFuncStmt -> SELL expr , expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 173
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 166

    (35) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 177
    IN              shift and go to state 174
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 175
    empty                          shift and go to state 176

state 167

    (34) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 178


state 168

    (33) repeatStmt -> REPEAT WHEN expr { statementList } .
    PUT             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TALK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    ID              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    $end            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 169

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 179
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 170

    (57) buyStmt -> BUY expr , expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 180
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 171

    (55) moveStmt -> MOVE SEP expr , expr SEP .
    SEP             reduce using rule 55 (moveStmt -> MOVE SEP expr , expr SEP .)


state 172

    (96) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 181


state 173

    (44) primFuncStmt -> SELL expr , expr , expr SEP .
    PUT             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TALK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    IN              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    LET             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    ID              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    $end            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    }               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)


state 174

    (38) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 182


state 175

    (35) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    $end            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 176

    (36) inothercaseStmt -> empty .
    PUT             reduce using rule 36 (inothercaseStmt -> empty .)
    PICK            reduce using rule 36 (inothercaseStmt -> empty .)
    STOP            reduce using rule 36 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 36 (inothercaseStmt -> empty .)
    SELL            reduce using rule 36 (inothercaseStmt -> empty .)
    TALK            reduce using rule 36 (inothercaseStmt -> empty .)
    IN              reduce using rule 36 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 36 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 36 (inothercaseStmt -> empty .)
    LET             reduce using rule 36 (inothercaseStmt -> empty .)
    ID              reduce using rule 36 (inothercaseStmt -> empty .)
    BUY             reduce using rule 36 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 36 (inothercaseStmt -> empty .)
    $end            reduce using rule 36 (inothercaseStmt -> empty .)
    }               reduce using rule 36 (inothercaseStmt -> empty .)


state 177

    (37) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 183


state 178

    (34) foreachStmt -> FOREACH ID IN expr { statementList } .
    PUT             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TALK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    ID              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    $end            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 179

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TALK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 180

    (57) buyStmt -> BUY expr , expr , expr SEP .
    SEP             reduce using rule 57 (buyStmt -> BUY expr , expr , expr SEP .)


state 181

    (96) bookItems -> STRING : ( listItems ) , . bookItems
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 92
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 184
    empty                          shift and go to state 91

state 182

    (38) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 185


state 183

    (37) inothercaseStmt -> OTHERWISE { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 186
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 184

    (96) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 96 (bookItems -> STRING : ( listItems ) , bookItems .)


state 185

    (38) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 31
    !               shift and go to state 32
    ID              shift and go to state 33
    FIND            shift and go to state 36
    RANDOM          shift and go to state 37
    (               shift and go to state 38
    {               shift and go to state 39
    [               shift and go to state 40
    STRING          shift and go to state 41
    NUMBER          shift and go to state 42
    FALSE           shift and go to state 43
    TRUE            shift and go to state 44

    expr                           shift and go to state 187
    call                           shift and go to state 30
    primitiveValue                 shift and go to state 34
    primary                        shift and go to state 35

state 186

    (37) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 188


state 187

    (38) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 189
    /               shift and go to state 71
    *               shift and go to state 72
    -               shift and go to state 73
    +               shift and go to state 74
    GREATER         shift and go to state 75
    GREATEREQ       shift and go to state 76
    LESSEQ          shift and go to state 77
    LESS            shift and go to state 78
    EQEQ            shift and go to state 79
    NOTEQ           shift and go to state 80
    AND             shift and go to state 81
    OR              shift and go to state 82


state 188

    (37) inothercaseStmt -> OTHERWISE { statementList } .
    PUT             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    TALK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    ID              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    $end            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)


state 189

    (38) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr SEP
    (57) buyStmt -> . BUY expr , expr , expr SEP
    (51) moveStmt -> . MOVE RIGHT SEP
    (52) moveStmt -> . MOVE LEFT SEP
    (53) moveStmt -> . MOVE DOWN SEP
    (54) moveStmt -> . MOVE UP SEP
    (55) moveStmt -> . MOVE SEP expr , expr SEP
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    PICK            shift and go to state 12
    STOP            shift and go to state 13
    RESTART         shift and go to state 14
    SELL            shift and go to state 15
    TALK            shift and go to state 18
    IN              shift and go to state 19
    FOREACH         shift and go to state 20
    REPEAT          shift and go to state 22
    LET             shift and go to state 23
    ID              shift and go to state 21
    BUY             shift and go to state 24
    MOVE            shift and go to state 25

    statementList                  shift and go to state 190
    empty                          shift and go to state 2
    statement                      shift and go to state 3
    primFuncStmt                   shift and go to state 4
    incaseStmt                     shift and go to state 5
    foreachStmt                    shift and go to state 6
    repeatStmt                     shift and go to state 7
    varAssign                      shift and go to state 8
    varDecl                        shift and go to state 9
    getter                         shift and go to state 10
    buyStmt                        shift and go to state 16
    moveStmt                       shift and go to state 17

state 190

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 191


state 191

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 177
    IN              shift and go to state 174
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    $end            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 192
    empty                          shift and go to state 176

state 192

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    $end            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for . in state 21 resolved as shift
shift/reduce conflict for . in state 33 resolved as shift
shift/reduce conflict for . in state 101 resolved as shift
shift/reduce conflict for / in state 141 resolved as shift
shift/reduce conflict for * in state 141 resolved as shift
shift/reduce conflict for - in state 141 resolved as shift
shift/reduce conflict for + in state 141 resolved as shift
shift/reduce conflict for GREATER in state 141 resolved as shift
shift/reduce conflict for GREATEREQ in state 141 resolved as shift
shift/reduce conflict for LESSEQ in state 141 resolved as shift
shift/reduce conflict for LESS in state 141 resolved as shift
shift/reduce conflict for EQEQ in state 141 resolved as shift
shift/reduce conflict for NOTEQ in state 141 resolved as shift
shift/reduce conflict for AND in state 141 resolved as shift
shift/reduce conflict for OR in state 141 resolved as shift
shift/reduce conflict for / in state 163 resolved as shift
shift/reduce conflict for * in state 163 resolved as shift
shift/reduce conflict for - in state 163 resolved as shift
shift/reduce conflict for + in state 163 resolved as shift
shift/reduce conflict for GREATER in state 163 resolved as shift
shift/reduce conflict for GREATEREQ in state 163 resolved as shift
shift/reduce conflict for LESSEQ in state 163 resolved as shift
shift/reduce conflict for LESS in state 163 resolved as shift
shift/reduce conflict for EQEQ in state 163 resolved as shift
shift/reduce conflict for NOTEQ in state 163 resolved as shift
shift/reduce conflict for AND in state 163 resolved as shift
shift/reduce conflict for OR in state 163 resolved as shift
shift/reduce conflict for IN in state 166 resolved as shift
shift/reduce conflict for IN in state 191 resolved as shift