Grammar:

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> PUT expr IN ID AT expr , expr SEP
Rule 17    envFunc -> RUN ID WITH expr ITERATIONS SEP
Rule 18    envFunc -> RUN ID SEP
Rule 19    envFunc -> RESET ID SEP
Rule 20    envBody -> varList
Rule 21    agentBody -> varList
Rule 22    behaveBody -> statementList
Rule 23    varList -> empty
Rule 24    varList -> varAssign varList
Rule 25    varList -> varDecl varList
Rule 26    statementList -> empty
Rule 27    statementList -> statement statementList
Rule 28    statement -> primFuncStmt
Rule 29    statement -> incaseStmt
Rule 30    statement -> foreachStmt
Rule 31    statement -> repeatStmt
Rule 32    statement -> varAssign
Rule 33    statement -> varDecl
Rule 34    statement -> expr SEP
Rule 35    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 36    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 37    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 38    inothercaseStmt -> empty
Rule 39    inothercaseStmt -> OTHERWISE { statementList }
Rule 40    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 41    primFuncStmt -> PUT expr , expr SEP
Rule 42    primFuncStmt -> PICK expr SEP
Rule 43    primFuncStmt -> STOP SEP
Rule 44    primFuncStmt -> RESTART BEHAVE SEP
Rule 45    primFuncStmt -> SELL expr , expr , expr SEP
Rule 46    primFuncStmt -> buyStmt SEP
Rule 47    primFuncStmt -> moveStmt SEP
Rule 48    primFuncStmt -> TALK expr SEP
Rule 49    moveStmt -> MOVE RIGHT
Rule 50    moveStmt -> MOVE LEFT
Rule 51    moveStmt -> MOVE DOWN
Rule 52    moveStmt -> MOVE UP
Rule 53    moveStmt -> MOVE expr , expr
Rule 54    buyStmt -> BUY expr
Rule 55    buyStmt -> BUY expr , expr , expr
Rule 56    expr -> call
Rule 57    expr -> - expr  [precedence=right, level=9]
Rule 58    expr -> ! expr  [precedence=right, level=10]
Rule 59    expr -> expr / expr  [precedence=left, level=8]
Rule 60    expr -> expr * expr  [precedence=left, level=8]
Rule 61    expr -> expr - expr  [precedence=left, level=7]
Rule 62    expr -> expr + expr  [precedence=left, level=7]
Rule 63    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 64    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 65    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 66    expr -> expr LESS expr  [precedence=left, level=5]
Rule 67    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 68    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 69    expr -> expr AND expr  [precedence=left, level=3]
Rule 70    expr -> expr OR expr  [precedence=left, level=2]
Rule 71    call -> ID dotTail
Rule 72    call -> primitiveValue
Rule 73    call -> primary
Rule 74    getter -> ID dotTail
Rule 75    dotTail -> empty
Rule 76    dotTail -> [ expr ] dotTail
Rule 77    dotTail -> . idTail dotTail
Rule 78    idTail -> listFunc
Rule 79    idTail -> ID
Rule 80    listFunc -> REVERSE
Rule 81    listFunc -> POP
Rule 82    listFunc -> PUSH expr
Rule 83    listFunc -> SIZE
Rule 84    primitiveValue -> FIND PEERS
Rule 85    primitiveValue -> FIND OBJECTS
Rule 86    primitiveValue -> RANDOM FROM expr TO expr
Rule 87    primary -> ( expr )
Rule 88    primary -> { bookItems }
Rule 89    primary -> [ listItems ]
Rule 90    primary -> STRING
Rule 91    primary -> NUMBER
Rule 92    primary -> FALSE
Rule 93    primary -> TRUE
Rule 94    listItems -> empty
Rule 95    listItems -> expr , listItems
Rule 96    bookItems -> empty
Rule 97    bookItems -> STRING : ( listItems ) , bookItems
Rule 98    type -> BOOK_TYPE
Rule 99    type -> LIST_TYPE
Rule 100   type -> STRING_TYPE
Rule 101   type -> BOOL_TYPE
Rule 102   type -> NUMBER_TYPE
Rule 103   empty -> <empty>

Unused terminals:

    SLASHASGN
    MINUSASGN
    INC
    STARASGN
    SHLASGN
    ANDASGN
    PLUSASGN
    ORASGN
    SHRASGN
    SHR
    SHL
    XORASGN
    DEC
    GET
    MODULOASGN

Terminals, with rules where they appear:

!                    : 58
(                    : 87 97
)                    : 87 97
*                    : 60
+                    : 62
,                    : 16 41 45 45 53 55 55 95 97
-                    : 57 61
.                    : 77
/                    : 59
:                    : 13 14 97
AGENT                : 11
AND                  : 69
ANDASGN              : 
ASSIGN               : 13 15
AT                   : 16
BEHAVE               : 12 44
BOOK_TYPE            : 98
BOOL_TYPE            : 101
BUY                  : 54 55
CASE                 : 37 40
DEC                  : 
DOWN                 : 51
ENV                  : 10
EQEQ                 : 67
FALSE                : 92
FIND                 : 84 85
FOREACH              : 36
FROM                 : 86
GET                  : 
GREATER              : 63
GREATEREQ            : 64
ID                   : 10 11 12 13 14 16 17 18 19 36 71 74 79
IN                   : 16 36 37 40
INC                  : 
ITERATIONS           : 17
LEFT                 : 50
LESS                 : 66
LESSEQ               : 65
LET                  : 13 14
LIST_TYPE            : 99
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 49 50 51 52 53
NOTEQ                : 68
NUMBER               : 91
NUMBER_TYPE          : 102
OBJECTS              : 85
OR                   : 70
ORASGN               : 
OTHER                : 40
OTHERWISE            : 39
PEERS                : 84
PICK                 : 42
PLUSASGN             : 
POP                  : 81
PUSH                 : 82
PUT                  : 16 41
RANDOM               : 86
REPEAT               : 35
RESET                : 19
RESTART              : 44
REVERSE              : 80
RIGHT                : 49
RUN                  : 17 18
SELL                 : 45
SEP                  : 13 14 15 16 17 18 19 34 41 42 43 44 45 46 47 48
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 83
SLASHASGN            : 
STARASGN             : 
STOP                 : 43
STRING               : 90 97
STRING_TYPE          : 100
TALK                 : 48
TO                   : 86
TRUE                 : 93
UP                   : 52
WHEN                 : 35
WITH                 : 17
XORASGN              : 
[                    : 76 89
]                    : 76 89
error                : 
{                    : 10 11 12 35 36 37 39 40 88
}                    : 10 11 12 35 36 37 39 40 88

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 88 97
buyStmt              : 46
call                 : 56
declaration          : 3
declarationList      : 1 3
dotTail              : 71 74 76 77
empty                : 2 23 26 38 75 94 96
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 16 17 34 35 36 37 40 41 41 42 45 45 45 48 53 53 54 55 55 55 57 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 76 82 86 86 87 95
foreachStmt          : 30
getter               : 15
idTail               : 77
incaseStmt           : 29
inothercaseStmt      : 37 40
listFunc             : 78
listItems            : 89 95 97
moveStmt             : 47
primFuncStmt         : 28
primary              : 73
primitiveValue       : 72
program              : 0
repeatStmt           : 31
statement            : 27
statementList        : 22 27 35 36 37 39 40
type                 : 13 14
varAssign            : 5 24 32
varDecl              : 6 25 33
varList              : 20 21 24 25


state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (103) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT expr IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RUN ID SEP
    (19) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 103 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    empty                          shift and go to state 3
    declaration                    shift and go to state 4
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 1

    (0) S' -> program .


state 2

    (1) program -> declarationList .
    $end            reduce using rule 1 (program -> declarationList .)


state 3

    (2) declarationList -> empty .
    $end            reduce using rule 2 (declarationList -> empty .)


state 4

    (3) declarationList -> declaration . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (103) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT expr IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RUN ID SEP
    (19) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 103 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    declaration                    shift and go to state 4
    declarationList                shift and go to state 20
    empty                          shift and go to state 3
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 5

    (4) declaration -> envFunc .
    PUT             reduce using rule 4 (declaration -> envFunc .)
    RUN             reduce using rule 4 (declaration -> envFunc .)
    RESET           reduce using rule 4 (declaration -> envFunc .)
    LET             reduce using rule 4 (declaration -> envFunc .)
    BEHAVE          reduce using rule 4 (declaration -> envFunc .)
    AGENT           reduce using rule 4 (declaration -> envFunc .)
    ENV             reduce using rule 4 (declaration -> envFunc .)
    ID              reduce using rule 4 (declaration -> envFunc .)
    $end            reduce using rule 4 (declaration -> envFunc .)


state 6

    (5) declaration -> varAssign .
    PUT             reduce using rule 5 (declaration -> varAssign .)
    RUN             reduce using rule 5 (declaration -> varAssign .)
    RESET           reduce using rule 5 (declaration -> varAssign .)
    LET             reduce using rule 5 (declaration -> varAssign .)
    BEHAVE          reduce using rule 5 (declaration -> varAssign .)
    AGENT           reduce using rule 5 (declaration -> varAssign .)
    ENV             reduce using rule 5 (declaration -> varAssign .)
    ID              reduce using rule 5 (declaration -> varAssign .)
    $end            reduce using rule 5 (declaration -> varAssign .)


state 7

    (6) declaration -> varDecl .
    PUT             reduce using rule 6 (declaration -> varDecl .)
    RUN             reduce using rule 6 (declaration -> varDecl .)
    RESET           reduce using rule 6 (declaration -> varDecl .)
    LET             reduce using rule 6 (declaration -> varDecl .)
    BEHAVE          reduce using rule 6 (declaration -> varDecl .)
    AGENT           reduce using rule 6 (declaration -> varDecl .)
    ENV             reduce using rule 6 (declaration -> varDecl .)
    ID              reduce using rule 6 (declaration -> varDecl .)
    $end            reduce using rule 6 (declaration -> varDecl .)


state 8

    (7) declaration -> behaveDecl .
    PUT             reduce using rule 7 (declaration -> behaveDecl .)
    RUN             reduce using rule 7 (declaration -> behaveDecl .)
    RESET           reduce using rule 7 (declaration -> behaveDecl .)
    LET             reduce using rule 7 (declaration -> behaveDecl .)
    BEHAVE          reduce using rule 7 (declaration -> behaveDecl .)
    AGENT           reduce using rule 7 (declaration -> behaveDecl .)
    ENV             reduce using rule 7 (declaration -> behaveDecl .)
    ID              reduce using rule 7 (declaration -> behaveDecl .)
    $end            reduce using rule 7 (declaration -> behaveDecl .)


state 9

    (8) declaration -> agentDecl .
    PUT             reduce using rule 8 (declaration -> agentDecl .)
    RUN             reduce using rule 8 (declaration -> agentDecl .)
    RESET           reduce using rule 8 (declaration -> agentDecl .)
    LET             reduce using rule 8 (declaration -> agentDecl .)
    BEHAVE          reduce using rule 8 (declaration -> agentDecl .)
    AGENT           reduce using rule 8 (declaration -> agentDecl .)
    ENV             reduce using rule 8 (declaration -> agentDecl .)
    ID              reduce using rule 8 (declaration -> agentDecl .)
    $end            reduce using rule 8 (declaration -> agentDecl .)


state 10

    (9) declaration -> envDecl .
    PUT             reduce using rule 9 (declaration -> envDecl .)
    RUN             reduce using rule 9 (declaration -> envDecl .)
    RESET           reduce using rule 9 (declaration -> envDecl .)
    LET             reduce using rule 9 (declaration -> envDecl .)
    BEHAVE          reduce using rule 9 (declaration -> envDecl .)
    AGENT           reduce using rule 9 (declaration -> envDecl .)
    ENV             reduce using rule 9 (declaration -> envDecl .)
    ID              reduce using rule 9 (declaration -> envDecl .)
    $end            reduce using rule 9 (declaration -> envDecl .)


state 11

    (16) envFunc -> PUT . expr IN ID AT expr , expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 21
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 12

    (74) getter -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . [ expr ] dotTail
    (77) dotTail -> . . idTail dotTail
    (103) empty -> .
    [               shift and go to state 39
    .               shift and go to state 40
    ASSIGN          reduce using rule 103 (empty -> .)

    dotTail                        shift and go to state 37
    empty                          shift and go to state 38

state 13

    (17) envFunc -> RUN . ID WITH expr ITERATIONS SEP
    (18) envFunc -> RUN . ID SEP
    ID              shift and go to state 41


state 14

    (19) envFunc -> RESET . ID SEP
    ID              shift and go to state 42


state 15

    (15) varAssign -> getter . ASSIGN expr SEP
    ASSIGN          shift and go to state 43


state 16

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 44


state 17

    (12) behaveDecl -> BEHAVE . ID { behaveBody }
    ID              shift and go to state 45


state 18

    (11) agentDecl -> AGENT . ID { agentBody }
    ID              shift and go to state 46


state 19

    (10) envDecl -> ENV . ID { envBody }
    ID              shift and go to state 47


state 20

    (3) declarationList -> declaration declarationList .
    $end            reduce using rule 3 (declarationList -> declaration declarationList .)


state 21

    (16) envFunc -> PUT expr . IN ID AT expr , expr SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              shift and go to state 48
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 22

    (71) call -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . [ expr ] dotTail
    (77) dotTail -> . . idTail dotTail
    (103) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 103 (empty -> .)
    /               reduce using rule 103 (empty -> .)
    *               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATEREQ       reduce using rule 103 (empty -> .)
    LESSEQ          reduce using rule 103 (empty -> .)
    LESS            reduce using rule 103 (empty -> .)
    EQEQ            reduce using rule 103 (empty -> .)
    NOTEQ           reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    ]               reduce using rule 103 (empty -> .)
    SEP             reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    ASSIGN          reduce using rule 103 (empty -> .)
    ITERATIONS      reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)

    dotTail                        shift and go to state 61
    empty                          shift and go to state 38

state 23

    (56) expr -> call .
    IN              reduce using rule 56 (expr -> call .)
    /               reduce using rule 56 (expr -> call .)
    *               reduce using rule 56 (expr -> call .)
    -               reduce using rule 56 (expr -> call .)
    +               reduce using rule 56 (expr -> call .)
    GREATER         reduce using rule 56 (expr -> call .)
    GREATEREQ       reduce using rule 56 (expr -> call .)
    LESSEQ          reduce using rule 56 (expr -> call .)
    LESS            reduce using rule 56 (expr -> call .)
    EQEQ            reduce using rule 56 (expr -> call .)
    NOTEQ           reduce using rule 56 (expr -> call .)
    AND             reduce using rule 56 (expr -> call .)
    OR              reduce using rule 56 (expr -> call .)
    )               reduce using rule 56 (expr -> call .)
    ,               reduce using rule 56 (expr -> call .)
    ]               reduce using rule 56 (expr -> call .)
    SEP             reduce using rule 56 (expr -> call .)
    TO              reduce using rule 56 (expr -> call .)
    [               reduce using rule 56 (expr -> call .)
    .               reduce using rule 56 (expr -> call .)
    ASSIGN          reduce using rule 56 (expr -> call .)
    ITERATIONS      reduce using rule 56 (expr -> call .)
    {               reduce using rule 56 (expr -> call .)


state 24

    (57) expr -> - . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 62
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 25

    (58) expr -> ! . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 63
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 26

    (72) call -> primitiveValue .
    IN              reduce using rule 72 (call -> primitiveValue .)
    /               reduce using rule 72 (call -> primitiveValue .)
    *               reduce using rule 72 (call -> primitiveValue .)
    -               reduce using rule 72 (call -> primitiveValue .)
    +               reduce using rule 72 (call -> primitiveValue .)
    GREATER         reduce using rule 72 (call -> primitiveValue .)
    GREATEREQ       reduce using rule 72 (call -> primitiveValue .)
    LESSEQ          reduce using rule 72 (call -> primitiveValue .)
    LESS            reduce using rule 72 (call -> primitiveValue .)
    EQEQ            reduce using rule 72 (call -> primitiveValue .)
    NOTEQ           reduce using rule 72 (call -> primitiveValue .)
    AND             reduce using rule 72 (call -> primitiveValue .)
    OR              reduce using rule 72 (call -> primitiveValue .)
    )               reduce using rule 72 (call -> primitiveValue .)
    ,               reduce using rule 72 (call -> primitiveValue .)
    ]               reduce using rule 72 (call -> primitiveValue .)
    SEP             reduce using rule 72 (call -> primitiveValue .)
    TO              reduce using rule 72 (call -> primitiveValue .)
    [               reduce using rule 72 (call -> primitiveValue .)
    .               reduce using rule 72 (call -> primitiveValue .)
    ASSIGN          reduce using rule 72 (call -> primitiveValue .)
    ITERATIONS      reduce using rule 72 (call -> primitiveValue .)
    {               reduce using rule 72 (call -> primitiveValue .)


state 27

    (73) call -> primary .
    IN              reduce using rule 73 (call -> primary .)
    /               reduce using rule 73 (call -> primary .)
    *               reduce using rule 73 (call -> primary .)
    -               reduce using rule 73 (call -> primary .)
    +               reduce using rule 73 (call -> primary .)
    GREATER         reduce using rule 73 (call -> primary .)
    GREATEREQ       reduce using rule 73 (call -> primary .)
    LESSEQ          reduce using rule 73 (call -> primary .)
    LESS            reduce using rule 73 (call -> primary .)
    EQEQ            reduce using rule 73 (call -> primary .)
    NOTEQ           reduce using rule 73 (call -> primary .)
    AND             reduce using rule 73 (call -> primary .)
    OR              reduce using rule 73 (call -> primary .)
    )               reduce using rule 73 (call -> primary .)
    ,               reduce using rule 73 (call -> primary .)
    ]               reduce using rule 73 (call -> primary .)
    SEP             reduce using rule 73 (call -> primary .)
    TO              reduce using rule 73 (call -> primary .)
    [               reduce using rule 73 (call -> primary .)
    .               reduce using rule 73 (call -> primary .)
    ASSIGN          reduce using rule 73 (call -> primary .)
    ITERATIONS      reduce using rule 73 (call -> primary .)
    {               reduce using rule 73 (call -> primary .)


state 28

    (84) primitiveValue -> FIND . PEERS
    (85) primitiveValue -> FIND . OBJECTS
    PEERS           shift and go to state 64
    OBJECTS         shift and go to state 65


state 29

    (86) primitiveValue -> RANDOM . FROM expr TO expr
    FROM            shift and go to state 66


state 30

    (87) primary -> ( . expr )
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 67
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 31

    (88) primary -> { . bookItems }
    (96) bookItems -> . empty
    (97) bookItems -> . STRING : ( listItems ) , bookItems
    (103) empty -> .
    STRING          shift and go to state 70
    }               reduce using rule 103 (empty -> .)

    bookItems                      shift and go to state 68
    empty                          shift and go to state 69

state 32

    (89) primary -> [ . listItems ]
    (94) listItems -> . empty
    (95) listItems -> . expr , listItems
    (103) empty -> .
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    ]               reduce using rule 103 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    listItems                      shift and go to state 71
    empty                          shift and go to state 72
    expr                           shift and go to state 73
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 33

    (90) primary -> STRING .
    IN              reduce using rule 90 (primary -> STRING .)
    /               reduce using rule 90 (primary -> STRING .)
    *               reduce using rule 90 (primary -> STRING .)
    -               reduce using rule 90 (primary -> STRING .)
    +               reduce using rule 90 (primary -> STRING .)
    GREATER         reduce using rule 90 (primary -> STRING .)
    GREATEREQ       reduce using rule 90 (primary -> STRING .)
    LESSEQ          reduce using rule 90 (primary -> STRING .)
    LESS            reduce using rule 90 (primary -> STRING .)
    EQEQ            reduce using rule 90 (primary -> STRING .)
    NOTEQ           reduce using rule 90 (primary -> STRING .)
    AND             reduce using rule 90 (primary -> STRING .)
    OR              reduce using rule 90 (primary -> STRING .)
    )               reduce using rule 90 (primary -> STRING .)
    ,               reduce using rule 90 (primary -> STRING .)
    ]               reduce using rule 90 (primary -> STRING .)
    SEP             reduce using rule 90 (primary -> STRING .)
    TO              reduce using rule 90 (primary -> STRING .)
    [               reduce using rule 90 (primary -> STRING .)
    .               reduce using rule 90 (primary -> STRING .)
    ASSIGN          reduce using rule 90 (primary -> STRING .)
    ITERATIONS      reduce using rule 90 (primary -> STRING .)
    {               reduce using rule 90 (primary -> STRING .)


state 34

    (91) primary -> NUMBER .
    IN              reduce using rule 91 (primary -> NUMBER .)
    /               reduce using rule 91 (primary -> NUMBER .)
    *               reduce using rule 91 (primary -> NUMBER .)
    -               reduce using rule 91 (primary -> NUMBER .)
    +               reduce using rule 91 (primary -> NUMBER .)
    GREATER         reduce using rule 91 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 91 (primary -> NUMBER .)
    LESSEQ          reduce using rule 91 (primary -> NUMBER .)
    LESS            reduce using rule 91 (primary -> NUMBER .)
    EQEQ            reduce using rule 91 (primary -> NUMBER .)
    NOTEQ           reduce using rule 91 (primary -> NUMBER .)
    AND             reduce using rule 91 (primary -> NUMBER .)
    OR              reduce using rule 91 (primary -> NUMBER .)
    )               reduce using rule 91 (primary -> NUMBER .)
    ,               reduce using rule 91 (primary -> NUMBER .)
    ]               reduce using rule 91 (primary -> NUMBER .)
    SEP             reduce using rule 91 (primary -> NUMBER .)
    TO              reduce using rule 91 (primary -> NUMBER .)
    [               reduce using rule 91 (primary -> NUMBER .)
    .               reduce using rule 91 (primary -> NUMBER .)
    ASSIGN          reduce using rule 91 (primary -> NUMBER .)
    ITERATIONS      reduce using rule 91 (primary -> NUMBER .)
    {               reduce using rule 91 (primary -> NUMBER .)


state 35

    (92) primary -> FALSE .
    IN              reduce using rule 92 (primary -> FALSE .)
    /               reduce using rule 92 (primary -> FALSE .)
    *               reduce using rule 92 (primary -> FALSE .)
    -               reduce using rule 92 (primary -> FALSE .)
    +               reduce using rule 92 (primary -> FALSE .)
    GREATER         reduce using rule 92 (primary -> FALSE .)
    GREATEREQ       reduce using rule 92 (primary -> FALSE .)
    LESSEQ          reduce using rule 92 (primary -> FALSE .)
    LESS            reduce using rule 92 (primary -> FALSE .)
    EQEQ            reduce using rule 92 (primary -> FALSE .)
    NOTEQ           reduce using rule 92 (primary -> FALSE .)
    AND             reduce using rule 92 (primary -> FALSE .)
    OR              reduce using rule 92 (primary -> FALSE .)
    )               reduce using rule 92 (primary -> FALSE .)
    ,               reduce using rule 92 (primary -> FALSE .)
    ]               reduce using rule 92 (primary -> FALSE .)
    SEP             reduce using rule 92 (primary -> FALSE .)
    TO              reduce using rule 92 (primary -> FALSE .)
    [               reduce using rule 92 (primary -> FALSE .)
    .               reduce using rule 92 (primary -> FALSE .)
    ASSIGN          reduce using rule 92 (primary -> FALSE .)
    ITERATIONS      reduce using rule 92 (primary -> FALSE .)
    {               reduce using rule 92 (primary -> FALSE .)


state 36

    (93) primary -> TRUE .
    IN              reduce using rule 93 (primary -> TRUE .)
    /               reduce using rule 93 (primary -> TRUE .)
    *               reduce using rule 93 (primary -> TRUE .)
    -               reduce using rule 93 (primary -> TRUE .)
    +               reduce using rule 93 (primary -> TRUE .)
    GREATER         reduce using rule 93 (primary -> TRUE .)
    GREATEREQ       reduce using rule 93 (primary -> TRUE .)
    LESSEQ          reduce using rule 93 (primary -> TRUE .)
    LESS            reduce using rule 93 (primary -> TRUE .)
    EQEQ            reduce using rule 93 (primary -> TRUE .)
    NOTEQ           reduce using rule 93 (primary -> TRUE .)
    AND             reduce using rule 93 (primary -> TRUE .)
    OR              reduce using rule 93 (primary -> TRUE .)
    )               reduce using rule 93 (primary -> TRUE .)
    ,               reduce using rule 93 (primary -> TRUE .)
    ]               reduce using rule 93 (primary -> TRUE .)
    SEP             reduce using rule 93 (primary -> TRUE .)
    TO              reduce using rule 93 (primary -> TRUE .)
    [               reduce using rule 93 (primary -> TRUE .)
    .               reduce using rule 93 (primary -> TRUE .)
    ASSIGN          reduce using rule 93 (primary -> TRUE .)
    ITERATIONS      reduce using rule 93 (primary -> TRUE .)
    {               reduce using rule 93 (primary -> TRUE .)


state 37

    (74) getter -> ID dotTail .
    ASSIGN          reduce using rule 74 (getter -> ID dotTail .)


state 38

    (75) dotTail -> empty .
    ASSIGN          reduce using rule 75 (dotTail -> empty .)
    IN              reduce using rule 75 (dotTail -> empty .)
    /               reduce using rule 75 (dotTail -> empty .)
    *               reduce using rule 75 (dotTail -> empty .)
    -               reduce using rule 75 (dotTail -> empty .)
    +               reduce using rule 75 (dotTail -> empty .)
    GREATER         reduce using rule 75 (dotTail -> empty .)
    GREATEREQ       reduce using rule 75 (dotTail -> empty .)
    LESSEQ          reduce using rule 75 (dotTail -> empty .)
    LESS            reduce using rule 75 (dotTail -> empty .)
    EQEQ            reduce using rule 75 (dotTail -> empty .)
    NOTEQ           reduce using rule 75 (dotTail -> empty .)
    AND             reduce using rule 75 (dotTail -> empty .)
    OR              reduce using rule 75 (dotTail -> empty .)
    )               reduce using rule 75 (dotTail -> empty .)
    ,               reduce using rule 75 (dotTail -> empty .)
    ]               reduce using rule 75 (dotTail -> empty .)
    SEP             reduce using rule 75 (dotTail -> empty .)
    TO              reduce using rule 75 (dotTail -> empty .)
    [               reduce using rule 75 (dotTail -> empty .)
    .               reduce using rule 75 (dotTail -> empty .)
    ITERATIONS      reduce using rule 75 (dotTail -> empty .)
    {               reduce using rule 75 (dotTail -> empty .)


state 39

    (76) dotTail -> [ . expr ] dotTail
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 74
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 40

    (77) dotTail -> . . idTail dotTail
    (78) idTail -> . listFunc
    (79) idTail -> . ID
    (80) listFunc -> . REVERSE
    (81) listFunc -> . POP
    (82) listFunc -> . PUSH expr
    (83) listFunc -> . SIZE
    ID              shift and go to state 77
    REVERSE         shift and go to state 78
    POP             shift and go to state 79
    PUSH            shift and go to state 80
    SIZE            shift and go to state 81

    idTail                         shift and go to state 75
    listFunc                       shift and go to state 76

state 41

    (17) envFunc -> RUN ID . WITH expr ITERATIONS SEP
    (18) envFunc -> RUN ID . SEP
    WITH            shift and go to state 82
    SEP             shift and go to state 83


state 42

    (19) envFunc -> RESET ID . SEP
    SEP             shift and go to state 84


state 43

    (15) varAssign -> getter ASSIGN . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 85
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 44

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 86


state 45

    (12) behaveDecl -> BEHAVE ID . { behaveBody }
    {               shift and go to state 87


state 46

    (11) agentDecl -> AGENT ID . { agentBody }
    {               shift and go to state 88


state 47

    (10) envDecl -> ENV ID . { envBody }
    {               shift and go to state 89


state 48

    (16) envFunc -> PUT expr IN . ID AT expr , expr SEP
    ID              shift and go to state 90


state 49

    (59) expr -> expr / . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 91
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 50

    (60) expr -> expr * . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 92
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 51

    (61) expr -> expr - . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 93
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 52

    (62) expr -> expr + . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 94
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 53

    (63) expr -> expr GREATER . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 95
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 54

    (64) expr -> expr GREATEREQ . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 96
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 55

    (65) expr -> expr LESSEQ . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 97
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 56

    (66) expr -> expr LESS . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 98
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 57

    (67) expr -> expr EQEQ . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 99
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 58

    (68) expr -> expr NOTEQ . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 100
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 59

    (69) expr -> expr AND . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 101
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 60

    (70) expr -> expr OR . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 102
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 61

    (71) call -> ID dotTail .
    IN              reduce using rule 71 (call -> ID dotTail .)
    /               reduce using rule 71 (call -> ID dotTail .)
    *               reduce using rule 71 (call -> ID dotTail .)
    -               reduce using rule 71 (call -> ID dotTail .)
    +               reduce using rule 71 (call -> ID dotTail .)
    GREATER         reduce using rule 71 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 71 (call -> ID dotTail .)
    LESSEQ          reduce using rule 71 (call -> ID dotTail .)
    LESS            reduce using rule 71 (call -> ID dotTail .)
    EQEQ            reduce using rule 71 (call -> ID dotTail .)
    NOTEQ           reduce using rule 71 (call -> ID dotTail .)
    AND             reduce using rule 71 (call -> ID dotTail .)
    OR              reduce using rule 71 (call -> ID dotTail .)
    )               reduce using rule 71 (call -> ID dotTail .)
    ,               reduce using rule 71 (call -> ID dotTail .)
    ]               reduce using rule 71 (call -> ID dotTail .)
    SEP             reduce using rule 71 (call -> ID dotTail .)
    TO              reduce using rule 71 (call -> ID dotTail .)
    [               reduce using rule 71 (call -> ID dotTail .)
    .               reduce using rule 71 (call -> ID dotTail .)
    ASSIGN          reduce using rule 71 (call -> ID dotTail .)
    ITERATIONS      reduce using rule 71 (call -> ID dotTail .)
    {               reduce using rule 71 (call -> ID dotTail .)


state 62

    (57) expr -> - expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 57 (expr -> - expr .)
    /               reduce using rule 57 (expr -> - expr .)
    *               reduce using rule 57 (expr -> - expr .)
    -               reduce using rule 57 (expr -> - expr .)
    +               reduce using rule 57 (expr -> - expr .)
    GREATER         reduce using rule 57 (expr -> - expr .)
    GREATEREQ       reduce using rule 57 (expr -> - expr .)
    LESSEQ          reduce using rule 57 (expr -> - expr .)
    LESS            reduce using rule 57 (expr -> - expr .)
    EQEQ            reduce using rule 57 (expr -> - expr .)
    NOTEQ           reduce using rule 57 (expr -> - expr .)
    AND             reduce using rule 57 (expr -> - expr .)
    OR              reduce using rule 57 (expr -> - expr .)
    )               reduce using rule 57 (expr -> - expr .)
    ,               reduce using rule 57 (expr -> - expr .)
    ]               reduce using rule 57 (expr -> - expr .)
    SEP             reduce using rule 57 (expr -> - expr .)
    TO              reduce using rule 57 (expr -> - expr .)
    [               reduce using rule 57 (expr -> - expr .)
    .               reduce using rule 57 (expr -> - expr .)
    ASSIGN          reduce using rule 57 (expr -> - expr .)
    ITERATIONS      reduce using rule 57 (expr -> - expr .)
    {               reduce using rule 57 (expr -> - expr .)


state 63

    (58) expr -> ! expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 58 (expr -> ! expr .)
    /               reduce using rule 58 (expr -> ! expr .)
    *               reduce using rule 58 (expr -> ! expr .)
    -               reduce using rule 58 (expr -> ! expr .)
    +               reduce using rule 58 (expr -> ! expr .)
    GREATER         reduce using rule 58 (expr -> ! expr .)
    GREATEREQ       reduce using rule 58 (expr -> ! expr .)
    LESSEQ          reduce using rule 58 (expr -> ! expr .)
    LESS            reduce using rule 58 (expr -> ! expr .)
    EQEQ            reduce using rule 58 (expr -> ! expr .)
    NOTEQ           reduce using rule 58 (expr -> ! expr .)
    AND             reduce using rule 58 (expr -> ! expr .)
    OR              reduce using rule 58 (expr -> ! expr .)
    )               reduce using rule 58 (expr -> ! expr .)
    ,               reduce using rule 58 (expr -> ! expr .)
    ]               reduce using rule 58 (expr -> ! expr .)
    SEP             reduce using rule 58 (expr -> ! expr .)
    TO              reduce using rule 58 (expr -> ! expr .)
    [               reduce using rule 58 (expr -> ! expr .)
    .               reduce using rule 58 (expr -> ! expr .)
    ASSIGN          reduce using rule 58 (expr -> ! expr .)
    ITERATIONS      reduce using rule 58 (expr -> ! expr .)
    {               reduce using rule 58 (expr -> ! expr .)


state 64

    (84) primitiveValue -> FIND PEERS .
    IN              reduce using rule 84 (primitiveValue -> FIND PEERS .)
    /               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    *               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    -               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    +               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    GREATER         reduce using rule 84 (primitiveValue -> FIND PEERS .)
    GREATEREQ       reduce using rule 84 (primitiveValue -> FIND PEERS .)
    LESSEQ          reduce using rule 84 (primitiveValue -> FIND PEERS .)
    LESS            reduce using rule 84 (primitiveValue -> FIND PEERS .)
    EQEQ            reduce using rule 84 (primitiveValue -> FIND PEERS .)
    NOTEQ           reduce using rule 84 (primitiveValue -> FIND PEERS .)
    AND             reduce using rule 84 (primitiveValue -> FIND PEERS .)
    OR              reduce using rule 84 (primitiveValue -> FIND PEERS .)
    )               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    ,               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    ]               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    SEP             reduce using rule 84 (primitiveValue -> FIND PEERS .)
    TO              reduce using rule 84 (primitiveValue -> FIND PEERS .)
    [               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    .               reduce using rule 84 (primitiveValue -> FIND PEERS .)
    ASSIGN          reduce using rule 84 (primitiveValue -> FIND PEERS .)
    ITERATIONS      reduce using rule 84 (primitiveValue -> FIND PEERS .)
    {               reduce using rule 84 (primitiveValue -> FIND PEERS .)


state 65

    (85) primitiveValue -> FIND OBJECTS .
    IN              reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    /               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    *               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    -               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    +               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    GREATER         reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    GREATEREQ       reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    LESSEQ          reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    LESS            reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    EQEQ            reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    NOTEQ           reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    AND             reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    OR              reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    )               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    ,               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    ]               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    SEP             reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    TO              reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    [               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    .               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    ASSIGN          reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    ITERATIONS      reduce using rule 85 (primitiveValue -> FIND OBJECTS .)
    {               reduce using rule 85 (primitiveValue -> FIND OBJECTS .)


state 66

    (86) primitiveValue -> RANDOM FROM . expr TO expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 103
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 67

    (87) primary -> ( expr . )
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    )               shift and go to state 104
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 68

    (88) primary -> { bookItems . }
    }               shift and go to state 105


state 69

    (96) bookItems -> empty .
    }               reduce using rule 96 (bookItems -> empty .)


state 70

    (97) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 106


state 71

    (89) primary -> [ listItems . ]
    ]               shift and go to state 107


state 72

    (94) listItems -> empty .
    ]               reduce using rule 94 (listItems -> empty .)
    )               reduce using rule 94 (listItems -> empty .)


state 73

    (95) listItems -> expr . , listItems
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 108
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 74

    (76) dotTail -> [ expr . ] dotTail
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ]               shift and go to state 109
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 75

    (77) dotTail -> . idTail . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . [ expr ] dotTail
    (77) dotTail -> . . idTail dotTail
    (103) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 103 (empty -> .)
    /               reduce using rule 103 (empty -> .)
    *               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATEREQ       reduce using rule 103 (empty -> .)
    LESSEQ          reduce using rule 103 (empty -> .)
    LESS            reduce using rule 103 (empty -> .)
    EQEQ            reduce using rule 103 (empty -> .)
    NOTEQ           reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    ]               reduce using rule 103 (empty -> .)
    SEP             reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    ASSIGN          reduce using rule 103 (empty -> .)
    ITERATIONS      reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)

    dotTail                        shift and go to state 110
    empty                          shift and go to state 38

state 76

    (78) idTail -> listFunc .
    IN              reduce using rule 78 (idTail -> listFunc .)
    /               reduce using rule 78 (idTail -> listFunc .)
    *               reduce using rule 78 (idTail -> listFunc .)
    -               reduce using rule 78 (idTail -> listFunc .)
    +               reduce using rule 78 (idTail -> listFunc .)
    GREATER         reduce using rule 78 (idTail -> listFunc .)
    GREATEREQ       reduce using rule 78 (idTail -> listFunc .)
    LESSEQ          reduce using rule 78 (idTail -> listFunc .)
    LESS            reduce using rule 78 (idTail -> listFunc .)
    EQEQ            reduce using rule 78 (idTail -> listFunc .)
    NOTEQ           reduce using rule 78 (idTail -> listFunc .)
    AND             reduce using rule 78 (idTail -> listFunc .)
    OR              reduce using rule 78 (idTail -> listFunc .)
    )               reduce using rule 78 (idTail -> listFunc .)
    ,               reduce using rule 78 (idTail -> listFunc .)
    ]               reduce using rule 78 (idTail -> listFunc .)
    SEP             reduce using rule 78 (idTail -> listFunc .)
    TO              reduce using rule 78 (idTail -> listFunc .)
    [               reduce using rule 78 (idTail -> listFunc .)
    .               reduce using rule 78 (idTail -> listFunc .)
    ASSIGN          reduce using rule 78 (idTail -> listFunc .)
    ITERATIONS      reduce using rule 78 (idTail -> listFunc .)
    {               reduce using rule 78 (idTail -> listFunc .)


state 77

    (79) idTail -> ID .
    IN              reduce using rule 79 (idTail -> ID .)
    /               reduce using rule 79 (idTail -> ID .)
    *               reduce using rule 79 (idTail -> ID .)
    -               reduce using rule 79 (idTail -> ID .)
    +               reduce using rule 79 (idTail -> ID .)
    GREATER         reduce using rule 79 (idTail -> ID .)
    GREATEREQ       reduce using rule 79 (idTail -> ID .)
    LESSEQ          reduce using rule 79 (idTail -> ID .)
    LESS            reduce using rule 79 (idTail -> ID .)
    EQEQ            reduce using rule 79 (idTail -> ID .)
    NOTEQ           reduce using rule 79 (idTail -> ID .)
    AND             reduce using rule 79 (idTail -> ID .)
    OR              reduce using rule 79 (idTail -> ID .)
    )               reduce using rule 79 (idTail -> ID .)
    ,               reduce using rule 79 (idTail -> ID .)
    ]               reduce using rule 79 (idTail -> ID .)
    SEP             reduce using rule 79 (idTail -> ID .)
    TO              reduce using rule 79 (idTail -> ID .)
    [               reduce using rule 79 (idTail -> ID .)
    .               reduce using rule 79 (idTail -> ID .)
    ASSIGN          reduce using rule 79 (idTail -> ID .)
    ITERATIONS      reduce using rule 79 (idTail -> ID .)
    {               reduce using rule 79 (idTail -> ID .)


state 78

    (80) listFunc -> REVERSE .
    IN              reduce using rule 80 (listFunc -> REVERSE .)
    /               reduce using rule 80 (listFunc -> REVERSE .)
    *               reduce using rule 80 (listFunc -> REVERSE .)
    -               reduce using rule 80 (listFunc -> REVERSE .)
    +               reduce using rule 80 (listFunc -> REVERSE .)
    GREATER         reduce using rule 80 (listFunc -> REVERSE .)
    GREATEREQ       reduce using rule 80 (listFunc -> REVERSE .)
    LESSEQ          reduce using rule 80 (listFunc -> REVERSE .)
    LESS            reduce using rule 80 (listFunc -> REVERSE .)
    EQEQ            reduce using rule 80 (listFunc -> REVERSE .)
    NOTEQ           reduce using rule 80 (listFunc -> REVERSE .)
    AND             reduce using rule 80 (listFunc -> REVERSE .)
    OR              reduce using rule 80 (listFunc -> REVERSE .)
    )               reduce using rule 80 (listFunc -> REVERSE .)
    ,               reduce using rule 80 (listFunc -> REVERSE .)
    ]               reduce using rule 80 (listFunc -> REVERSE .)
    SEP             reduce using rule 80 (listFunc -> REVERSE .)
    TO              reduce using rule 80 (listFunc -> REVERSE .)
    [               reduce using rule 80 (listFunc -> REVERSE .)
    .               reduce using rule 80 (listFunc -> REVERSE .)
    ASSIGN          reduce using rule 80 (listFunc -> REVERSE .)
    ITERATIONS      reduce using rule 80 (listFunc -> REVERSE .)
    {               reduce using rule 80 (listFunc -> REVERSE .)


state 79

    (81) listFunc -> POP .
    IN              reduce using rule 81 (listFunc -> POP .)
    /               reduce using rule 81 (listFunc -> POP .)
    *               reduce using rule 81 (listFunc -> POP .)
    -               reduce using rule 81 (listFunc -> POP .)
    +               reduce using rule 81 (listFunc -> POP .)
    GREATER         reduce using rule 81 (listFunc -> POP .)
    GREATEREQ       reduce using rule 81 (listFunc -> POP .)
    LESSEQ          reduce using rule 81 (listFunc -> POP .)
    LESS            reduce using rule 81 (listFunc -> POP .)
    EQEQ            reduce using rule 81 (listFunc -> POP .)
    NOTEQ           reduce using rule 81 (listFunc -> POP .)
    AND             reduce using rule 81 (listFunc -> POP .)
    OR              reduce using rule 81 (listFunc -> POP .)
    )               reduce using rule 81 (listFunc -> POP .)
    ,               reduce using rule 81 (listFunc -> POP .)
    ]               reduce using rule 81 (listFunc -> POP .)
    SEP             reduce using rule 81 (listFunc -> POP .)
    TO              reduce using rule 81 (listFunc -> POP .)
    [               reduce using rule 81 (listFunc -> POP .)
    .               reduce using rule 81 (listFunc -> POP .)
    ASSIGN          reduce using rule 81 (listFunc -> POP .)
    ITERATIONS      reduce using rule 81 (listFunc -> POP .)
    {               reduce using rule 81 (listFunc -> POP .)


state 80

    (82) listFunc -> PUSH . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 111
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 81

    (83) listFunc -> SIZE .
    IN              reduce using rule 83 (listFunc -> SIZE .)
    /               reduce using rule 83 (listFunc -> SIZE .)
    *               reduce using rule 83 (listFunc -> SIZE .)
    -               reduce using rule 83 (listFunc -> SIZE .)
    +               reduce using rule 83 (listFunc -> SIZE .)
    GREATER         reduce using rule 83 (listFunc -> SIZE .)
    GREATEREQ       reduce using rule 83 (listFunc -> SIZE .)
    LESSEQ          reduce using rule 83 (listFunc -> SIZE .)
    LESS            reduce using rule 83 (listFunc -> SIZE .)
    EQEQ            reduce using rule 83 (listFunc -> SIZE .)
    NOTEQ           reduce using rule 83 (listFunc -> SIZE .)
    AND             reduce using rule 83 (listFunc -> SIZE .)
    OR              reduce using rule 83 (listFunc -> SIZE .)
    )               reduce using rule 83 (listFunc -> SIZE .)
    ,               reduce using rule 83 (listFunc -> SIZE .)
    ]               reduce using rule 83 (listFunc -> SIZE .)
    SEP             reduce using rule 83 (listFunc -> SIZE .)
    TO              reduce using rule 83 (listFunc -> SIZE .)
    [               reduce using rule 83 (listFunc -> SIZE .)
    .               reduce using rule 83 (listFunc -> SIZE .)
    ASSIGN          reduce using rule 83 (listFunc -> SIZE .)
    ITERATIONS      reduce using rule 83 (listFunc -> SIZE .)
    {               reduce using rule 83 (listFunc -> SIZE .)


state 82

    (17) envFunc -> RUN ID WITH . expr ITERATIONS SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 112
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 83

    (18) envFunc -> RUN ID SEP .
    PUT             reduce using rule 18 (envFunc -> RUN ID SEP .)
    RUN             reduce using rule 18 (envFunc -> RUN ID SEP .)
    RESET           reduce using rule 18 (envFunc -> RUN ID SEP .)
    LET             reduce using rule 18 (envFunc -> RUN ID SEP .)
    BEHAVE          reduce using rule 18 (envFunc -> RUN ID SEP .)
    AGENT           reduce using rule 18 (envFunc -> RUN ID SEP .)
    ENV             reduce using rule 18 (envFunc -> RUN ID SEP .)
    ID              reduce using rule 18 (envFunc -> RUN ID SEP .)
    $end            reduce using rule 18 (envFunc -> RUN ID SEP .)


state 84

    (19) envFunc -> RESET ID SEP .
    PUT             reduce using rule 19 (envFunc -> RESET ID SEP .)
    RUN             reduce using rule 19 (envFunc -> RESET ID SEP .)
    RESET           reduce using rule 19 (envFunc -> RESET ID SEP .)
    LET             reduce using rule 19 (envFunc -> RESET ID SEP .)
    BEHAVE          reduce using rule 19 (envFunc -> RESET ID SEP .)
    AGENT           reduce using rule 19 (envFunc -> RESET ID SEP .)
    ENV             reduce using rule 19 (envFunc -> RESET ID SEP .)
    ID              reduce using rule 19 (envFunc -> RESET ID SEP .)
    $end            reduce using rule 19 (envFunc -> RESET ID SEP .)


state 85

    (15) varAssign -> getter ASSIGN expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 113
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 86

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (98) type -> . BOOK_TYPE
    (99) type -> . LIST_TYPE
    (100) type -> . STRING_TYPE
    (101) type -> . BOOL_TYPE
    (102) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 115
    LIST_TYPE       shift and go to state 116
    STRING_TYPE     shift and go to state 117
    BOOL_TYPE       shift and go to state 118
    NUMBER_TYPE     shift and go to state 119

    type                           shift and go to state 114

state 87

    (12) behaveDecl -> BEHAVE ID { . behaveBody }
    (22) behaveBody -> . statementList
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    behaveBody                     shift and go to state 121
    statementList                  shift and go to state 122
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    expr                           shift and go to state 131
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 88

    (11) agentDecl -> AGENT ID { . agentBody }
    (21) agentBody -> . varList
    (23) varList -> . empty
    (24) varList -> . varAssign varList
    (25) varList -> . varDecl varList
    (103) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 103 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    agentBody                      shift and go to state 145
    varList                        shift and go to state 146
    empty                          shift and go to state 147
    varAssign                      shift and go to state 148
    varDecl                        shift and go to state 149
    getter                         shift and go to state 15

state 89

    (10) envDecl -> ENV ID { . envBody }
    (20) envBody -> . varList
    (23) varList -> . empty
    (24) varList -> . varAssign varList
    (25) varList -> . varDecl varList
    (103) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 103 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    envBody                        shift and go to state 150
    varList                        shift and go to state 151
    empty                          shift and go to state 147
    varAssign                      shift and go to state 148
    varDecl                        shift and go to state 149
    getter                         shift and go to state 15

state 90

    (16) envFunc -> PUT expr IN ID . AT expr , expr SEP
    AT              shift and go to state 152


state 91

    (59) expr -> expr / expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 59 (expr -> expr / expr .)
    /               reduce using rule 59 (expr -> expr / expr .)
    *               reduce using rule 59 (expr -> expr / expr .)
    -               reduce using rule 59 (expr -> expr / expr .)
    +               reduce using rule 59 (expr -> expr / expr .)
    GREATER         reduce using rule 59 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 59 (expr -> expr / expr .)
    LESSEQ          reduce using rule 59 (expr -> expr / expr .)
    LESS            reduce using rule 59 (expr -> expr / expr .)
    EQEQ            reduce using rule 59 (expr -> expr / expr .)
    NOTEQ           reduce using rule 59 (expr -> expr / expr .)
    AND             reduce using rule 59 (expr -> expr / expr .)
    OR              reduce using rule 59 (expr -> expr / expr .)
    )               reduce using rule 59 (expr -> expr / expr .)
    ,               reduce using rule 59 (expr -> expr / expr .)
    ]               reduce using rule 59 (expr -> expr / expr .)
    SEP             reduce using rule 59 (expr -> expr / expr .)
    TO              reduce using rule 59 (expr -> expr / expr .)
    [               reduce using rule 59 (expr -> expr / expr .)
    .               reduce using rule 59 (expr -> expr / expr .)
    ASSIGN          reduce using rule 59 (expr -> expr / expr .)
    ITERATIONS      reduce using rule 59 (expr -> expr / expr .)
    {               reduce using rule 59 (expr -> expr / expr .)


state 92

    (60) expr -> expr * expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 60 (expr -> expr * expr .)
    /               reduce using rule 60 (expr -> expr * expr .)
    *               reduce using rule 60 (expr -> expr * expr .)
    -               reduce using rule 60 (expr -> expr * expr .)
    +               reduce using rule 60 (expr -> expr * expr .)
    GREATER         reduce using rule 60 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 60 (expr -> expr * expr .)
    LESSEQ          reduce using rule 60 (expr -> expr * expr .)
    LESS            reduce using rule 60 (expr -> expr * expr .)
    EQEQ            reduce using rule 60 (expr -> expr * expr .)
    NOTEQ           reduce using rule 60 (expr -> expr * expr .)
    AND             reduce using rule 60 (expr -> expr * expr .)
    OR              reduce using rule 60 (expr -> expr * expr .)
    )               reduce using rule 60 (expr -> expr * expr .)
    ,               reduce using rule 60 (expr -> expr * expr .)
    ]               reduce using rule 60 (expr -> expr * expr .)
    SEP             reduce using rule 60 (expr -> expr * expr .)
    TO              reduce using rule 60 (expr -> expr * expr .)
    [               reduce using rule 60 (expr -> expr * expr .)
    .               reduce using rule 60 (expr -> expr * expr .)
    ASSIGN          reduce using rule 60 (expr -> expr * expr .)
    ITERATIONS      reduce using rule 60 (expr -> expr * expr .)
    {               reduce using rule 60 (expr -> expr * expr .)


state 93

    (61) expr -> expr - expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 61 (expr -> expr - expr .)
    -               reduce using rule 61 (expr -> expr - expr .)
    +               reduce using rule 61 (expr -> expr - expr .)
    GREATER         reduce using rule 61 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr - expr .)
    LESSEQ          reduce using rule 61 (expr -> expr - expr .)
    LESS            reduce using rule 61 (expr -> expr - expr .)
    EQEQ            reduce using rule 61 (expr -> expr - expr .)
    NOTEQ           reduce using rule 61 (expr -> expr - expr .)
    AND             reduce using rule 61 (expr -> expr - expr .)
    OR              reduce using rule 61 (expr -> expr - expr .)
    )               reduce using rule 61 (expr -> expr - expr .)
    ,               reduce using rule 61 (expr -> expr - expr .)
    ]               reduce using rule 61 (expr -> expr - expr .)
    SEP             reduce using rule 61 (expr -> expr - expr .)
    TO              reduce using rule 61 (expr -> expr - expr .)
    [               reduce using rule 61 (expr -> expr - expr .)
    .               reduce using rule 61 (expr -> expr - expr .)
    ASSIGN          reduce using rule 61 (expr -> expr - expr .)
    ITERATIONS      reduce using rule 61 (expr -> expr - expr .)
    {               reduce using rule 61 (expr -> expr - expr .)
    /               shift and go to state 49
    *               shift and go to state 50


state 94

    (62) expr -> expr + expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 62 (expr -> expr + expr .)
    -               reduce using rule 62 (expr -> expr + expr .)
    +               reduce using rule 62 (expr -> expr + expr .)
    GREATER         reduce using rule 62 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr + expr .)
    LESSEQ          reduce using rule 62 (expr -> expr + expr .)
    LESS            reduce using rule 62 (expr -> expr + expr .)
    EQEQ            reduce using rule 62 (expr -> expr + expr .)
    NOTEQ           reduce using rule 62 (expr -> expr + expr .)
    AND             reduce using rule 62 (expr -> expr + expr .)
    OR              reduce using rule 62 (expr -> expr + expr .)
    )               reduce using rule 62 (expr -> expr + expr .)
    ,               reduce using rule 62 (expr -> expr + expr .)
    ]               reduce using rule 62 (expr -> expr + expr .)
    SEP             reduce using rule 62 (expr -> expr + expr .)
    TO              reduce using rule 62 (expr -> expr + expr .)
    [               reduce using rule 62 (expr -> expr + expr .)
    .               reduce using rule 62 (expr -> expr + expr .)
    ASSIGN          reduce using rule 62 (expr -> expr + expr .)
    ITERATIONS      reduce using rule 62 (expr -> expr + expr .)
    {               reduce using rule 62 (expr -> expr + expr .)
    /               shift and go to state 49
    *               shift and go to state 50


state 95

    (63) expr -> expr GREATER expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 63 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 63 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 63 (expr -> expr GREATER expr .)
    LESS            reduce using rule 63 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 63 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 63 (expr -> expr GREATER expr .)
    AND             reduce using rule 63 (expr -> expr GREATER expr .)
    OR              reduce using rule 63 (expr -> expr GREATER expr .)
    )               reduce using rule 63 (expr -> expr GREATER expr .)
    ,               reduce using rule 63 (expr -> expr GREATER expr .)
    ]               reduce using rule 63 (expr -> expr GREATER expr .)
    SEP             reduce using rule 63 (expr -> expr GREATER expr .)
    TO              reduce using rule 63 (expr -> expr GREATER expr .)
    [               reduce using rule 63 (expr -> expr GREATER expr .)
    .               reduce using rule 63 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 63 (expr -> expr GREATER expr .)
    ITERATIONS      reduce using rule 63 (expr -> expr GREATER expr .)
    {               reduce using rule 63 (expr -> expr GREATER expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 96

    (64) expr -> expr GREATEREQ expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 64 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 64 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 64 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 64 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 64 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 64 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 64 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 64 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    ]               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    SEP             reduce using rule 64 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 64 (expr -> expr GREATEREQ expr .)
    [               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    .               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    ASSIGN          reduce using rule 64 (expr -> expr GREATEREQ expr .)
    ITERATIONS      reduce using rule 64 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 64 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 97

    (65) expr -> expr LESSEQ expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 65 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 65 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 65 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 65 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 65 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 65 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 65 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 65 (expr -> expr LESSEQ expr .)
    )               reduce using rule 65 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 65 (expr -> expr LESSEQ expr .)
    ]               reduce using rule 65 (expr -> expr LESSEQ expr .)
    SEP             reduce using rule 65 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 65 (expr -> expr LESSEQ expr .)
    [               reduce using rule 65 (expr -> expr LESSEQ expr .)
    .               reduce using rule 65 (expr -> expr LESSEQ expr .)
    ASSIGN          reduce using rule 65 (expr -> expr LESSEQ expr .)
    ITERATIONS      reduce using rule 65 (expr -> expr LESSEQ expr .)
    {               reduce using rule 65 (expr -> expr LESSEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 98

    (66) expr -> expr LESS expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 66 (expr -> expr LESS expr .)
    GREATER         reduce using rule 66 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 66 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 66 (expr -> expr LESS expr .)
    LESS            reduce using rule 66 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 66 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 66 (expr -> expr LESS expr .)
    AND             reduce using rule 66 (expr -> expr LESS expr .)
    OR              reduce using rule 66 (expr -> expr LESS expr .)
    )               reduce using rule 66 (expr -> expr LESS expr .)
    ,               reduce using rule 66 (expr -> expr LESS expr .)
    ]               reduce using rule 66 (expr -> expr LESS expr .)
    SEP             reduce using rule 66 (expr -> expr LESS expr .)
    TO              reduce using rule 66 (expr -> expr LESS expr .)
    [               reduce using rule 66 (expr -> expr LESS expr .)
    .               reduce using rule 66 (expr -> expr LESS expr .)
    ASSIGN          reduce using rule 66 (expr -> expr LESS expr .)
    ITERATIONS      reduce using rule 66 (expr -> expr LESS expr .)
    {               reduce using rule 66 (expr -> expr LESS expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 99

    (67) expr -> expr EQEQ expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 67 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 67 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 67 (expr -> expr EQEQ expr .)
    AND             reduce using rule 67 (expr -> expr EQEQ expr .)
    OR              reduce using rule 67 (expr -> expr EQEQ expr .)
    )               reduce using rule 67 (expr -> expr EQEQ expr .)
    ,               reduce using rule 67 (expr -> expr EQEQ expr .)
    ]               reduce using rule 67 (expr -> expr EQEQ expr .)
    SEP             reduce using rule 67 (expr -> expr EQEQ expr .)
    TO              reduce using rule 67 (expr -> expr EQEQ expr .)
    [               reduce using rule 67 (expr -> expr EQEQ expr .)
    .               reduce using rule 67 (expr -> expr EQEQ expr .)
    ASSIGN          reduce using rule 67 (expr -> expr EQEQ expr .)
    ITERATIONS      reduce using rule 67 (expr -> expr EQEQ expr .)
    {               reduce using rule 67 (expr -> expr EQEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56


state 100

    (68) expr -> expr NOTEQ expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 68 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 68 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 68 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 68 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 68 (expr -> expr NOTEQ expr .)
    )               reduce using rule 68 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 68 (expr -> expr NOTEQ expr .)
    ]               reduce using rule 68 (expr -> expr NOTEQ expr .)
    SEP             reduce using rule 68 (expr -> expr NOTEQ expr .)
    TO              reduce using rule 68 (expr -> expr NOTEQ expr .)
    [               reduce using rule 68 (expr -> expr NOTEQ expr .)
    .               reduce using rule 68 (expr -> expr NOTEQ expr .)
    ASSIGN          reduce using rule 68 (expr -> expr NOTEQ expr .)
    ITERATIONS      reduce using rule 68 (expr -> expr NOTEQ expr .)
    {               reduce using rule 68 (expr -> expr NOTEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56


state 101

    (69) expr -> expr AND expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 69 (expr -> expr AND expr .)
    AND             reduce using rule 69 (expr -> expr AND expr .)
    OR              reduce using rule 69 (expr -> expr AND expr .)
    )               reduce using rule 69 (expr -> expr AND expr .)
    ,               reduce using rule 69 (expr -> expr AND expr .)
    ]               reduce using rule 69 (expr -> expr AND expr .)
    SEP             reduce using rule 69 (expr -> expr AND expr .)
    TO              reduce using rule 69 (expr -> expr AND expr .)
    [               reduce using rule 69 (expr -> expr AND expr .)
    .               reduce using rule 69 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 69 (expr -> expr AND expr .)
    ITERATIONS      reduce using rule 69 (expr -> expr AND expr .)
    {               reduce using rule 69 (expr -> expr AND expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58


state 102

    (70) expr -> expr OR expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    IN              reduce using rule 70 (expr -> expr OR expr .)
    OR              reduce using rule 70 (expr -> expr OR expr .)
    )               reduce using rule 70 (expr -> expr OR expr .)
    ,               reduce using rule 70 (expr -> expr OR expr .)
    ]               reduce using rule 70 (expr -> expr OR expr .)
    SEP             reduce using rule 70 (expr -> expr OR expr .)
    TO              reduce using rule 70 (expr -> expr OR expr .)
    [               reduce using rule 70 (expr -> expr OR expr .)
    .               reduce using rule 70 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 70 (expr -> expr OR expr .)
    ITERATIONS      reduce using rule 70 (expr -> expr OR expr .)
    {               reduce using rule 70 (expr -> expr OR expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59


state 103

    (86) primitiveValue -> RANDOM FROM expr . TO expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    TO              shift and go to state 153
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 104

    (87) primary -> ( expr ) .
    IN              reduce using rule 87 (primary -> ( expr ) .)
    /               reduce using rule 87 (primary -> ( expr ) .)
    *               reduce using rule 87 (primary -> ( expr ) .)
    -               reduce using rule 87 (primary -> ( expr ) .)
    +               reduce using rule 87 (primary -> ( expr ) .)
    GREATER         reduce using rule 87 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 87 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 87 (primary -> ( expr ) .)
    LESS            reduce using rule 87 (primary -> ( expr ) .)
    EQEQ            reduce using rule 87 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 87 (primary -> ( expr ) .)
    AND             reduce using rule 87 (primary -> ( expr ) .)
    OR              reduce using rule 87 (primary -> ( expr ) .)
    )               reduce using rule 87 (primary -> ( expr ) .)
    ,               reduce using rule 87 (primary -> ( expr ) .)
    ]               reduce using rule 87 (primary -> ( expr ) .)
    SEP             reduce using rule 87 (primary -> ( expr ) .)
    TO              reduce using rule 87 (primary -> ( expr ) .)
    [               reduce using rule 87 (primary -> ( expr ) .)
    .               reduce using rule 87 (primary -> ( expr ) .)
    ASSIGN          reduce using rule 87 (primary -> ( expr ) .)
    ITERATIONS      reduce using rule 87 (primary -> ( expr ) .)
    {               reduce using rule 87 (primary -> ( expr ) .)


state 105

    (88) primary -> { bookItems } .
    IN              reduce using rule 88 (primary -> { bookItems } .)
    /               reduce using rule 88 (primary -> { bookItems } .)
    *               reduce using rule 88 (primary -> { bookItems } .)
    -               reduce using rule 88 (primary -> { bookItems } .)
    +               reduce using rule 88 (primary -> { bookItems } .)
    GREATER         reduce using rule 88 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 88 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 88 (primary -> { bookItems } .)
    LESS            reduce using rule 88 (primary -> { bookItems } .)
    EQEQ            reduce using rule 88 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 88 (primary -> { bookItems } .)
    AND             reduce using rule 88 (primary -> { bookItems } .)
    OR              reduce using rule 88 (primary -> { bookItems } .)
    )               reduce using rule 88 (primary -> { bookItems } .)
    ,               reduce using rule 88 (primary -> { bookItems } .)
    ]               reduce using rule 88 (primary -> { bookItems } .)
    SEP             reduce using rule 88 (primary -> { bookItems } .)
    TO              reduce using rule 88 (primary -> { bookItems } .)
    [               reduce using rule 88 (primary -> { bookItems } .)
    .               reduce using rule 88 (primary -> { bookItems } .)
    ASSIGN          reduce using rule 88 (primary -> { bookItems } .)
    ITERATIONS      reduce using rule 88 (primary -> { bookItems } .)
    {               reduce using rule 88 (primary -> { bookItems } .)


state 106

    (97) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 154


state 107

    (89) primary -> [ listItems ] .
    IN              reduce using rule 89 (primary -> [ listItems ] .)
    /               reduce using rule 89 (primary -> [ listItems ] .)
    *               reduce using rule 89 (primary -> [ listItems ] .)
    -               reduce using rule 89 (primary -> [ listItems ] .)
    +               reduce using rule 89 (primary -> [ listItems ] .)
    GREATER         reduce using rule 89 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 89 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 89 (primary -> [ listItems ] .)
    LESS            reduce using rule 89 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 89 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 89 (primary -> [ listItems ] .)
    AND             reduce using rule 89 (primary -> [ listItems ] .)
    OR              reduce using rule 89 (primary -> [ listItems ] .)
    )               reduce using rule 89 (primary -> [ listItems ] .)
    ,               reduce using rule 89 (primary -> [ listItems ] .)
    ]               reduce using rule 89 (primary -> [ listItems ] .)
    SEP             reduce using rule 89 (primary -> [ listItems ] .)
    TO              reduce using rule 89 (primary -> [ listItems ] .)
    [               reduce using rule 89 (primary -> [ listItems ] .)
    .               reduce using rule 89 (primary -> [ listItems ] .)
    ASSIGN          reduce using rule 89 (primary -> [ listItems ] .)
    ITERATIONS      reduce using rule 89 (primary -> [ listItems ] .)
    {               reduce using rule 89 (primary -> [ listItems ] .)


state 108

    (95) listItems -> expr , . listItems
    (94) listItems -> . empty
    (95) listItems -> . expr , listItems
    (103) empty -> .
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    ]               reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 73
    listItems                      shift and go to state 155
    empty                          shift and go to state 72
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 109

    (76) dotTail -> [ expr ] . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . [ expr ] dotTail
    (77) dotTail -> . . idTail dotTail
    (103) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 103 (empty -> .)
    /               reduce using rule 103 (empty -> .)
    *               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATEREQ       reduce using rule 103 (empty -> .)
    LESSEQ          reduce using rule 103 (empty -> .)
    LESS            reduce using rule 103 (empty -> .)
    EQEQ            reduce using rule 103 (empty -> .)
    NOTEQ           reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)
    )               reduce using rule 103 (empty -> .)
    ,               reduce using rule 103 (empty -> .)
    ]               reduce using rule 103 (empty -> .)
    SEP             reduce using rule 103 (empty -> .)
    TO              reduce using rule 103 (empty -> .)
    ASSIGN          reduce using rule 103 (empty -> .)
    ITERATIONS      reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)

    dotTail                        shift and go to state 156
    empty                          shift and go to state 38

state 110

    (77) dotTail -> . idTail dotTail .
    ASSIGN          reduce using rule 77 (dotTail -> . idTail dotTail .)
    IN              reduce using rule 77 (dotTail -> . idTail dotTail .)
    /               reduce using rule 77 (dotTail -> . idTail dotTail .)
    *               reduce using rule 77 (dotTail -> . idTail dotTail .)
    -               reduce using rule 77 (dotTail -> . idTail dotTail .)
    +               reduce using rule 77 (dotTail -> . idTail dotTail .)
    GREATER         reduce using rule 77 (dotTail -> . idTail dotTail .)
    GREATEREQ       reduce using rule 77 (dotTail -> . idTail dotTail .)
    LESSEQ          reduce using rule 77 (dotTail -> . idTail dotTail .)
    LESS            reduce using rule 77 (dotTail -> . idTail dotTail .)
    EQEQ            reduce using rule 77 (dotTail -> . idTail dotTail .)
    NOTEQ           reduce using rule 77 (dotTail -> . idTail dotTail .)
    AND             reduce using rule 77 (dotTail -> . idTail dotTail .)
    OR              reduce using rule 77 (dotTail -> . idTail dotTail .)
    )               reduce using rule 77 (dotTail -> . idTail dotTail .)
    ,               reduce using rule 77 (dotTail -> . idTail dotTail .)
    ]               reduce using rule 77 (dotTail -> . idTail dotTail .)
    SEP             reduce using rule 77 (dotTail -> . idTail dotTail .)
    TO              reduce using rule 77 (dotTail -> . idTail dotTail .)
    [               reduce using rule 77 (dotTail -> . idTail dotTail .)
    .               reduce using rule 77 (dotTail -> . idTail dotTail .)
    ITERATIONS      reduce using rule 77 (dotTail -> . idTail dotTail .)
    {               reduce using rule 77 (dotTail -> . idTail dotTail .)


state 111

    (82) listFunc -> PUSH expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IN              reduce using rule 82 (listFunc -> PUSH expr .)
    )               reduce using rule 82 (listFunc -> PUSH expr .)
    ,               reduce using rule 82 (listFunc -> PUSH expr .)
    ]               reduce using rule 82 (listFunc -> PUSH expr .)
    SEP             reduce using rule 82 (listFunc -> PUSH expr .)
    TO              reduce using rule 82 (listFunc -> PUSH expr .)
    [               reduce using rule 82 (listFunc -> PUSH expr .)
    .               reduce using rule 82 (listFunc -> PUSH expr .)
    ASSIGN          reduce using rule 82 (listFunc -> PUSH expr .)
    ITERATIONS      reduce using rule 82 (listFunc -> PUSH expr .)
    {               reduce using rule 82 (listFunc -> PUSH expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 112

    (17) envFunc -> RUN ID WITH expr . ITERATIONS SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ITERATIONS      shift and go to state 157
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 113

    (15) varAssign -> getter ASSIGN expr SEP .
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RUN             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESET           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BEHAVE          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    AGENT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ENV             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TALK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    -               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    !               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FIND            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RANDOM          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    (               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    {               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    [               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STRING          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    NUMBER          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FALSE           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TRUE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 114

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 158
    SEP             shift and go to state 159


state 115

    (98) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 98 (type -> BOOK_TYPE .)
    SEP             reduce using rule 98 (type -> BOOK_TYPE .)


state 116

    (99) type -> LIST_TYPE .
    ASSIGN          reduce using rule 99 (type -> LIST_TYPE .)
    SEP             reduce using rule 99 (type -> LIST_TYPE .)


state 117

    (100) type -> STRING_TYPE .
    ASSIGN          reduce using rule 100 (type -> STRING_TYPE .)
    SEP             reduce using rule 100 (type -> STRING_TYPE .)


state 118

    (101) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 101 (type -> BOOL_TYPE .)
    SEP             reduce using rule 101 (type -> BOOL_TYPE .)


state 119

    (102) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 102 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 102 (type -> NUMBER_TYPE .)


state 120

    (74) getter -> ID . dotTail
    (71) call -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . [ expr ] dotTail
    (77) dotTail -> . . idTail dotTail
    (103) empty -> .
    [               shift and go to state 39
    .               shift and go to state 40
    ASSIGN          reduce using rule 103 (empty -> .)
    SEP             reduce using rule 103 (empty -> .)
    /               reduce using rule 103 (empty -> .)
    *               reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    +               reduce using rule 103 (empty -> .)
    GREATER         reduce using rule 103 (empty -> .)
    GREATEREQ       reduce using rule 103 (empty -> .)
    LESSEQ          reduce using rule 103 (empty -> .)
    LESS            reduce using rule 103 (empty -> .)
    EQEQ            reduce using rule 103 (empty -> .)
    NOTEQ           reduce using rule 103 (empty -> .)
    AND             reduce using rule 103 (empty -> .)
    OR              reduce using rule 103 (empty -> .)

    dotTail                        shift and go to state 160
    empty                          shift and go to state 38

state 121

    (12) behaveDecl -> BEHAVE ID { behaveBody . }
    }               shift and go to state 161


state 122

    (22) behaveBody -> statementList .
    }               reduce using rule 22 (behaveBody -> statementList .)


state 123

    (26) statementList -> empty .
    }               reduce using rule 26 (statementList -> empty .)


state 124

    (27) statementList -> statement . statementList
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    statement                      shift and go to state 124
    statementList                  shift and go to state 162
    empty                          shift and go to state 123
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    expr                           shift and go to state 131
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 125

    (28) statement -> primFuncStmt .
    PUT             reduce using rule 28 (statement -> primFuncStmt .)
    PICK            reduce using rule 28 (statement -> primFuncStmt .)
    STOP            reduce using rule 28 (statement -> primFuncStmt .)
    RESTART         reduce using rule 28 (statement -> primFuncStmt .)
    SELL            reduce using rule 28 (statement -> primFuncStmt .)
    TALK            reduce using rule 28 (statement -> primFuncStmt .)
    IN              reduce using rule 28 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 28 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 28 (statement -> primFuncStmt .)
    LET             reduce using rule 28 (statement -> primFuncStmt .)
    -               reduce using rule 28 (statement -> primFuncStmt .)
    !               reduce using rule 28 (statement -> primFuncStmt .)
    BUY             reduce using rule 28 (statement -> primFuncStmt .)
    MOVE            reduce using rule 28 (statement -> primFuncStmt .)
    ID              reduce using rule 28 (statement -> primFuncStmt .)
    FIND            reduce using rule 28 (statement -> primFuncStmt .)
    RANDOM          reduce using rule 28 (statement -> primFuncStmt .)
    (               reduce using rule 28 (statement -> primFuncStmt .)
    {               reduce using rule 28 (statement -> primFuncStmt .)
    [               reduce using rule 28 (statement -> primFuncStmt .)
    STRING          reduce using rule 28 (statement -> primFuncStmt .)
    NUMBER          reduce using rule 28 (statement -> primFuncStmt .)
    FALSE           reduce using rule 28 (statement -> primFuncStmt .)
    TRUE            reduce using rule 28 (statement -> primFuncStmt .)
    }               reduce using rule 28 (statement -> primFuncStmt .)


state 126

    (29) statement -> incaseStmt .
    PUT             reduce using rule 29 (statement -> incaseStmt .)
    PICK            reduce using rule 29 (statement -> incaseStmt .)
    STOP            reduce using rule 29 (statement -> incaseStmt .)
    RESTART         reduce using rule 29 (statement -> incaseStmt .)
    SELL            reduce using rule 29 (statement -> incaseStmt .)
    TALK            reduce using rule 29 (statement -> incaseStmt .)
    IN              reduce using rule 29 (statement -> incaseStmt .)
    FOREACH         reduce using rule 29 (statement -> incaseStmt .)
    REPEAT          reduce using rule 29 (statement -> incaseStmt .)
    LET             reduce using rule 29 (statement -> incaseStmt .)
    -               reduce using rule 29 (statement -> incaseStmt .)
    !               reduce using rule 29 (statement -> incaseStmt .)
    BUY             reduce using rule 29 (statement -> incaseStmt .)
    MOVE            reduce using rule 29 (statement -> incaseStmt .)
    ID              reduce using rule 29 (statement -> incaseStmt .)
    FIND            reduce using rule 29 (statement -> incaseStmt .)
    RANDOM          reduce using rule 29 (statement -> incaseStmt .)
    (               reduce using rule 29 (statement -> incaseStmt .)
    {               reduce using rule 29 (statement -> incaseStmt .)
    [               reduce using rule 29 (statement -> incaseStmt .)
    STRING          reduce using rule 29 (statement -> incaseStmt .)
    NUMBER          reduce using rule 29 (statement -> incaseStmt .)
    FALSE           reduce using rule 29 (statement -> incaseStmt .)
    TRUE            reduce using rule 29 (statement -> incaseStmt .)
    }               reduce using rule 29 (statement -> incaseStmt .)


state 127

    (30) statement -> foreachStmt .
    PUT             reduce using rule 30 (statement -> foreachStmt .)
    PICK            reduce using rule 30 (statement -> foreachStmt .)
    STOP            reduce using rule 30 (statement -> foreachStmt .)
    RESTART         reduce using rule 30 (statement -> foreachStmt .)
    SELL            reduce using rule 30 (statement -> foreachStmt .)
    TALK            reduce using rule 30 (statement -> foreachStmt .)
    IN              reduce using rule 30 (statement -> foreachStmt .)
    FOREACH         reduce using rule 30 (statement -> foreachStmt .)
    REPEAT          reduce using rule 30 (statement -> foreachStmt .)
    LET             reduce using rule 30 (statement -> foreachStmt .)
    -               reduce using rule 30 (statement -> foreachStmt .)
    !               reduce using rule 30 (statement -> foreachStmt .)
    BUY             reduce using rule 30 (statement -> foreachStmt .)
    MOVE            reduce using rule 30 (statement -> foreachStmt .)
    ID              reduce using rule 30 (statement -> foreachStmt .)
    FIND            reduce using rule 30 (statement -> foreachStmt .)
    RANDOM          reduce using rule 30 (statement -> foreachStmt .)
    (               reduce using rule 30 (statement -> foreachStmt .)
    {               reduce using rule 30 (statement -> foreachStmt .)
    [               reduce using rule 30 (statement -> foreachStmt .)
    STRING          reduce using rule 30 (statement -> foreachStmt .)
    NUMBER          reduce using rule 30 (statement -> foreachStmt .)
    FALSE           reduce using rule 30 (statement -> foreachStmt .)
    TRUE            reduce using rule 30 (statement -> foreachStmt .)
    }               reduce using rule 30 (statement -> foreachStmt .)


state 128

    (31) statement -> repeatStmt .
    PUT             reduce using rule 31 (statement -> repeatStmt .)
    PICK            reduce using rule 31 (statement -> repeatStmt .)
    STOP            reduce using rule 31 (statement -> repeatStmt .)
    RESTART         reduce using rule 31 (statement -> repeatStmt .)
    SELL            reduce using rule 31 (statement -> repeatStmt .)
    TALK            reduce using rule 31 (statement -> repeatStmt .)
    IN              reduce using rule 31 (statement -> repeatStmt .)
    FOREACH         reduce using rule 31 (statement -> repeatStmt .)
    REPEAT          reduce using rule 31 (statement -> repeatStmt .)
    LET             reduce using rule 31 (statement -> repeatStmt .)
    -               reduce using rule 31 (statement -> repeatStmt .)
    !               reduce using rule 31 (statement -> repeatStmt .)
    BUY             reduce using rule 31 (statement -> repeatStmt .)
    MOVE            reduce using rule 31 (statement -> repeatStmt .)
    ID              reduce using rule 31 (statement -> repeatStmt .)
    FIND            reduce using rule 31 (statement -> repeatStmt .)
    RANDOM          reduce using rule 31 (statement -> repeatStmt .)
    (               reduce using rule 31 (statement -> repeatStmt .)
    {               reduce using rule 31 (statement -> repeatStmt .)
    [               reduce using rule 31 (statement -> repeatStmt .)
    STRING          reduce using rule 31 (statement -> repeatStmt .)
    NUMBER          reduce using rule 31 (statement -> repeatStmt .)
    FALSE           reduce using rule 31 (statement -> repeatStmt .)
    TRUE            reduce using rule 31 (statement -> repeatStmt .)
    }               reduce using rule 31 (statement -> repeatStmt .)


state 129

    (32) statement -> varAssign .
    PUT             reduce using rule 32 (statement -> varAssign .)
    PICK            reduce using rule 32 (statement -> varAssign .)
    STOP            reduce using rule 32 (statement -> varAssign .)
    RESTART         reduce using rule 32 (statement -> varAssign .)
    SELL            reduce using rule 32 (statement -> varAssign .)
    TALK            reduce using rule 32 (statement -> varAssign .)
    IN              reduce using rule 32 (statement -> varAssign .)
    FOREACH         reduce using rule 32 (statement -> varAssign .)
    REPEAT          reduce using rule 32 (statement -> varAssign .)
    LET             reduce using rule 32 (statement -> varAssign .)
    -               reduce using rule 32 (statement -> varAssign .)
    !               reduce using rule 32 (statement -> varAssign .)
    BUY             reduce using rule 32 (statement -> varAssign .)
    MOVE            reduce using rule 32 (statement -> varAssign .)
    ID              reduce using rule 32 (statement -> varAssign .)
    FIND            reduce using rule 32 (statement -> varAssign .)
    RANDOM          reduce using rule 32 (statement -> varAssign .)
    (               reduce using rule 32 (statement -> varAssign .)
    {               reduce using rule 32 (statement -> varAssign .)
    [               reduce using rule 32 (statement -> varAssign .)
    STRING          reduce using rule 32 (statement -> varAssign .)
    NUMBER          reduce using rule 32 (statement -> varAssign .)
    FALSE           reduce using rule 32 (statement -> varAssign .)
    TRUE            reduce using rule 32 (statement -> varAssign .)
    }               reduce using rule 32 (statement -> varAssign .)


state 130

    (33) statement -> varDecl .
    PUT             reduce using rule 33 (statement -> varDecl .)
    PICK            reduce using rule 33 (statement -> varDecl .)
    STOP            reduce using rule 33 (statement -> varDecl .)
    RESTART         reduce using rule 33 (statement -> varDecl .)
    SELL            reduce using rule 33 (statement -> varDecl .)
    TALK            reduce using rule 33 (statement -> varDecl .)
    IN              reduce using rule 33 (statement -> varDecl .)
    FOREACH         reduce using rule 33 (statement -> varDecl .)
    REPEAT          reduce using rule 33 (statement -> varDecl .)
    LET             reduce using rule 33 (statement -> varDecl .)
    -               reduce using rule 33 (statement -> varDecl .)
    !               reduce using rule 33 (statement -> varDecl .)
    BUY             reduce using rule 33 (statement -> varDecl .)
    MOVE            reduce using rule 33 (statement -> varDecl .)
    ID              reduce using rule 33 (statement -> varDecl .)
    FIND            reduce using rule 33 (statement -> varDecl .)
    RANDOM          reduce using rule 33 (statement -> varDecl .)
    (               reduce using rule 33 (statement -> varDecl .)
    {               reduce using rule 33 (statement -> varDecl .)
    [               reduce using rule 33 (statement -> varDecl .)
    STRING          reduce using rule 33 (statement -> varDecl .)
    NUMBER          reduce using rule 33 (statement -> varDecl .)
    FALSE           reduce using rule 33 (statement -> varDecl .)
    TRUE            reduce using rule 33 (statement -> varDecl .)
    }               reduce using rule 33 (statement -> varDecl .)


state 131

    (34) statement -> expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 163
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 132

    (41) primFuncStmt -> PUT . expr , expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 164
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 133

    (42) primFuncStmt -> PICK . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 165
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 134

    (43) primFuncStmt -> STOP . SEP
    SEP             shift and go to state 166


state 135

    (44) primFuncStmt -> RESTART . BEHAVE SEP
    BEHAVE          shift and go to state 167


state 136

    (45) primFuncStmt -> SELL . expr , expr , expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 168
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 137

    (46) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 169


state 138

    (47) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 170


state 139

    (48) primFuncStmt -> TALK . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 171
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 140

    (37) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 172


state 141

    (36) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 173


state 142

    (35) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 174


state 143

    (54) buyStmt -> BUY . expr
    (55) buyStmt -> BUY . expr , expr , expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 175
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 144

    (49) moveStmt -> MOVE . RIGHT
    (50) moveStmt -> MOVE . LEFT
    (51) moveStmt -> MOVE . DOWN
    (52) moveStmt -> MOVE . UP
    (53) moveStmt -> MOVE . expr , expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    RIGHT           shift and go to state 176
    LEFT            shift and go to state 177
    DOWN            shift and go to state 178
    UP              shift and go to state 179
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 180
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 145

    (11) agentDecl -> AGENT ID { agentBody . }
    }               shift and go to state 181


state 146

    (21) agentBody -> varList .
    }               reduce using rule 21 (agentBody -> varList .)


state 147

    (23) varList -> empty .
    }               reduce using rule 23 (varList -> empty .)


state 148

    (24) varList -> varAssign . varList
    (23) varList -> . empty
    (24) varList -> . varAssign varList
    (25) varList -> . varDecl varList
    (103) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 103 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varAssign                      shift and go to state 148
    varList                        shift and go to state 182
    empty                          shift and go to state 147
    varDecl                        shift and go to state 149
    getter                         shift and go to state 15

state 149

    (25) varList -> varDecl . varList
    (23) varList -> . empty
    (24) varList -> . varAssign varList
    (25) varList -> . varDecl varList
    (103) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 103 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varDecl                        shift and go to state 149
    varList                        shift and go to state 183
    empty                          shift and go to state 147
    varAssign                      shift and go to state 148
    getter                         shift and go to state 15

state 150

    (10) envDecl -> ENV ID { envBody . }
    }               shift and go to state 184


state 151

    (20) envBody -> varList .
    }               reduce using rule 20 (envBody -> varList .)


state 152

    (16) envFunc -> PUT expr IN ID AT . expr , expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 185
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 153

    (86) primitiveValue -> RANDOM FROM expr TO . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 186
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 154

    (97) bookItems -> STRING : ( . listItems ) , bookItems
    (94) listItems -> . empty
    (95) listItems -> . expr , listItems
    (103) empty -> .
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    )               reduce using rule 103 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    listItems                      shift and go to state 187
    empty                          shift and go to state 72
    expr                           shift and go to state 73
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 155

    (95) listItems -> expr , listItems .
    ]               reduce using rule 95 (listItems -> expr , listItems .)
    )               reduce using rule 95 (listItems -> expr , listItems .)


state 156

    (76) dotTail -> [ expr ] dotTail .
    ASSIGN          reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    IN              reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    /               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    *               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    -               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    +               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    GREATER         reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    GREATEREQ       reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    LESSEQ          reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    LESS            reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    EQEQ            reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    NOTEQ           reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    AND             reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    OR              reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    )               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    ,               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    ]               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    SEP             reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    TO              reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    [               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    .               reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    ITERATIONS      reduce using rule 76 (dotTail -> [ expr ] dotTail .)
    {               reduce using rule 76 (dotTail -> [ expr ] dotTail .)


state 157

    (17) envFunc -> RUN ID WITH expr ITERATIONS . SEP
    SEP             shift and go to state 188


state 158

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 189
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 159

    (14) varDecl -> LET ID : type SEP .
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RUN             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESET           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BEHAVE          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    AGENT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ENV             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TALK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    -               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    !               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FIND            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RANDOM          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    (               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    {               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    [               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STRING          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    NUMBER          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FALSE           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TRUE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 160

    (74) getter -> ID dotTail .
    (71) call -> ID dotTail .
    ASSIGN          reduce using rule 74 (getter -> ID dotTail .)
    SEP             reduce using rule 71 (call -> ID dotTail .)
    /               reduce using rule 71 (call -> ID dotTail .)
    *               reduce using rule 71 (call -> ID dotTail .)
    -               reduce using rule 71 (call -> ID dotTail .)
    +               reduce using rule 71 (call -> ID dotTail .)
    GREATER         reduce using rule 71 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 71 (call -> ID dotTail .)
    LESSEQ          reduce using rule 71 (call -> ID dotTail .)
    LESS            reduce using rule 71 (call -> ID dotTail .)
    EQEQ            reduce using rule 71 (call -> ID dotTail .)
    NOTEQ           reduce using rule 71 (call -> ID dotTail .)
    AND             reduce using rule 71 (call -> ID dotTail .)
    OR              reduce using rule 71 (call -> ID dotTail .)


state 161

    (12) behaveDecl -> BEHAVE ID { behaveBody } .
    PUT             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RUN             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RESET           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    LET             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    BEHAVE          reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    AGENT           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ENV             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ID              reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    $end            reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)


state 162

    (27) statementList -> statement statementList .
    }               reduce using rule 27 (statementList -> statement statementList .)


state 163

    (34) statement -> expr SEP .
    PUT             reduce using rule 34 (statement -> expr SEP .)
    PICK            reduce using rule 34 (statement -> expr SEP .)
    STOP            reduce using rule 34 (statement -> expr SEP .)
    RESTART         reduce using rule 34 (statement -> expr SEP .)
    SELL            reduce using rule 34 (statement -> expr SEP .)
    TALK            reduce using rule 34 (statement -> expr SEP .)
    IN              reduce using rule 34 (statement -> expr SEP .)
    FOREACH         reduce using rule 34 (statement -> expr SEP .)
    REPEAT          reduce using rule 34 (statement -> expr SEP .)
    LET             reduce using rule 34 (statement -> expr SEP .)
    -               reduce using rule 34 (statement -> expr SEP .)
    !               reduce using rule 34 (statement -> expr SEP .)
    BUY             reduce using rule 34 (statement -> expr SEP .)
    MOVE            reduce using rule 34 (statement -> expr SEP .)
    ID              reduce using rule 34 (statement -> expr SEP .)
    FIND            reduce using rule 34 (statement -> expr SEP .)
    RANDOM          reduce using rule 34 (statement -> expr SEP .)
    (               reduce using rule 34 (statement -> expr SEP .)
    {               reduce using rule 34 (statement -> expr SEP .)
    [               reduce using rule 34 (statement -> expr SEP .)
    STRING          reduce using rule 34 (statement -> expr SEP .)
    NUMBER          reduce using rule 34 (statement -> expr SEP .)
    FALSE           reduce using rule 34 (statement -> expr SEP .)
    TRUE            reduce using rule 34 (statement -> expr SEP .)
    }               reduce using rule 34 (statement -> expr SEP .)


state 164

    (41) primFuncStmt -> PUT expr . , expr SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 190
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 165

    (42) primFuncStmt -> PICK expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 191
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 166

    (43) primFuncStmt -> STOP SEP .
    PUT             reduce using rule 43 (primFuncStmt -> STOP SEP .)
    PICK            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    STOP            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    RESTART         reduce using rule 43 (primFuncStmt -> STOP SEP .)
    SELL            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    TALK            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    IN              reduce using rule 43 (primFuncStmt -> STOP SEP .)
    FOREACH         reduce using rule 43 (primFuncStmt -> STOP SEP .)
    REPEAT          reduce using rule 43 (primFuncStmt -> STOP SEP .)
    LET             reduce using rule 43 (primFuncStmt -> STOP SEP .)
    -               reduce using rule 43 (primFuncStmt -> STOP SEP .)
    !               reduce using rule 43 (primFuncStmt -> STOP SEP .)
    BUY             reduce using rule 43 (primFuncStmt -> STOP SEP .)
    MOVE            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    ID              reduce using rule 43 (primFuncStmt -> STOP SEP .)
    FIND            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    RANDOM          reduce using rule 43 (primFuncStmt -> STOP SEP .)
    (               reduce using rule 43 (primFuncStmt -> STOP SEP .)
    {               reduce using rule 43 (primFuncStmt -> STOP SEP .)
    [               reduce using rule 43 (primFuncStmt -> STOP SEP .)
    STRING          reduce using rule 43 (primFuncStmt -> STOP SEP .)
    NUMBER          reduce using rule 43 (primFuncStmt -> STOP SEP .)
    FALSE           reduce using rule 43 (primFuncStmt -> STOP SEP .)
    TRUE            reduce using rule 43 (primFuncStmt -> STOP SEP .)
    }               reduce using rule 43 (primFuncStmt -> STOP SEP .)


state 167

    (44) primFuncStmt -> RESTART BEHAVE . SEP
    SEP             shift and go to state 192


state 168

    (45) primFuncStmt -> SELL expr . , expr , expr SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 193
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 169

    (46) primFuncStmt -> buyStmt SEP .
    PUT             reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    TALK            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    -               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    !               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    ID              reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    FIND            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    RANDOM          reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    (               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    {               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    [               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    STRING          reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    NUMBER          reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    FALSE           reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    TRUE            reduce using rule 46 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 46 (primFuncStmt -> buyStmt SEP .)


state 170

    (47) primFuncStmt -> moveStmt SEP .
    PUT             reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    TALK            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    -               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    !               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    ID              reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    FIND            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    RANDOM          reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    (               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    {               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    [               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    STRING          reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    NUMBER          reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    FALSE           reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    TRUE            reduce using rule 47 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 47 (primFuncStmt -> moveStmt SEP .)


state 171

    (48) primFuncStmt -> TALK expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 194
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 172

    (37) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 195
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 173

    (36) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 196


state 174

    (35) repeatStmt -> REPEAT WHEN . expr { statementList }
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 197
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 175

    (54) buyStmt -> BUY expr .
    (55) buyStmt -> BUY expr . , expr , expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             reduce using rule 54 (buyStmt -> BUY expr .)
    ,               shift and go to state 198
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 176

    (49) moveStmt -> MOVE RIGHT .
    SEP             reduce using rule 49 (moveStmt -> MOVE RIGHT .)


state 177

    (50) moveStmt -> MOVE LEFT .
    SEP             reduce using rule 50 (moveStmt -> MOVE LEFT .)


state 178

    (51) moveStmt -> MOVE DOWN .
    SEP             reduce using rule 51 (moveStmt -> MOVE DOWN .)


state 179

    (52) moveStmt -> MOVE UP .
    SEP             reduce using rule 52 (moveStmt -> MOVE UP .)


state 180

    (53) moveStmt -> MOVE expr . , expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 199
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 181

    (11) agentDecl -> AGENT ID { agentBody } .
    PUT             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RUN             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RESET           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    LET             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    BEHAVE          reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    AGENT           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ENV             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ID              reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    $end            reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)


state 182

    (24) varList -> varAssign varList .
    }               reduce using rule 24 (varList -> varAssign varList .)


state 183

    (25) varList -> varDecl varList .
    }               reduce using rule 25 (varList -> varDecl varList .)


state 184

    (10) envDecl -> ENV ID { envBody } .
    PUT             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RUN             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RESET           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    LET             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    BEHAVE          reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    AGENT           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ENV             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ID              reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    $end            reduce using rule 10 (envDecl -> ENV ID { envBody } .)


state 185

    (16) envFunc -> PUT expr IN ID AT expr . , expr SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 200
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 186

    (86) primitiveValue -> RANDOM FROM expr TO expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IN              reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    )               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    ,               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    ]               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    SEP             reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    TO              reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    [               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    .               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    ASSIGN          reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    ITERATIONS      reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    {               reduce using rule 86 (primitiveValue -> RANDOM FROM expr TO expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 187

    (97) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 201


state 188

    (17) envFunc -> RUN ID WITH expr ITERATIONS SEP .
    PUT             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RUN             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RESET           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    LET             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    BEHAVE          reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    AGENT           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ENV             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ID              reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    $end            reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)


state 189

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 202
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 190

    (41) primFuncStmt -> PUT expr , . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 203
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 191

    (42) primFuncStmt -> PICK expr SEP .
    PUT             reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    TALK            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    IN              reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    LET             reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    -               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    !               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    ID              reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    FIND            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    RANDOM          reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    (               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    {               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    [               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    STRING          reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    NUMBER          reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    FALSE           reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    TRUE            reduce using rule 42 (primFuncStmt -> PICK expr SEP .)
    }               reduce using rule 42 (primFuncStmt -> PICK expr SEP .)


state 192

    (44) primFuncStmt -> RESTART BEHAVE SEP .
    PUT             reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    TALK            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    IN              reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    LET             reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    -               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    !               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    ID              reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    FIND            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    RANDOM          reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    (               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    {               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    [               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    STRING          reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    NUMBER          reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    FALSE           reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    TRUE            reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)
    }               reduce using rule 44 (primFuncStmt -> RESTART BEHAVE SEP .)


state 193

    (45) primFuncStmt -> SELL expr , . expr , expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 204
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 194

    (48) primFuncStmt -> TALK expr SEP .
    PUT             reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    PICK            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    STOP            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    RESTART         reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    SELL            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    TALK            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    IN              reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    FOREACH         reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    REPEAT          reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    LET             reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    -               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    !               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    BUY             reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    MOVE            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    ID              reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    FIND            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    RANDOM          reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    (               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    {               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    [               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    STRING          reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    NUMBER          reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    FALSE           reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    TRUE            reduce using rule 48 (primFuncStmt -> TALK expr SEP .)
    }               reduce using rule 48 (primFuncStmt -> TALK expr SEP .)


state 195

    (37) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    {               shift and go to state 205
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 196

    (36) foreachStmt -> FOREACH ID IN . expr { statementList }
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 206
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 197

    (35) repeatStmt -> REPEAT WHEN expr . { statementList }
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    {               shift and go to state 207
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 198

    (55) buyStmt -> BUY expr , . expr , expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 208
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 199

    (53) moveStmt -> MOVE expr , . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 209
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 200

    (16) envFunc -> PUT expr IN ID AT expr , . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 210
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 201

    (97) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 211


state 202

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RUN             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESET           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BEHAVE          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    AGENT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ENV             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TALK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    -               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    !               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FIND            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RANDOM          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    (               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    {               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    [               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STRING          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    NUMBER          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FALSE           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TRUE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 203

    (41) primFuncStmt -> PUT expr , expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 212
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 204

    (45) primFuncStmt -> SELL expr , expr . , expr SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 213
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 205

    (37) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 131
    statementList                  shift and go to state 214
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 206

    (36) foreachStmt -> FOREACH ID IN expr . { statementList }
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    {               shift and go to state 215
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 207

    (35) repeatStmt -> REPEAT WHEN expr { . statementList }
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 131
    statementList                  shift and go to state 216
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 208

    (55) buyStmt -> BUY expr , expr . , expr
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    ,               shift and go to state 217
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 209

    (53) moveStmt -> MOVE expr , expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             reduce using rule 53 (moveStmt -> MOVE expr , expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 210

    (16) envFunc -> PUT expr IN ID AT expr , expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 218
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 211

    (97) bookItems -> STRING : ( listItems ) , . bookItems
    (96) bookItems -> . empty
    (97) bookItems -> . STRING : ( listItems ) , bookItems
    (103) empty -> .
    STRING          shift and go to state 70
    }               reduce using rule 103 (empty -> .)

    bookItems                      shift and go to state 219
    empty                          shift and go to state 69

state 212

    (41) primFuncStmt -> PUT expr , expr SEP .
    PUT             reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    PICK            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    STOP            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    RESTART         reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    SELL            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    TALK            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    IN              reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    FOREACH         reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    REPEAT          reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    LET             reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    -               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    !               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    BUY             reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    MOVE            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    ID              reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    FIND            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    RANDOM          reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    (               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    {               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    [               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    STRING          reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    NUMBER          reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    FALSE           reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    TRUE            reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)
    }               reduce using rule 41 (primFuncStmt -> PUT expr , expr SEP .)


state 213

    (45) primFuncStmt -> SELL expr , expr , . expr SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 220
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 214

    (37) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 221


state 215

    (36) foreachStmt -> FOREACH ID IN expr { . statementList }
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 131
    statementList                  shift and go to state 222
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 216

    (35) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 223


state 217

    (55) buyStmt -> BUY expr , expr , . expr
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 224
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 218

    (16) envFunc -> PUT expr IN ID AT expr , expr SEP .
    PUT             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    RUN             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    RESET           reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    LET             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    BEHAVE          reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    AGENT           reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    ENV             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    ID              reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    $end            reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)


state 219

    (97) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 97 (bookItems -> STRING : ( listItems ) , bookItems .)


state 220

    (45) primFuncStmt -> SELL expr , expr , expr . SEP
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             shift and go to state 225
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 221

    (37) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (38) inothercaseStmt -> . empty
    (39) inothercaseStmt -> . OTHERWISE { statementList }
    (40) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (103) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 229
    IN              shift and go to state 226
    PUT             reduce using rule 103 (empty -> .)
    PICK            reduce using rule 103 (empty -> .)
    STOP            reduce using rule 103 (empty -> .)
    RESTART         reduce using rule 103 (empty -> .)
    SELL            reduce using rule 103 (empty -> .)
    TALK            reduce using rule 103 (empty -> .)
    FOREACH         reduce using rule 103 (empty -> .)
    REPEAT          reduce using rule 103 (empty -> .)
    LET             reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    !               reduce using rule 103 (empty -> .)
    BUY             reduce using rule 103 (empty -> .)
    MOVE            reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    FIND            reduce using rule 103 (empty -> .)
    RANDOM          reduce using rule 103 (empty -> .)
    (               reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    [               reduce using rule 103 (empty -> .)
    STRING          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)

    inothercaseStmt                shift and go to state 227
    empty                          shift and go to state 228

state 222

    (36) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 230


state 223

    (35) repeatStmt -> REPEAT WHEN expr { statementList } .
    PUT             reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TALK            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    -               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    !               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    ID              reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FIND            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RANDOM          reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    (               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    {               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    [               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STRING          reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    NUMBER          reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FALSE           reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TRUE            reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 35 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 224

    (55) buyStmt -> BUY expr , expr , expr .
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    SEP             reduce using rule 55 (buyStmt -> BUY expr , expr , expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 225

    (45) primFuncStmt -> SELL expr , expr , expr SEP .
    PUT             reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PICK            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STOP            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RESTART         reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    SELL            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TALK            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    IN              reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FOREACH         reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    REPEAT          reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    LET             reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    -               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    !               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    BUY             reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    MOVE            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    ID              reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FIND            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RANDOM          reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    (               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    {               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    [               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STRING          reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    NUMBER          reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FALSE           reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TRUE            reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)
    }               reduce using rule 45 (primFuncStmt -> SELL expr , expr , expr SEP .)


state 226

    (40) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 231


state 227

    (37) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    -               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    !               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FIND            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    (               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    {               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    [               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STRING          reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    NUMBER          reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FALSE           reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TRUE            reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 37 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 228

    (38) inothercaseStmt -> empty .
    PUT             reduce using rule 38 (inothercaseStmt -> empty .)
    PICK            reduce using rule 38 (inothercaseStmt -> empty .)
    STOP            reduce using rule 38 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 38 (inothercaseStmt -> empty .)
    SELL            reduce using rule 38 (inothercaseStmt -> empty .)
    TALK            reduce using rule 38 (inothercaseStmt -> empty .)
    IN              reduce using rule 38 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> empty .)
    LET             reduce using rule 38 (inothercaseStmt -> empty .)
    -               reduce using rule 38 (inothercaseStmt -> empty .)
    !               reduce using rule 38 (inothercaseStmt -> empty .)
    BUY             reduce using rule 38 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 38 (inothercaseStmt -> empty .)
    ID              reduce using rule 38 (inothercaseStmt -> empty .)
    FIND            reduce using rule 38 (inothercaseStmt -> empty .)
    RANDOM          reduce using rule 38 (inothercaseStmt -> empty .)
    (               reduce using rule 38 (inothercaseStmt -> empty .)
    {               reduce using rule 38 (inothercaseStmt -> empty .)
    [               reduce using rule 38 (inothercaseStmt -> empty .)
    STRING          reduce using rule 38 (inothercaseStmt -> empty .)
    NUMBER          reduce using rule 38 (inothercaseStmt -> empty .)
    FALSE           reduce using rule 38 (inothercaseStmt -> empty .)
    TRUE            reduce using rule 38 (inothercaseStmt -> empty .)
    }               reduce using rule 38 (inothercaseStmt -> empty .)


state 229

    (39) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 232


state 230

    (36) foreachStmt -> FOREACH ID IN expr { statementList } .
    PUT             reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TALK            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    -               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    !               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    ID              reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FIND            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RANDOM          reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    (               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    {               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    [               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STRING          reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    NUMBER          reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FALSE           reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TRUE            reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 36 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 231

    (40) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 233


state 232

    (39) inothercaseStmt -> OTHERWISE { . statementList }
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    statementList                  shift and go to state 234
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    expr                           shift and go to state 131
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 233

    (40) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 235
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 234

    (39) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 236


state 235

    (40) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (59) expr -> expr . / expr
    (60) expr -> expr . * expr
    (61) expr -> expr . - expr
    (62) expr -> expr . + expr
    (63) expr -> expr . GREATER expr
    (64) expr -> expr . GREATEREQ expr
    (65) expr -> expr . LESSEQ expr
    (66) expr -> expr . LESS expr
    (67) expr -> expr . EQEQ expr
    (68) expr -> expr . NOTEQ expr
    (69) expr -> expr . AND expr
    (70) expr -> expr . OR expr
    {               shift and go to state 237
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 236

    (39) inothercaseStmt -> OTHERWISE { statementList } .
    PUT             reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    TALK            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    -               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    !               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    ID              reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    FIND            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    RANDOM          reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    (               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    {               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    [               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    STRING          reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    NUMBER          reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    FALSE           reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    TRUE            reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 39 (inothercaseStmt -> OTHERWISE { statementList } .)


state 237

    (40) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (26) statementList -> . empty
    (27) statementList -> . statement statementList
    (103) empty -> .
    (28) statement -> . primFuncStmt
    (29) statement -> . incaseStmt
    (30) statement -> . foreachStmt
    (31) statement -> . repeatStmt
    (32) statement -> . varAssign
    (33) statement -> . varDecl
    (34) statement -> . expr SEP
    (41) primFuncStmt -> . PUT expr , expr SEP
    (42) primFuncStmt -> . PICK expr SEP
    (43) primFuncStmt -> . STOP SEP
    (44) primFuncStmt -> . RESTART BEHAVE SEP
    (45) primFuncStmt -> . SELL expr , expr , expr SEP
    (46) primFuncStmt -> . buyStmt SEP
    (47) primFuncStmt -> . moveStmt SEP
    (48) primFuncStmt -> . TALK expr SEP
    (37) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (36) foreachStmt -> . FOREACH ID IN expr { statementList }
    (35) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (56) expr -> . call
    (57) expr -> . - expr
    (58) expr -> . ! expr
    (59) expr -> . expr / expr
    (60) expr -> . expr * expr
    (61) expr -> . expr - expr
    (62) expr -> . expr + expr
    (63) expr -> . expr GREATER expr
    (64) expr -> . expr GREATEREQ expr
    (65) expr -> . expr LESSEQ expr
    (66) expr -> . expr LESS expr
    (67) expr -> . expr EQEQ expr
    (68) expr -> . expr NOTEQ expr
    (69) expr -> . expr AND expr
    (70) expr -> . expr OR expr
    (54) buyStmt -> . BUY expr
    (55) buyStmt -> . BUY expr , expr , expr
    (49) moveStmt -> . MOVE RIGHT
    (50) moveStmt -> . MOVE LEFT
    (51) moveStmt -> . MOVE DOWN
    (52) moveStmt -> . MOVE UP
    (53) moveStmt -> . MOVE expr , expr
    (74) getter -> . ID dotTail
    (71) call -> . ID dotTail
    (72) call -> . primitiveValue
    (73) call -> . primary
    (84) primitiveValue -> . FIND PEERS
    (85) primitiveValue -> . FIND OBJECTS
    (86) primitiveValue -> . RANDOM FROM expr TO expr
    (87) primary -> . ( expr )
    (88) primary -> . { bookItems }
    (89) primary -> . [ listItems ]
    (90) primary -> . STRING
    (91) primary -> . NUMBER
    (92) primary -> . FALSE
    (93) primary -> . TRUE
    }               reduce using rule 103 (empty -> .)
    PUT             shift and go to state 132
    PICK            shift and go to state 133
    STOP            shift and go to state 134
    RESTART         shift and go to state 135
    SELL            shift and go to state 136
    TALK            shift and go to state 139
    IN              shift and go to state 140
    FOREACH         shift and go to state 141
    REPEAT          shift and go to state 142
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 143
    MOVE            shift and go to state 144
    ID              shift and go to state 120
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 131
    statementList                  shift and go to state 238
    empty                          shift and go to state 123
    statement                      shift and go to state 124
    primFuncStmt                   shift and go to state 125
    incaseStmt                     shift and go to state 126
    foreachStmt                    shift and go to state 127
    repeatStmt                     shift and go to state 128
    varAssign                      shift and go to state 129
    varDecl                        shift and go to state 130
    buyStmt                        shift and go to state 137
    moveStmt                       shift and go to state 138
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 238

    (40) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 239


state 239

    (40) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (38) inothercaseStmt -> . empty
    (39) inothercaseStmt -> . OTHERWISE { statementList }
    (40) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (103) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 229
    IN              shift and go to state 226
    PUT             reduce using rule 103 (empty -> .)
    PICK            reduce using rule 103 (empty -> .)
    STOP            reduce using rule 103 (empty -> .)
    RESTART         reduce using rule 103 (empty -> .)
    SELL            reduce using rule 103 (empty -> .)
    TALK            reduce using rule 103 (empty -> .)
    FOREACH         reduce using rule 103 (empty -> .)
    REPEAT          reduce using rule 103 (empty -> .)
    LET             reduce using rule 103 (empty -> .)
    -               reduce using rule 103 (empty -> .)
    !               reduce using rule 103 (empty -> .)
    BUY             reduce using rule 103 (empty -> .)
    MOVE            reduce using rule 103 (empty -> .)
    ID              reduce using rule 103 (empty -> .)
    FIND            reduce using rule 103 (empty -> .)
    RANDOM          reduce using rule 103 (empty -> .)
    (               reduce using rule 103 (empty -> .)
    {               reduce using rule 103 (empty -> .)
    [               reduce using rule 103 (empty -> .)
    STRING          reduce using rule 103 (empty -> .)
    NUMBER          reduce using rule 103 (empty -> .)
    FALSE           reduce using rule 103 (empty -> .)
    TRUE            reduce using rule 103 (empty -> .)
    }               reduce using rule 103 (empty -> .)

    inothercaseStmt                shift and go to state 240
    empty                          shift and go to state 228

state 240

    (40) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    -               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    !               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FIND            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    (               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    {               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    [               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STRING          reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    NUMBER          reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FALSE           reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TRUE            reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 40 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for [ in state 22 resolved as shift
shift/reduce conflict for . in state 22 resolved as shift
shift/reduce conflict for [ in state 75 resolved as shift
shift/reduce conflict for . in state 75 resolved as shift
shift/reduce conflict for [ in state 109 resolved as shift
shift/reduce conflict for . in state 109 resolved as shift
shift/reduce conflict for / in state 111 resolved as shift
shift/reduce conflict for * in state 111 resolved as shift
shift/reduce conflict for - in state 111 resolved as shift
shift/reduce conflict for + in state 111 resolved as shift
shift/reduce conflict for GREATER in state 111 resolved as shift
shift/reduce conflict for GREATEREQ in state 111 resolved as shift
shift/reduce conflict for LESSEQ in state 111 resolved as shift
shift/reduce conflict for LESS in state 111 resolved as shift
shift/reduce conflict for EQEQ in state 111 resolved as shift
shift/reduce conflict for NOTEQ in state 111 resolved as shift
shift/reduce conflict for AND in state 111 resolved as shift
shift/reduce conflict for OR in state 111 resolved as shift
shift/reduce conflict for / in state 186 resolved as shift
shift/reduce conflict for * in state 186 resolved as shift
shift/reduce conflict for - in state 186 resolved as shift
shift/reduce conflict for + in state 186 resolved as shift
shift/reduce conflict for GREATER in state 186 resolved as shift
shift/reduce conflict for GREATEREQ in state 186 resolved as shift
shift/reduce conflict for LESSEQ in state 186 resolved as shift
shift/reduce conflict for LESS in state 186 resolved as shift
shift/reduce conflict for EQEQ in state 186 resolved as shift
shift/reduce conflict for NOTEQ in state 186 resolved as shift
shift/reduce conflict for AND in state 186 resolved as shift
shift/reduce conflict for OR in state 186 resolved as shift
shift/reduce conflict for IN in state 221 resolved as shift
shift/reduce conflict for IN in state 239 resolved as shift