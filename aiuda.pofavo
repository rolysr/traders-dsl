Grammar:

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> PUT expr IN ID AT expr , expr SEP
Rule 17    envFunc -> RUN ID WITH expr ITERATIONS SEP
Rule 18    envFunc -> RESET ID SEP
Rule 19    envBody -> varList
Rule 20    agentBody -> varList
Rule 21    behaveBody -> statementList
Rule 22    varList -> empty
Rule 23    varList -> varAssign varList
Rule 24    varList -> varDecl varList
Rule 25    statementList -> empty
Rule 26    statementList -> statement statementList
Rule 27    statement -> primFuncStmt
Rule 28    statement -> incaseStmt
Rule 29    statement -> foreachStmt
Rule 30    statement -> repeatStmt
Rule 31    statement -> varAssign
Rule 32    statement -> varDecl
Rule 33    statement -> expr SEP
Rule 34    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 35    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 36    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 37    inothercaseStmt -> empty
Rule 38    inothercaseStmt -> OTHERWISE { statementList }
Rule 39    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 40    primFuncStmt -> PUT expr , expr SEP
Rule 41    primFuncStmt -> PICK expr SEP
Rule 42    primFuncStmt -> STOP SEP
Rule 43    primFuncStmt -> RESTART BEHAVE SEP
Rule 44    primFuncStmt -> SELL expr , expr , expr SEP
Rule 45    primFuncStmt -> buyStmt SEP
Rule 46    primFuncStmt -> moveStmt SEP
Rule 47    primFuncStmt -> TALK expr SEP
Rule 48    moveStmt -> MOVE RIGHT
Rule 49    moveStmt -> MOVE LEFT
Rule 50    moveStmt -> MOVE DOWN
Rule 51    moveStmt -> MOVE UP
Rule 52    moveStmt -> MOVE expr , expr
Rule 53    buyStmt -> BUY expr
Rule 54    buyStmt -> BUY expr , expr , expr
Rule 55    expr -> call
Rule 56    expr -> - expr  [precedence=right, level=9]
Rule 57    expr -> ! expr  [precedence=right, level=10]
Rule 58    expr -> expr / expr  [precedence=left, level=8]
Rule 59    expr -> expr * expr  [precedence=left, level=8]
Rule 60    expr -> expr - expr  [precedence=left, level=7]
Rule 61    expr -> expr + expr  [precedence=left, level=7]
Rule 62    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 63    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 64    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 65    expr -> expr LESS expr  [precedence=left, level=5]
Rule 66    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 67    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 68    expr -> expr AND expr  [precedence=left, level=3]
Rule 69    expr -> expr OR expr  [precedence=left, level=2]
Rule 70    call -> ID dotTail
Rule 71    call -> primitiveValue
Rule 72    call -> primary
Rule 73    getter -> ID dotTail
Rule 74    dotTail -> empty
Rule 75    dotTail -> [ expr ] dotTail
Rule 76    dotTail -> . idTail dotTail
Rule 77    idTail -> listFunc
Rule 78    idTail -> ID
Rule 79    listFunc -> REVERSE
Rule 80    listFunc -> POP
Rule 81    listFunc -> PUSH expr
Rule 82    listFunc -> SIZE
Rule 83    primitiveValue -> FIND PEERS
Rule 84    primitiveValue -> FIND OBJECTS
Rule 85    primitiveValue -> RANDOM FROM expr TO expr
Rule 86    primary -> ( expr )
Rule 87    primary -> { bookItems }
Rule 88    primary -> [ listItems ]
Rule 89    primary -> STRING
Rule 90    primary -> NUMBER
Rule 91    primary -> FALSE
Rule 92    primary -> TRUE
Rule 93    listItems -> empty
Rule 94    listItems -> expr , listItems
Rule 95    bookItems -> empty
Rule 96    bookItems -> STRING : ( listItems ) , bookItems
Rule 97    type -> BOOK_TYPE
Rule 98    type -> LIST_TYPE
Rule 99    type -> STRING_TYPE
Rule 100   type -> BOOL_TYPE
Rule 101   type -> NUMBER_TYPE
Rule 102   empty -> <empty>

Unused terminals:

    XORASGN
    SHLASGN
    INC
    ORASGN
    SLASHASGN
    MINUSASGN
    SHL
    DEC
    PLUSASGN
    GET
    SHRASGN
    SHR
    MODULOASGN
    ANDASGN
    STARASGN

Terminals, with rules where they appear:

!                    : 57
(                    : 86 96
)                    : 86 96
*                    : 59
+                    : 61
,                    : 16 40 44 44 52 54 54 94 96
-                    : 56 60
.                    : 76
/                    : 58
:                    : 13 14 96
AGENT                : 11
AND                  : 68
ANDASGN              : 
ASSIGN               : 13 15
AT                   : 16
BEHAVE               : 12 43
BOOK_TYPE            : 97
BOOL_TYPE            : 100
BUY                  : 53 54
CASE                 : 36 39
DEC                  : 
DOWN                 : 50
ENV                  : 10
EQEQ                 : 66
FALSE                : 91
FIND                 : 83 84
FOREACH              : 35
FROM                 : 85
GET                  : 
GREATER              : 62
GREATEREQ            : 63
ID                   : 10 11 12 13 14 16 17 18 35 70 73 78
IN                   : 16 35 36 39
INC                  : 
ITERATIONS           : 17
LEFT                 : 49
LESS                 : 65
LESSEQ               : 64
LET                  : 13 14
LIST_TYPE            : 98
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 48 49 50 51 52
NOTEQ                : 67
NUMBER               : 90
NUMBER_TYPE          : 101
OBJECTS              : 84
OR                   : 69
ORASGN               : 
OTHER                : 39
OTHERWISE            : 38
PEERS                : 83
PICK                 : 41
PLUSASGN             : 
POP                  : 80
PUSH                 : 81
PUT                  : 16 40
RANDOM               : 85
REPEAT               : 34
RESET                : 18
RESTART              : 43
REVERSE              : 79
RIGHT                : 48
RUN                  : 17
SELL                 : 44
SEP                  : 13 14 15 16 17 18 33 40 41 42 43 44 45 46 47
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 82
SLASHASGN            : 
STARASGN             : 
STOP                 : 42
STRING               : 89 96
STRING_TYPE          : 99
TALK                 : 47
TO                   : 85
TRUE                 : 92
UP                   : 51
WHEN                 : 34
WITH                 : 17
XORASGN              : 
[                    : 75 88
]                    : 75 88
error                : 
{                    : 10 11 12 34 35 36 38 39 87
}                    : 10 11 12 34 35 36 38 39 87

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 87 96
buyStmt              : 45
call                 : 55
declaration          : 3
declarationList      : 1 3
dotTail              : 70 73 75 76
empty                : 2 22 25 37 74 93 95
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 16 17 33 34 35 36 39 40 40 41 44 44 44 47 52 52 53 54 54 54 56 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 75 81 85 85 86 94
foreachStmt          : 29
getter               : 15
idTail               : 76
incaseStmt           : 28
inothercaseStmt      : 36 39
listFunc             : 77
listItems            : 88 94 96
moveStmt             : 46
primFuncStmt         : 27
primary              : 72
primitiveValue       : 71
program              : 0
repeatStmt           : 30
statement            : 26
statementList        : 21 26 34 35 36 38 39
type                 : 13 14
varAssign            : 5 23 31
varDecl              : 6 24 32
varList              : 19 20 23 24


state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (102) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT expr IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (73) getter -> . ID dotTail
    $end            reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    empty                          shift and go to state 3
    declaration                    shift and go to state 4
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 1

    (0) S' -> program .


state 2

    (1) program -> declarationList .
    $end            reduce using rule 1 (program -> declarationList .)


state 3

    (2) declarationList -> empty .
    $end            reduce using rule 2 (declarationList -> empty .)


state 4

    (3) declarationList -> declaration . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (102) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT expr IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (73) getter -> . ID dotTail
    $end            reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    declaration                    shift and go to state 4
    declarationList                shift and go to state 20
    empty                          shift and go to state 3
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 5

    (4) declaration -> envFunc .
    PUT             reduce using rule 4 (declaration -> envFunc .)
    RUN             reduce using rule 4 (declaration -> envFunc .)
    RESET           reduce using rule 4 (declaration -> envFunc .)
    LET             reduce using rule 4 (declaration -> envFunc .)
    BEHAVE          reduce using rule 4 (declaration -> envFunc .)
    AGENT           reduce using rule 4 (declaration -> envFunc .)
    ENV             reduce using rule 4 (declaration -> envFunc .)
    ID              reduce using rule 4 (declaration -> envFunc .)
    $end            reduce using rule 4 (declaration -> envFunc .)


state 6

    (5) declaration -> varAssign .
    PUT             reduce using rule 5 (declaration -> varAssign .)
    RUN             reduce using rule 5 (declaration -> varAssign .)
    RESET           reduce using rule 5 (declaration -> varAssign .)
    LET             reduce using rule 5 (declaration -> varAssign .)
    BEHAVE          reduce using rule 5 (declaration -> varAssign .)
    AGENT           reduce using rule 5 (declaration -> varAssign .)
    ENV             reduce using rule 5 (declaration -> varAssign .)
    ID              reduce using rule 5 (declaration -> varAssign .)
    $end            reduce using rule 5 (declaration -> varAssign .)


state 7

    (6) declaration -> varDecl .
    PUT             reduce using rule 6 (declaration -> varDecl .)
    RUN             reduce using rule 6 (declaration -> varDecl .)
    RESET           reduce using rule 6 (declaration -> varDecl .)
    LET             reduce using rule 6 (declaration -> varDecl .)
    BEHAVE          reduce using rule 6 (declaration -> varDecl .)
    AGENT           reduce using rule 6 (declaration -> varDecl .)
    ENV             reduce using rule 6 (declaration -> varDecl .)
    ID              reduce using rule 6 (declaration -> varDecl .)
    $end            reduce using rule 6 (declaration -> varDecl .)


state 8

    (7) declaration -> behaveDecl .
    PUT             reduce using rule 7 (declaration -> behaveDecl .)
    RUN             reduce using rule 7 (declaration -> behaveDecl .)
    RESET           reduce using rule 7 (declaration -> behaveDecl .)
    LET             reduce using rule 7 (declaration -> behaveDecl .)
    BEHAVE          reduce using rule 7 (declaration -> behaveDecl .)
    AGENT           reduce using rule 7 (declaration -> behaveDecl .)
    ENV             reduce using rule 7 (declaration -> behaveDecl .)
    ID              reduce using rule 7 (declaration -> behaveDecl .)
    $end            reduce using rule 7 (declaration -> behaveDecl .)


state 9

    (8) declaration -> agentDecl .
    PUT             reduce using rule 8 (declaration -> agentDecl .)
    RUN             reduce using rule 8 (declaration -> agentDecl .)
    RESET           reduce using rule 8 (declaration -> agentDecl .)
    LET             reduce using rule 8 (declaration -> agentDecl .)
    BEHAVE          reduce using rule 8 (declaration -> agentDecl .)
    AGENT           reduce using rule 8 (declaration -> agentDecl .)
    ENV             reduce using rule 8 (declaration -> agentDecl .)
    ID              reduce using rule 8 (declaration -> agentDecl .)
    $end            reduce using rule 8 (declaration -> agentDecl .)


state 10

    (9) declaration -> envDecl .
    PUT             reduce using rule 9 (declaration -> envDecl .)
    RUN             reduce using rule 9 (declaration -> envDecl .)
    RESET           reduce using rule 9 (declaration -> envDecl .)
    LET             reduce using rule 9 (declaration -> envDecl .)
    BEHAVE          reduce using rule 9 (declaration -> envDecl .)
    AGENT           reduce using rule 9 (declaration -> envDecl .)
    ENV             reduce using rule 9 (declaration -> envDecl .)
    ID              reduce using rule 9 (declaration -> envDecl .)
    $end            reduce using rule 9 (declaration -> envDecl .)


state 11

    (16) envFunc -> PUT . expr IN ID AT expr , expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 21
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 12

    (73) getter -> ID . dotTail
    (74) dotTail -> . empty
    (75) dotTail -> . [ expr ] dotTail
    (76) dotTail -> . . idTail dotTail
    (102) empty -> .
    [               shift and go to state 39
    .               shift and go to state 40
    ASSIGN          reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 37
    empty                          shift and go to state 38

state 13

    (17) envFunc -> RUN . ID WITH expr ITERATIONS SEP
    ID              shift and go to state 41


state 14

    (18) envFunc -> RESET . ID SEP
    ID              shift and go to state 42


state 15

    (15) varAssign -> getter . ASSIGN expr SEP
    ASSIGN          shift and go to state 43


state 16

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 44


state 17

    (12) behaveDecl -> BEHAVE . ID { behaveBody }
    ID              shift and go to state 45


state 18

    (11) agentDecl -> AGENT . ID { agentBody }
    ID              shift and go to state 46


state 19

    (10) envDecl -> ENV . ID { envBody }
    ID              shift and go to state 47


state 20

    (3) declarationList -> declaration declarationList .
    $end            reduce using rule 3 (declarationList -> declaration declarationList .)


state 21

    (16) envFunc -> PUT expr . IN ID AT expr , expr SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              shift and go to state 48
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 22

    (70) call -> ID . dotTail
    (74) dotTail -> . empty
    (75) dotTail -> . [ expr ] dotTail
    (76) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    ]               reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    ASSIGN          reduce using rule 102 (empty -> .)
    ITERATIONS      reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 61
    empty                          shift and go to state 38

state 23

    (55) expr -> call .
    IN              reduce using rule 55 (expr -> call .)
    /               reduce using rule 55 (expr -> call .)
    *               reduce using rule 55 (expr -> call .)
    -               reduce using rule 55 (expr -> call .)
    +               reduce using rule 55 (expr -> call .)
    GREATER         reduce using rule 55 (expr -> call .)
    GREATEREQ       reduce using rule 55 (expr -> call .)
    LESSEQ          reduce using rule 55 (expr -> call .)
    LESS            reduce using rule 55 (expr -> call .)
    EQEQ            reduce using rule 55 (expr -> call .)
    NOTEQ           reduce using rule 55 (expr -> call .)
    AND             reduce using rule 55 (expr -> call .)
    OR              reduce using rule 55 (expr -> call .)
    )               reduce using rule 55 (expr -> call .)
    ,               reduce using rule 55 (expr -> call .)
    ]               reduce using rule 55 (expr -> call .)
    SEP             reduce using rule 55 (expr -> call .)
    TO              reduce using rule 55 (expr -> call .)
    [               reduce using rule 55 (expr -> call .)
    .               reduce using rule 55 (expr -> call .)
    ASSIGN          reduce using rule 55 (expr -> call .)
    ITERATIONS      reduce using rule 55 (expr -> call .)
    {               reduce using rule 55 (expr -> call .)


state 24

    (56) expr -> - . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 62
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 25

    (57) expr -> ! . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 63
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 26

    (71) call -> primitiveValue .
    IN              reduce using rule 71 (call -> primitiveValue .)
    /               reduce using rule 71 (call -> primitiveValue .)
    *               reduce using rule 71 (call -> primitiveValue .)
    -               reduce using rule 71 (call -> primitiveValue .)
    +               reduce using rule 71 (call -> primitiveValue .)
    GREATER         reduce using rule 71 (call -> primitiveValue .)
    GREATEREQ       reduce using rule 71 (call -> primitiveValue .)
    LESSEQ          reduce using rule 71 (call -> primitiveValue .)
    LESS            reduce using rule 71 (call -> primitiveValue .)
    EQEQ            reduce using rule 71 (call -> primitiveValue .)
    NOTEQ           reduce using rule 71 (call -> primitiveValue .)
    AND             reduce using rule 71 (call -> primitiveValue .)
    OR              reduce using rule 71 (call -> primitiveValue .)
    )               reduce using rule 71 (call -> primitiveValue .)
    ,               reduce using rule 71 (call -> primitiveValue .)
    ]               reduce using rule 71 (call -> primitiveValue .)
    SEP             reduce using rule 71 (call -> primitiveValue .)
    TO              reduce using rule 71 (call -> primitiveValue .)
    [               reduce using rule 71 (call -> primitiveValue .)
    .               reduce using rule 71 (call -> primitiveValue .)
    ASSIGN          reduce using rule 71 (call -> primitiveValue .)
    ITERATIONS      reduce using rule 71 (call -> primitiveValue .)
    {               reduce using rule 71 (call -> primitiveValue .)


state 27

    (72) call -> primary .
    IN              reduce using rule 72 (call -> primary .)
    /               reduce using rule 72 (call -> primary .)
    *               reduce using rule 72 (call -> primary .)
    -               reduce using rule 72 (call -> primary .)
    +               reduce using rule 72 (call -> primary .)
    GREATER         reduce using rule 72 (call -> primary .)
    GREATEREQ       reduce using rule 72 (call -> primary .)
    LESSEQ          reduce using rule 72 (call -> primary .)
    LESS            reduce using rule 72 (call -> primary .)
    EQEQ            reduce using rule 72 (call -> primary .)
    NOTEQ           reduce using rule 72 (call -> primary .)
    AND             reduce using rule 72 (call -> primary .)
    OR              reduce using rule 72 (call -> primary .)
    )               reduce using rule 72 (call -> primary .)
    ,               reduce using rule 72 (call -> primary .)
    ]               reduce using rule 72 (call -> primary .)
    SEP             reduce using rule 72 (call -> primary .)
    TO              reduce using rule 72 (call -> primary .)
    [               reduce using rule 72 (call -> primary .)
    .               reduce using rule 72 (call -> primary .)
    ASSIGN          reduce using rule 72 (call -> primary .)
    ITERATIONS      reduce using rule 72 (call -> primary .)
    {               reduce using rule 72 (call -> primary .)


state 28

    (83) primitiveValue -> FIND . PEERS
    (84) primitiveValue -> FIND . OBJECTS
    PEERS           shift and go to state 64
    OBJECTS         shift and go to state 65


state 29

    (85) primitiveValue -> RANDOM . FROM expr TO expr
    FROM            shift and go to state 66


state 30

    (86) primary -> ( . expr )
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 67
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 31

    (87) primary -> { . bookItems }
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 70
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 68
    empty                          shift and go to state 69

state 32

    (88) primary -> [ . listItems ]
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    listItems                      shift and go to state 71
    empty                          shift and go to state 72
    expr                           shift and go to state 73
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 33

    (89) primary -> STRING .
    IN              reduce using rule 89 (primary -> STRING .)
    /               reduce using rule 89 (primary -> STRING .)
    *               reduce using rule 89 (primary -> STRING .)
    -               reduce using rule 89 (primary -> STRING .)
    +               reduce using rule 89 (primary -> STRING .)
    GREATER         reduce using rule 89 (primary -> STRING .)
    GREATEREQ       reduce using rule 89 (primary -> STRING .)
    LESSEQ          reduce using rule 89 (primary -> STRING .)
    LESS            reduce using rule 89 (primary -> STRING .)
    EQEQ            reduce using rule 89 (primary -> STRING .)
    NOTEQ           reduce using rule 89 (primary -> STRING .)
    AND             reduce using rule 89 (primary -> STRING .)
    OR              reduce using rule 89 (primary -> STRING .)
    )               reduce using rule 89 (primary -> STRING .)
    ,               reduce using rule 89 (primary -> STRING .)
    ]               reduce using rule 89 (primary -> STRING .)
    SEP             reduce using rule 89 (primary -> STRING .)
    TO              reduce using rule 89 (primary -> STRING .)
    [               reduce using rule 89 (primary -> STRING .)
    .               reduce using rule 89 (primary -> STRING .)
    ASSIGN          reduce using rule 89 (primary -> STRING .)
    ITERATIONS      reduce using rule 89 (primary -> STRING .)
    {               reduce using rule 89 (primary -> STRING .)


state 34

    (90) primary -> NUMBER .
    IN              reduce using rule 90 (primary -> NUMBER .)
    /               reduce using rule 90 (primary -> NUMBER .)
    *               reduce using rule 90 (primary -> NUMBER .)
    -               reduce using rule 90 (primary -> NUMBER .)
    +               reduce using rule 90 (primary -> NUMBER .)
    GREATER         reduce using rule 90 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 90 (primary -> NUMBER .)
    LESSEQ          reduce using rule 90 (primary -> NUMBER .)
    LESS            reduce using rule 90 (primary -> NUMBER .)
    EQEQ            reduce using rule 90 (primary -> NUMBER .)
    NOTEQ           reduce using rule 90 (primary -> NUMBER .)
    AND             reduce using rule 90 (primary -> NUMBER .)
    OR              reduce using rule 90 (primary -> NUMBER .)
    )               reduce using rule 90 (primary -> NUMBER .)
    ,               reduce using rule 90 (primary -> NUMBER .)
    ]               reduce using rule 90 (primary -> NUMBER .)
    SEP             reduce using rule 90 (primary -> NUMBER .)
    TO              reduce using rule 90 (primary -> NUMBER .)
    [               reduce using rule 90 (primary -> NUMBER .)
    .               reduce using rule 90 (primary -> NUMBER .)
    ASSIGN          reduce using rule 90 (primary -> NUMBER .)
    ITERATIONS      reduce using rule 90 (primary -> NUMBER .)
    {               reduce using rule 90 (primary -> NUMBER .)


state 35

    (91) primary -> FALSE .
    IN              reduce using rule 91 (primary -> FALSE .)
    /               reduce using rule 91 (primary -> FALSE .)
    *               reduce using rule 91 (primary -> FALSE .)
    -               reduce using rule 91 (primary -> FALSE .)
    +               reduce using rule 91 (primary -> FALSE .)
    GREATER         reduce using rule 91 (primary -> FALSE .)
    GREATEREQ       reduce using rule 91 (primary -> FALSE .)
    LESSEQ          reduce using rule 91 (primary -> FALSE .)
    LESS            reduce using rule 91 (primary -> FALSE .)
    EQEQ            reduce using rule 91 (primary -> FALSE .)
    NOTEQ           reduce using rule 91 (primary -> FALSE .)
    AND             reduce using rule 91 (primary -> FALSE .)
    OR              reduce using rule 91 (primary -> FALSE .)
    )               reduce using rule 91 (primary -> FALSE .)
    ,               reduce using rule 91 (primary -> FALSE .)
    ]               reduce using rule 91 (primary -> FALSE .)
    SEP             reduce using rule 91 (primary -> FALSE .)
    TO              reduce using rule 91 (primary -> FALSE .)
    [               reduce using rule 91 (primary -> FALSE .)
    .               reduce using rule 91 (primary -> FALSE .)
    ASSIGN          reduce using rule 91 (primary -> FALSE .)
    ITERATIONS      reduce using rule 91 (primary -> FALSE .)
    {               reduce using rule 91 (primary -> FALSE .)


state 36

    (92) primary -> TRUE .
    IN              reduce using rule 92 (primary -> TRUE .)
    /               reduce using rule 92 (primary -> TRUE .)
    *               reduce using rule 92 (primary -> TRUE .)
    -               reduce using rule 92 (primary -> TRUE .)
    +               reduce using rule 92 (primary -> TRUE .)
    GREATER         reduce using rule 92 (primary -> TRUE .)
    GREATEREQ       reduce using rule 92 (primary -> TRUE .)
    LESSEQ          reduce using rule 92 (primary -> TRUE .)
    LESS            reduce using rule 92 (primary -> TRUE .)
    EQEQ            reduce using rule 92 (primary -> TRUE .)
    NOTEQ           reduce using rule 92 (primary -> TRUE .)
    AND             reduce using rule 92 (primary -> TRUE .)
    OR              reduce using rule 92 (primary -> TRUE .)
    )               reduce using rule 92 (primary -> TRUE .)
    ,               reduce using rule 92 (primary -> TRUE .)
    ]               reduce using rule 92 (primary -> TRUE .)
    SEP             reduce using rule 92 (primary -> TRUE .)
    TO              reduce using rule 92 (primary -> TRUE .)
    [               reduce using rule 92 (primary -> TRUE .)
    .               reduce using rule 92 (primary -> TRUE .)
    ASSIGN          reduce using rule 92 (primary -> TRUE .)
    ITERATIONS      reduce using rule 92 (primary -> TRUE .)
    {               reduce using rule 92 (primary -> TRUE .)


state 37

    (73) getter -> ID dotTail .
    ASSIGN          reduce using rule 73 (getter -> ID dotTail .)


state 38

    (74) dotTail -> empty .
    ASSIGN          reduce using rule 74 (dotTail -> empty .)
    IN              reduce using rule 74 (dotTail -> empty .)
    /               reduce using rule 74 (dotTail -> empty .)
    *               reduce using rule 74 (dotTail -> empty .)
    -               reduce using rule 74 (dotTail -> empty .)
    +               reduce using rule 74 (dotTail -> empty .)
    GREATER         reduce using rule 74 (dotTail -> empty .)
    GREATEREQ       reduce using rule 74 (dotTail -> empty .)
    LESSEQ          reduce using rule 74 (dotTail -> empty .)
    LESS            reduce using rule 74 (dotTail -> empty .)
    EQEQ            reduce using rule 74 (dotTail -> empty .)
    NOTEQ           reduce using rule 74 (dotTail -> empty .)
    AND             reduce using rule 74 (dotTail -> empty .)
    OR              reduce using rule 74 (dotTail -> empty .)
    )               reduce using rule 74 (dotTail -> empty .)
    ,               reduce using rule 74 (dotTail -> empty .)
    ]               reduce using rule 74 (dotTail -> empty .)
    SEP             reduce using rule 74 (dotTail -> empty .)
    TO              reduce using rule 74 (dotTail -> empty .)
    [               reduce using rule 74 (dotTail -> empty .)
    .               reduce using rule 74 (dotTail -> empty .)
    ITERATIONS      reduce using rule 74 (dotTail -> empty .)
    {               reduce using rule 74 (dotTail -> empty .)


state 39

    (75) dotTail -> [ . expr ] dotTail
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 74
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 40

    (76) dotTail -> . . idTail dotTail
    (77) idTail -> . listFunc
    (78) idTail -> . ID
    (79) listFunc -> . REVERSE
    (80) listFunc -> . POP
    (81) listFunc -> . PUSH expr
    (82) listFunc -> . SIZE
    ID              shift and go to state 77
    REVERSE         shift and go to state 78
    POP             shift and go to state 79
    PUSH            shift and go to state 80
    SIZE            shift and go to state 81

    idTail                         shift and go to state 75
    listFunc                       shift and go to state 76

state 41

    (17) envFunc -> RUN ID . WITH expr ITERATIONS SEP
    WITH            shift and go to state 82


state 42

    (18) envFunc -> RESET ID . SEP
    SEP             shift and go to state 83


state 43

    (15) varAssign -> getter ASSIGN . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 84
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 44

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 85


state 45

    (12) behaveDecl -> BEHAVE ID . { behaveBody }
    {               shift and go to state 86


state 46

    (11) agentDecl -> AGENT ID . { agentBody }
    {               shift and go to state 87


state 47

    (10) envDecl -> ENV ID . { envBody }
    {               shift and go to state 88


state 48

    (16) envFunc -> PUT expr IN . ID AT expr , expr SEP
    ID              shift and go to state 89


state 49

    (58) expr -> expr / . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 90
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 50

    (59) expr -> expr * . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 91
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 51

    (60) expr -> expr - . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 92
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 52

    (61) expr -> expr + . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 93
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 53

    (62) expr -> expr GREATER . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 94
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 54

    (63) expr -> expr GREATEREQ . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 95
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 55

    (64) expr -> expr LESSEQ . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 96
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 56

    (65) expr -> expr LESS . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 97
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 57

    (66) expr -> expr EQEQ . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 98
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 58

    (67) expr -> expr NOTEQ . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 99
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 59

    (68) expr -> expr AND . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 100
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 60

    (69) expr -> expr OR . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 101
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 61

    (70) call -> ID dotTail .
    IN              reduce using rule 70 (call -> ID dotTail .)
    /               reduce using rule 70 (call -> ID dotTail .)
    *               reduce using rule 70 (call -> ID dotTail .)
    -               reduce using rule 70 (call -> ID dotTail .)
    +               reduce using rule 70 (call -> ID dotTail .)
    GREATER         reduce using rule 70 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 70 (call -> ID dotTail .)
    LESSEQ          reduce using rule 70 (call -> ID dotTail .)
    LESS            reduce using rule 70 (call -> ID dotTail .)
    EQEQ            reduce using rule 70 (call -> ID dotTail .)
    NOTEQ           reduce using rule 70 (call -> ID dotTail .)
    AND             reduce using rule 70 (call -> ID dotTail .)
    OR              reduce using rule 70 (call -> ID dotTail .)
    )               reduce using rule 70 (call -> ID dotTail .)
    ,               reduce using rule 70 (call -> ID dotTail .)
    ]               reduce using rule 70 (call -> ID dotTail .)
    SEP             reduce using rule 70 (call -> ID dotTail .)
    TO              reduce using rule 70 (call -> ID dotTail .)
    [               reduce using rule 70 (call -> ID dotTail .)
    .               reduce using rule 70 (call -> ID dotTail .)
    ASSIGN          reduce using rule 70 (call -> ID dotTail .)
    ITERATIONS      reduce using rule 70 (call -> ID dotTail .)
    {               reduce using rule 70 (call -> ID dotTail .)


state 62

    (56) expr -> - expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 56 (expr -> - expr .)
    /               reduce using rule 56 (expr -> - expr .)
    *               reduce using rule 56 (expr -> - expr .)
    -               reduce using rule 56 (expr -> - expr .)
    +               reduce using rule 56 (expr -> - expr .)
    GREATER         reduce using rule 56 (expr -> - expr .)
    GREATEREQ       reduce using rule 56 (expr -> - expr .)
    LESSEQ          reduce using rule 56 (expr -> - expr .)
    LESS            reduce using rule 56 (expr -> - expr .)
    EQEQ            reduce using rule 56 (expr -> - expr .)
    NOTEQ           reduce using rule 56 (expr -> - expr .)
    AND             reduce using rule 56 (expr -> - expr .)
    OR              reduce using rule 56 (expr -> - expr .)
    )               reduce using rule 56 (expr -> - expr .)
    ,               reduce using rule 56 (expr -> - expr .)
    ]               reduce using rule 56 (expr -> - expr .)
    SEP             reduce using rule 56 (expr -> - expr .)
    TO              reduce using rule 56 (expr -> - expr .)
    [               reduce using rule 56 (expr -> - expr .)
    .               reduce using rule 56 (expr -> - expr .)
    ASSIGN          reduce using rule 56 (expr -> - expr .)
    ITERATIONS      reduce using rule 56 (expr -> - expr .)
    {               reduce using rule 56 (expr -> - expr .)


state 63

    (57) expr -> ! expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 57 (expr -> ! expr .)
    /               reduce using rule 57 (expr -> ! expr .)
    *               reduce using rule 57 (expr -> ! expr .)
    -               reduce using rule 57 (expr -> ! expr .)
    +               reduce using rule 57 (expr -> ! expr .)
    GREATER         reduce using rule 57 (expr -> ! expr .)
    GREATEREQ       reduce using rule 57 (expr -> ! expr .)
    LESSEQ          reduce using rule 57 (expr -> ! expr .)
    LESS            reduce using rule 57 (expr -> ! expr .)
    EQEQ            reduce using rule 57 (expr -> ! expr .)
    NOTEQ           reduce using rule 57 (expr -> ! expr .)
    AND             reduce using rule 57 (expr -> ! expr .)
    OR              reduce using rule 57 (expr -> ! expr .)
    )               reduce using rule 57 (expr -> ! expr .)
    ,               reduce using rule 57 (expr -> ! expr .)
    ]               reduce using rule 57 (expr -> ! expr .)
    SEP             reduce using rule 57 (expr -> ! expr .)
    TO              reduce using rule 57 (expr -> ! expr .)
    [               reduce using rule 57 (expr -> ! expr .)
    .               reduce using rule 57 (expr -> ! expr .)
    ASSIGN          reduce using rule 57 (expr -> ! expr .)
    ITERATIONS      reduce using rule 57 (expr -> ! expr .)
    {               reduce using rule 57 (expr -> ! expr .)


state 64

    (83) primitiveValue -> FIND PEERS .
    IN              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    /               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    *               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    -               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    +               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATER         reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATEREQ       reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESSEQ          reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESS            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    EQEQ            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    NOTEQ           reduce using rule 83 (primitiveValue -> FIND PEERS .)
    AND             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    OR              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    )               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ,               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ]               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    SEP             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    TO              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    [               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    .               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ASSIGN          reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ITERATIONS      reduce using rule 83 (primitiveValue -> FIND PEERS .)
    {               reduce using rule 83 (primitiveValue -> FIND PEERS .)


state 65

    (84) primitiveValue -> FIND OBJECTS .
    IN              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    /               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    *               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    -               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    +               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATER         reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATEREQ       reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESSEQ          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESS            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    EQEQ            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    NOTEQ           reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    AND             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    OR              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    )               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ,               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ]               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    SEP             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    TO              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    [               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    .               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ASSIGN          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ITERATIONS      reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    {               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)


state 66

    (85) primitiveValue -> RANDOM FROM . expr TO expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 102
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 67

    (86) primary -> ( expr . )
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    )               shift and go to state 103
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 68

    (87) primary -> { bookItems . }
    }               shift and go to state 104


state 69

    (95) bookItems -> empty .
    }               reduce using rule 95 (bookItems -> empty .)


state 70

    (96) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 105


state 71

    (88) primary -> [ listItems . ]
    ]               shift and go to state 106


state 72

    (93) listItems -> empty .
    ]               reduce using rule 93 (listItems -> empty .)
    )               reduce using rule 93 (listItems -> empty .)


state 73

    (94) listItems -> expr . , listItems
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 107
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 74

    (75) dotTail -> [ expr . ] dotTail
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ]               shift and go to state 108
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 75

    (76) dotTail -> . idTail . dotTail
    (74) dotTail -> . empty
    (75) dotTail -> . [ expr ] dotTail
    (76) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    ]               reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    ASSIGN          reduce using rule 102 (empty -> .)
    ITERATIONS      reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 109
    empty                          shift and go to state 38

state 76

    (77) idTail -> listFunc .
    IN              reduce using rule 77 (idTail -> listFunc .)
    /               reduce using rule 77 (idTail -> listFunc .)
    *               reduce using rule 77 (idTail -> listFunc .)
    -               reduce using rule 77 (idTail -> listFunc .)
    +               reduce using rule 77 (idTail -> listFunc .)
    GREATER         reduce using rule 77 (idTail -> listFunc .)
    GREATEREQ       reduce using rule 77 (idTail -> listFunc .)
    LESSEQ          reduce using rule 77 (idTail -> listFunc .)
    LESS            reduce using rule 77 (idTail -> listFunc .)
    EQEQ            reduce using rule 77 (idTail -> listFunc .)
    NOTEQ           reduce using rule 77 (idTail -> listFunc .)
    AND             reduce using rule 77 (idTail -> listFunc .)
    OR              reduce using rule 77 (idTail -> listFunc .)
    )               reduce using rule 77 (idTail -> listFunc .)
    ,               reduce using rule 77 (idTail -> listFunc .)
    ]               reduce using rule 77 (idTail -> listFunc .)
    SEP             reduce using rule 77 (idTail -> listFunc .)
    TO              reduce using rule 77 (idTail -> listFunc .)
    [               reduce using rule 77 (idTail -> listFunc .)
    .               reduce using rule 77 (idTail -> listFunc .)
    ASSIGN          reduce using rule 77 (idTail -> listFunc .)
    ITERATIONS      reduce using rule 77 (idTail -> listFunc .)
    {               reduce using rule 77 (idTail -> listFunc .)


state 77

    (78) idTail -> ID .
    IN              reduce using rule 78 (idTail -> ID .)
    /               reduce using rule 78 (idTail -> ID .)
    *               reduce using rule 78 (idTail -> ID .)
    -               reduce using rule 78 (idTail -> ID .)
    +               reduce using rule 78 (idTail -> ID .)
    GREATER         reduce using rule 78 (idTail -> ID .)
    GREATEREQ       reduce using rule 78 (idTail -> ID .)
    LESSEQ          reduce using rule 78 (idTail -> ID .)
    LESS            reduce using rule 78 (idTail -> ID .)
    EQEQ            reduce using rule 78 (idTail -> ID .)
    NOTEQ           reduce using rule 78 (idTail -> ID .)
    AND             reduce using rule 78 (idTail -> ID .)
    OR              reduce using rule 78 (idTail -> ID .)
    )               reduce using rule 78 (idTail -> ID .)
    ,               reduce using rule 78 (idTail -> ID .)
    ]               reduce using rule 78 (idTail -> ID .)
    SEP             reduce using rule 78 (idTail -> ID .)
    TO              reduce using rule 78 (idTail -> ID .)
    [               reduce using rule 78 (idTail -> ID .)
    .               reduce using rule 78 (idTail -> ID .)
    ASSIGN          reduce using rule 78 (idTail -> ID .)
    ITERATIONS      reduce using rule 78 (idTail -> ID .)
    {               reduce using rule 78 (idTail -> ID .)


state 78

    (79) listFunc -> REVERSE .
    IN              reduce using rule 79 (listFunc -> REVERSE .)
    /               reduce using rule 79 (listFunc -> REVERSE .)
    *               reduce using rule 79 (listFunc -> REVERSE .)
    -               reduce using rule 79 (listFunc -> REVERSE .)
    +               reduce using rule 79 (listFunc -> REVERSE .)
    GREATER         reduce using rule 79 (listFunc -> REVERSE .)
    GREATEREQ       reduce using rule 79 (listFunc -> REVERSE .)
    LESSEQ          reduce using rule 79 (listFunc -> REVERSE .)
    LESS            reduce using rule 79 (listFunc -> REVERSE .)
    EQEQ            reduce using rule 79 (listFunc -> REVERSE .)
    NOTEQ           reduce using rule 79 (listFunc -> REVERSE .)
    AND             reduce using rule 79 (listFunc -> REVERSE .)
    OR              reduce using rule 79 (listFunc -> REVERSE .)
    )               reduce using rule 79 (listFunc -> REVERSE .)
    ,               reduce using rule 79 (listFunc -> REVERSE .)
    ]               reduce using rule 79 (listFunc -> REVERSE .)
    SEP             reduce using rule 79 (listFunc -> REVERSE .)
    TO              reduce using rule 79 (listFunc -> REVERSE .)
    [               reduce using rule 79 (listFunc -> REVERSE .)
    .               reduce using rule 79 (listFunc -> REVERSE .)
    ASSIGN          reduce using rule 79 (listFunc -> REVERSE .)
    ITERATIONS      reduce using rule 79 (listFunc -> REVERSE .)
    {               reduce using rule 79 (listFunc -> REVERSE .)


state 79

    (80) listFunc -> POP .
    IN              reduce using rule 80 (listFunc -> POP .)
    /               reduce using rule 80 (listFunc -> POP .)
    *               reduce using rule 80 (listFunc -> POP .)
    -               reduce using rule 80 (listFunc -> POP .)
    +               reduce using rule 80 (listFunc -> POP .)
    GREATER         reduce using rule 80 (listFunc -> POP .)
    GREATEREQ       reduce using rule 80 (listFunc -> POP .)
    LESSEQ          reduce using rule 80 (listFunc -> POP .)
    LESS            reduce using rule 80 (listFunc -> POP .)
    EQEQ            reduce using rule 80 (listFunc -> POP .)
    NOTEQ           reduce using rule 80 (listFunc -> POP .)
    AND             reduce using rule 80 (listFunc -> POP .)
    OR              reduce using rule 80 (listFunc -> POP .)
    )               reduce using rule 80 (listFunc -> POP .)
    ,               reduce using rule 80 (listFunc -> POP .)
    ]               reduce using rule 80 (listFunc -> POP .)
    SEP             reduce using rule 80 (listFunc -> POP .)
    TO              reduce using rule 80 (listFunc -> POP .)
    [               reduce using rule 80 (listFunc -> POP .)
    .               reduce using rule 80 (listFunc -> POP .)
    ASSIGN          reduce using rule 80 (listFunc -> POP .)
    ITERATIONS      reduce using rule 80 (listFunc -> POP .)
    {               reduce using rule 80 (listFunc -> POP .)


state 80

    (81) listFunc -> PUSH . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 110
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 81

    (82) listFunc -> SIZE .
    IN              reduce using rule 82 (listFunc -> SIZE .)
    /               reduce using rule 82 (listFunc -> SIZE .)
    *               reduce using rule 82 (listFunc -> SIZE .)
    -               reduce using rule 82 (listFunc -> SIZE .)
    +               reduce using rule 82 (listFunc -> SIZE .)
    GREATER         reduce using rule 82 (listFunc -> SIZE .)
    GREATEREQ       reduce using rule 82 (listFunc -> SIZE .)
    LESSEQ          reduce using rule 82 (listFunc -> SIZE .)
    LESS            reduce using rule 82 (listFunc -> SIZE .)
    EQEQ            reduce using rule 82 (listFunc -> SIZE .)
    NOTEQ           reduce using rule 82 (listFunc -> SIZE .)
    AND             reduce using rule 82 (listFunc -> SIZE .)
    OR              reduce using rule 82 (listFunc -> SIZE .)
    )               reduce using rule 82 (listFunc -> SIZE .)
    ,               reduce using rule 82 (listFunc -> SIZE .)
    ]               reduce using rule 82 (listFunc -> SIZE .)
    SEP             reduce using rule 82 (listFunc -> SIZE .)
    TO              reduce using rule 82 (listFunc -> SIZE .)
    [               reduce using rule 82 (listFunc -> SIZE .)
    .               reduce using rule 82 (listFunc -> SIZE .)
    ASSIGN          reduce using rule 82 (listFunc -> SIZE .)
    ITERATIONS      reduce using rule 82 (listFunc -> SIZE .)
    {               reduce using rule 82 (listFunc -> SIZE .)


state 82

    (17) envFunc -> RUN ID WITH . expr ITERATIONS SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 111
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 83

    (18) envFunc -> RESET ID SEP .
    PUT             reduce using rule 18 (envFunc -> RESET ID SEP .)
    RUN             reduce using rule 18 (envFunc -> RESET ID SEP .)
    RESET           reduce using rule 18 (envFunc -> RESET ID SEP .)
    LET             reduce using rule 18 (envFunc -> RESET ID SEP .)
    BEHAVE          reduce using rule 18 (envFunc -> RESET ID SEP .)
    AGENT           reduce using rule 18 (envFunc -> RESET ID SEP .)
    ENV             reduce using rule 18 (envFunc -> RESET ID SEP .)
    ID              reduce using rule 18 (envFunc -> RESET ID SEP .)
    $end            reduce using rule 18 (envFunc -> RESET ID SEP .)


state 84

    (15) varAssign -> getter ASSIGN expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 112
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 85

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (97) type -> . BOOK_TYPE
    (98) type -> . LIST_TYPE
    (99) type -> . STRING_TYPE
    (100) type -> . BOOL_TYPE
    (101) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 114
    LIST_TYPE       shift and go to state 115
    STRING_TYPE     shift and go to state 116
    BOOL_TYPE       shift and go to state 117
    NUMBER_TYPE     shift and go to state 118

    type                           shift and go to state 113

state 86

    (12) behaveDecl -> BEHAVE ID { . behaveBody }
    (21) behaveBody -> . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    behaveBody                     shift and go to state 120
    statementList                  shift and go to state 121
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    expr                           shift and go to state 130
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 87

    (11) agentDecl -> AGENT ID { . agentBody }
    (20) agentBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (73) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    agentBody                      shift and go to state 144
    varList                        shift and go to state 145
    empty                          shift and go to state 146
    varAssign                      shift and go to state 147
    varDecl                        shift and go to state 148
    getter                         shift and go to state 15

state 88

    (10) envDecl -> ENV ID { . envBody }
    (19) envBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (73) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    envBody                        shift and go to state 149
    varList                        shift and go to state 150
    empty                          shift and go to state 146
    varAssign                      shift and go to state 147
    varDecl                        shift and go to state 148
    getter                         shift and go to state 15

state 89

    (16) envFunc -> PUT expr IN ID . AT expr , expr SEP
    AT              shift and go to state 151


state 90

    (58) expr -> expr / expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 58 (expr -> expr / expr .)
    /               reduce using rule 58 (expr -> expr / expr .)
    *               reduce using rule 58 (expr -> expr / expr .)
    -               reduce using rule 58 (expr -> expr / expr .)
    +               reduce using rule 58 (expr -> expr / expr .)
    GREATER         reduce using rule 58 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 58 (expr -> expr / expr .)
    LESSEQ          reduce using rule 58 (expr -> expr / expr .)
    LESS            reduce using rule 58 (expr -> expr / expr .)
    EQEQ            reduce using rule 58 (expr -> expr / expr .)
    NOTEQ           reduce using rule 58 (expr -> expr / expr .)
    AND             reduce using rule 58 (expr -> expr / expr .)
    OR              reduce using rule 58 (expr -> expr / expr .)
    )               reduce using rule 58 (expr -> expr / expr .)
    ,               reduce using rule 58 (expr -> expr / expr .)
    ]               reduce using rule 58 (expr -> expr / expr .)
    SEP             reduce using rule 58 (expr -> expr / expr .)
    TO              reduce using rule 58 (expr -> expr / expr .)
    [               reduce using rule 58 (expr -> expr / expr .)
    .               reduce using rule 58 (expr -> expr / expr .)
    ASSIGN          reduce using rule 58 (expr -> expr / expr .)
    ITERATIONS      reduce using rule 58 (expr -> expr / expr .)
    {               reduce using rule 58 (expr -> expr / expr .)


state 91

    (59) expr -> expr * expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 59 (expr -> expr * expr .)
    /               reduce using rule 59 (expr -> expr * expr .)
    *               reduce using rule 59 (expr -> expr * expr .)
    -               reduce using rule 59 (expr -> expr * expr .)
    +               reduce using rule 59 (expr -> expr * expr .)
    GREATER         reduce using rule 59 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 59 (expr -> expr * expr .)
    LESSEQ          reduce using rule 59 (expr -> expr * expr .)
    LESS            reduce using rule 59 (expr -> expr * expr .)
    EQEQ            reduce using rule 59 (expr -> expr * expr .)
    NOTEQ           reduce using rule 59 (expr -> expr * expr .)
    AND             reduce using rule 59 (expr -> expr * expr .)
    OR              reduce using rule 59 (expr -> expr * expr .)
    )               reduce using rule 59 (expr -> expr * expr .)
    ,               reduce using rule 59 (expr -> expr * expr .)
    ]               reduce using rule 59 (expr -> expr * expr .)
    SEP             reduce using rule 59 (expr -> expr * expr .)
    TO              reduce using rule 59 (expr -> expr * expr .)
    [               reduce using rule 59 (expr -> expr * expr .)
    .               reduce using rule 59 (expr -> expr * expr .)
    ASSIGN          reduce using rule 59 (expr -> expr * expr .)
    ITERATIONS      reduce using rule 59 (expr -> expr * expr .)
    {               reduce using rule 59 (expr -> expr * expr .)


state 92

    (60) expr -> expr - expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 60 (expr -> expr - expr .)
    -               reduce using rule 60 (expr -> expr - expr .)
    +               reduce using rule 60 (expr -> expr - expr .)
    GREATER         reduce using rule 60 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 60 (expr -> expr - expr .)
    LESSEQ          reduce using rule 60 (expr -> expr - expr .)
    LESS            reduce using rule 60 (expr -> expr - expr .)
    EQEQ            reduce using rule 60 (expr -> expr - expr .)
    NOTEQ           reduce using rule 60 (expr -> expr - expr .)
    AND             reduce using rule 60 (expr -> expr - expr .)
    OR              reduce using rule 60 (expr -> expr - expr .)
    )               reduce using rule 60 (expr -> expr - expr .)
    ,               reduce using rule 60 (expr -> expr - expr .)
    ]               reduce using rule 60 (expr -> expr - expr .)
    SEP             reduce using rule 60 (expr -> expr - expr .)
    TO              reduce using rule 60 (expr -> expr - expr .)
    [               reduce using rule 60 (expr -> expr - expr .)
    .               reduce using rule 60 (expr -> expr - expr .)
    ASSIGN          reduce using rule 60 (expr -> expr - expr .)
    ITERATIONS      reduce using rule 60 (expr -> expr - expr .)
    {               reduce using rule 60 (expr -> expr - expr .)
    /               shift and go to state 49
    *               shift and go to state 50


state 93

    (61) expr -> expr + expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 61 (expr -> expr + expr .)
    -               reduce using rule 61 (expr -> expr + expr .)
    +               reduce using rule 61 (expr -> expr + expr .)
    GREATER         reduce using rule 61 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr + expr .)
    LESSEQ          reduce using rule 61 (expr -> expr + expr .)
    LESS            reduce using rule 61 (expr -> expr + expr .)
    EQEQ            reduce using rule 61 (expr -> expr + expr .)
    NOTEQ           reduce using rule 61 (expr -> expr + expr .)
    AND             reduce using rule 61 (expr -> expr + expr .)
    OR              reduce using rule 61 (expr -> expr + expr .)
    )               reduce using rule 61 (expr -> expr + expr .)
    ,               reduce using rule 61 (expr -> expr + expr .)
    ]               reduce using rule 61 (expr -> expr + expr .)
    SEP             reduce using rule 61 (expr -> expr + expr .)
    TO              reduce using rule 61 (expr -> expr + expr .)
    [               reduce using rule 61 (expr -> expr + expr .)
    .               reduce using rule 61 (expr -> expr + expr .)
    ASSIGN          reduce using rule 61 (expr -> expr + expr .)
    ITERATIONS      reduce using rule 61 (expr -> expr + expr .)
    {               reduce using rule 61 (expr -> expr + expr .)
    /               shift and go to state 49
    *               shift and go to state 50


state 94

    (62) expr -> expr GREATER expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 62 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 62 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 62 (expr -> expr GREATER expr .)
    LESS            reduce using rule 62 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 62 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 62 (expr -> expr GREATER expr .)
    AND             reduce using rule 62 (expr -> expr GREATER expr .)
    OR              reduce using rule 62 (expr -> expr GREATER expr .)
    )               reduce using rule 62 (expr -> expr GREATER expr .)
    ,               reduce using rule 62 (expr -> expr GREATER expr .)
    ]               reduce using rule 62 (expr -> expr GREATER expr .)
    SEP             reduce using rule 62 (expr -> expr GREATER expr .)
    TO              reduce using rule 62 (expr -> expr GREATER expr .)
    [               reduce using rule 62 (expr -> expr GREATER expr .)
    .               reduce using rule 62 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 62 (expr -> expr GREATER expr .)
    ITERATIONS      reduce using rule 62 (expr -> expr GREATER expr .)
    {               reduce using rule 62 (expr -> expr GREATER expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 95

    (63) expr -> expr GREATEREQ expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 63 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 63 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 63 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 63 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 63 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 63 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 63 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 63 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    ]               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    SEP             reduce using rule 63 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 63 (expr -> expr GREATEREQ expr .)
    [               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    .               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    ASSIGN          reduce using rule 63 (expr -> expr GREATEREQ expr .)
    ITERATIONS      reduce using rule 63 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 63 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 96

    (64) expr -> expr LESSEQ expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 64 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 64 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 64 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 64 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 64 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 64 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 64 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 64 (expr -> expr LESSEQ expr .)
    )               reduce using rule 64 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 64 (expr -> expr LESSEQ expr .)
    ]               reduce using rule 64 (expr -> expr LESSEQ expr .)
    SEP             reduce using rule 64 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 64 (expr -> expr LESSEQ expr .)
    [               reduce using rule 64 (expr -> expr LESSEQ expr .)
    .               reduce using rule 64 (expr -> expr LESSEQ expr .)
    ASSIGN          reduce using rule 64 (expr -> expr LESSEQ expr .)
    ITERATIONS      reduce using rule 64 (expr -> expr LESSEQ expr .)
    {               reduce using rule 64 (expr -> expr LESSEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 97

    (65) expr -> expr LESS expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 65 (expr -> expr LESS expr .)
    GREATER         reduce using rule 65 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 65 (expr -> expr LESS expr .)
    LESS            reduce using rule 65 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 65 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 65 (expr -> expr LESS expr .)
    AND             reduce using rule 65 (expr -> expr LESS expr .)
    OR              reduce using rule 65 (expr -> expr LESS expr .)
    )               reduce using rule 65 (expr -> expr LESS expr .)
    ,               reduce using rule 65 (expr -> expr LESS expr .)
    ]               reduce using rule 65 (expr -> expr LESS expr .)
    SEP             reduce using rule 65 (expr -> expr LESS expr .)
    TO              reduce using rule 65 (expr -> expr LESS expr .)
    [               reduce using rule 65 (expr -> expr LESS expr .)
    .               reduce using rule 65 (expr -> expr LESS expr .)
    ASSIGN          reduce using rule 65 (expr -> expr LESS expr .)
    ITERATIONS      reduce using rule 65 (expr -> expr LESS expr .)
    {               reduce using rule 65 (expr -> expr LESS expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 98

    (66) expr -> expr EQEQ expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 66 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 66 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 66 (expr -> expr EQEQ expr .)
    AND             reduce using rule 66 (expr -> expr EQEQ expr .)
    OR              reduce using rule 66 (expr -> expr EQEQ expr .)
    )               reduce using rule 66 (expr -> expr EQEQ expr .)
    ,               reduce using rule 66 (expr -> expr EQEQ expr .)
    ]               reduce using rule 66 (expr -> expr EQEQ expr .)
    SEP             reduce using rule 66 (expr -> expr EQEQ expr .)
    TO              reduce using rule 66 (expr -> expr EQEQ expr .)
    [               reduce using rule 66 (expr -> expr EQEQ expr .)
    .               reduce using rule 66 (expr -> expr EQEQ expr .)
    ASSIGN          reduce using rule 66 (expr -> expr EQEQ expr .)
    ITERATIONS      reduce using rule 66 (expr -> expr EQEQ expr .)
    {               reduce using rule 66 (expr -> expr EQEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56


state 99

    (67) expr -> expr NOTEQ expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 67 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 67 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 67 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 67 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 67 (expr -> expr NOTEQ expr .)
    )               reduce using rule 67 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 67 (expr -> expr NOTEQ expr .)
    ]               reduce using rule 67 (expr -> expr NOTEQ expr .)
    SEP             reduce using rule 67 (expr -> expr NOTEQ expr .)
    TO              reduce using rule 67 (expr -> expr NOTEQ expr .)
    [               reduce using rule 67 (expr -> expr NOTEQ expr .)
    .               reduce using rule 67 (expr -> expr NOTEQ expr .)
    ASSIGN          reduce using rule 67 (expr -> expr NOTEQ expr .)
    ITERATIONS      reduce using rule 67 (expr -> expr NOTEQ expr .)
    {               reduce using rule 67 (expr -> expr NOTEQ expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56


state 100

    (68) expr -> expr AND expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 68 (expr -> expr AND expr .)
    AND             reduce using rule 68 (expr -> expr AND expr .)
    OR              reduce using rule 68 (expr -> expr AND expr .)
    )               reduce using rule 68 (expr -> expr AND expr .)
    ,               reduce using rule 68 (expr -> expr AND expr .)
    ]               reduce using rule 68 (expr -> expr AND expr .)
    SEP             reduce using rule 68 (expr -> expr AND expr .)
    TO              reduce using rule 68 (expr -> expr AND expr .)
    [               reduce using rule 68 (expr -> expr AND expr .)
    .               reduce using rule 68 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 68 (expr -> expr AND expr .)
    ITERATIONS      reduce using rule 68 (expr -> expr AND expr .)
    {               reduce using rule 68 (expr -> expr AND expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58


state 101

    (69) expr -> expr OR expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    IN              reduce using rule 69 (expr -> expr OR expr .)
    OR              reduce using rule 69 (expr -> expr OR expr .)
    )               reduce using rule 69 (expr -> expr OR expr .)
    ,               reduce using rule 69 (expr -> expr OR expr .)
    ]               reduce using rule 69 (expr -> expr OR expr .)
    SEP             reduce using rule 69 (expr -> expr OR expr .)
    TO              reduce using rule 69 (expr -> expr OR expr .)
    [               reduce using rule 69 (expr -> expr OR expr .)
    .               reduce using rule 69 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 69 (expr -> expr OR expr .)
    ITERATIONS      reduce using rule 69 (expr -> expr OR expr .)
    {               reduce using rule 69 (expr -> expr OR expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59


state 102

    (85) primitiveValue -> RANDOM FROM expr . TO expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    TO              shift and go to state 152
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 103

    (86) primary -> ( expr ) .
    IN              reduce using rule 86 (primary -> ( expr ) .)
    /               reduce using rule 86 (primary -> ( expr ) .)
    *               reduce using rule 86 (primary -> ( expr ) .)
    -               reduce using rule 86 (primary -> ( expr ) .)
    +               reduce using rule 86 (primary -> ( expr ) .)
    GREATER         reduce using rule 86 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 86 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 86 (primary -> ( expr ) .)
    LESS            reduce using rule 86 (primary -> ( expr ) .)
    EQEQ            reduce using rule 86 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 86 (primary -> ( expr ) .)
    AND             reduce using rule 86 (primary -> ( expr ) .)
    OR              reduce using rule 86 (primary -> ( expr ) .)
    )               reduce using rule 86 (primary -> ( expr ) .)
    ,               reduce using rule 86 (primary -> ( expr ) .)
    ]               reduce using rule 86 (primary -> ( expr ) .)
    SEP             reduce using rule 86 (primary -> ( expr ) .)
    TO              reduce using rule 86 (primary -> ( expr ) .)
    [               reduce using rule 86 (primary -> ( expr ) .)
    .               reduce using rule 86 (primary -> ( expr ) .)
    ASSIGN          reduce using rule 86 (primary -> ( expr ) .)
    ITERATIONS      reduce using rule 86 (primary -> ( expr ) .)
    {               reduce using rule 86 (primary -> ( expr ) .)


state 104

    (87) primary -> { bookItems } .
    IN              reduce using rule 87 (primary -> { bookItems } .)
    /               reduce using rule 87 (primary -> { bookItems } .)
    *               reduce using rule 87 (primary -> { bookItems } .)
    -               reduce using rule 87 (primary -> { bookItems } .)
    +               reduce using rule 87 (primary -> { bookItems } .)
    GREATER         reduce using rule 87 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 87 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 87 (primary -> { bookItems } .)
    LESS            reduce using rule 87 (primary -> { bookItems } .)
    EQEQ            reduce using rule 87 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 87 (primary -> { bookItems } .)
    AND             reduce using rule 87 (primary -> { bookItems } .)
    OR              reduce using rule 87 (primary -> { bookItems } .)
    )               reduce using rule 87 (primary -> { bookItems } .)
    ,               reduce using rule 87 (primary -> { bookItems } .)
    ]               reduce using rule 87 (primary -> { bookItems } .)
    SEP             reduce using rule 87 (primary -> { bookItems } .)
    TO              reduce using rule 87 (primary -> { bookItems } .)
    [               reduce using rule 87 (primary -> { bookItems } .)
    .               reduce using rule 87 (primary -> { bookItems } .)
    ASSIGN          reduce using rule 87 (primary -> { bookItems } .)
    ITERATIONS      reduce using rule 87 (primary -> { bookItems } .)
    {               reduce using rule 87 (primary -> { bookItems } .)


state 105

    (96) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 153


state 106

    (88) primary -> [ listItems ] .
    IN              reduce using rule 88 (primary -> [ listItems ] .)
    /               reduce using rule 88 (primary -> [ listItems ] .)
    *               reduce using rule 88 (primary -> [ listItems ] .)
    -               reduce using rule 88 (primary -> [ listItems ] .)
    +               reduce using rule 88 (primary -> [ listItems ] .)
    GREATER         reduce using rule 88 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 88 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 88 (primary -> [ listItems ] .)
    LESS            reduce using rule 88 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 88 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 88 (primary -> [ listItems ] .)
    AND             reduce using rule 88 (primary -> [ listItems ] .)
    OR              reduce using rule 88 (primary -> [ listItems ] .)
    )               reduce using rule 88 (primary -> [ listItems ] .)
    ,               reduce using rule 88 (primary -> [ listItems ] .)
    ]               reduce using rule 88 (primary -> [ listItems ] .)
    SEP             reduce using rule 88 (primary -> [ listItems ] .)
    TO              reduce using rule 88 (primary -> [ listItems ] .)
    [               reduce using rule 88 (primary -> [ listItems ] .)
    .               reduce using rule 88 (primary -> [ listItems ] .)
    ASSIGN          reduce using rule 88 (primary -> [ listItems ] .)
    ITERATIONS      reduce using rule 88 (primary -> [ listItems ] .)
    {               reduce using rule 88 (primary -> [ listItems ] .)


state 107

    (94) listItems -> expr , . listItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 73
    listItems                      shift and go to state 154
    empty                          shift and go to state 72
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 108

    (75) dotTail -> [ expr ] . dotTail
    (74) dotTail -> . empty
    (75) dotTail -> . [ expr ] dotTail
    (76) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
    [               shift and go to state 39
    .               shift and go to state 40
    IN              reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    ]               reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    ASSIGN          reduce using rule 102 (empty -> .)
    ITERATIONS      reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 155
    empty                          shift and go to state 38

state 109

    (76) dotTail -> . idTail dotTail .
    ASSIGN          reduce using rule 76 (dotTail -> . idTail dotTail .)
    IN              reduce using rule 76 (dotTail -> . idTail dotTail .)
    /               reduce using rule 76 (dotTail -> . idTail dotTail .)
    *               reduce using rule 76 (dotTail -> . idTail dotTail .)
    -               reduce using rule 76 (dotTail -> . idTail dotTail .)
    +               reduce using rule 76 (dotTail -> . idTail dotTail .)
    GREATER         reduce using rule 76 (dotTail -> . idTail dotTail .)
    GREATEREQ       reduce using rule 76 (dotTail -> . idTail dotTail .)
    LESSEQ          reduce using rule 76 (dotTail -> . idTail dotTail .)
    LESS            reduce using rule 76 (dotTail -> . idTail dotTail .)
    EQEQ            reduce using rule 76 (dotTail -> . idTail dotTail .)
    NOTEQ           reduce using rule 76 (dotTail -> . idTail dotTail .)
    AND             reduce using rule 76 (dotTail -> . idTail dotTail .)
    OR              reduce using rule 76 (dotTail -> . idTail dotTail .)
    )               reduce using rule 76 (dotTail -> . idTail dotTail .)
    ,               reduce using rule 76 (dotTail -> . idTail dotTail .)
    ]               reduce using rule 76 (dotTail -> . idTail dotTail .)
    SEP             reduce using rule 76 (dotTail -> . idTail dotTail .)
    TO              reduce using rule 76 (dotTail -> . idTail dotTail .)
    [               reduce using rule 76 (dotTail -> . idTail dotTail .)
    .               reduce using rule 76 (dotTail -> . idTail dotTail .)
    ITERATIONS      reduce using rule 76 (dotTail -> . idTail dotTail .)
    {               reduce using rule 76 (dotTail -> . idTail dotTail .)


state 110

    (81) listFunc -> PUSH expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IN              reduce using rule 81 (listFunc -> PUSH expr .)
    )               reduce using rule 81 (listFunc -> PUSH expr .)
    ,               reduce using rule 81 (listFunc -> PUSH expr .)
    ]               reduce using rule 81 (listFunc -> PUSH expr .)
    SEP             reduce using rule 81 (listFunc -> PUSH expr .)
    TO              reduce using rule 81 (listFunc -> PUSH expr .)
    [               reduce using rule 81 (listFunc -> PUSH expr .)
    .               reduce using rule 81 (listFunc -> PUSH expr .)
    ASSIGN          reduce using rule 81 (listFunc -> PUSH expr .)
    ITERATIONS      reduce using rule 81 (listFunc -> PUSH expr .)
    {               reduce using rule 81 (listFunc -> PUSH expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 111

    (17) envFunc -> RUN ID WITH expr . ITERATIONS SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ITERATIONS      shift and go to state 156
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 112

    (15) varAssign -> getter ASSIGN expr SEP .
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RUN             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESET           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BEHAVE          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    AGENT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ENV             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TALK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    -               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    !               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FIND            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RANDOM          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    (               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    {               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    [               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STRING          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    NUMBER          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FALSE           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TRUE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 113

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 157
    SEP             shift and go to state 158


state 114

    (97) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 97 (type -> BOOK_TYPE .)
    SEP             reduce using rule 97 (type -> BOOK_TYPE .)


state 115

    (98) type -> LIST_TYPE .
    ASSIGN          reduce using rule 98 (type -> LIST_TYPE .)
    SEP             reduce using rule 98 (type -> LIST_TYPE .)


state 116

    (99) type -> STRING_TYPE .
    ASSIGN          reduce using rule 99 (type -> STRING_TYPE .)
    SEP             reduce using rule 99 (type -> STRING_TYPE .)


state 117

    (100) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 100 (type -> BOOL_TYPE .)
    SEP             reduce using rule 100 (type -> BOOL_TYPE .)


state 118

    (101) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 101 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 101 (type -> NUMBER_TYPE .)


state 119

    (73) getter -> ID . dotTail
    (70) call -> ID . dotTail
    (74) dotTail -> . empty
    (75) dotTail -> . [ expr ] dotTail
    (76) dotTail -> . . idTail dotTail
    (102) empty -> .
    [               shift and go to state 39
    .               shift and go to state 40
    ASSIGN          reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 159
    empty                          shift and go to state 38

state 120

    (12) behaveDecl -> BEHAVE ID { behaveBody . }
    }               shift and go to state 160


state 121

    (21) behaveBody -> statementList .
    }               reduce using rule 21 (behaveBody -> statementList .)


state 122

    (25) statementList -> empty .
    }               reduce using rule 25 (statementList -> empty .)


state 123

    (26) statementList -> statement . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    statement                      shift and go to state 123
    statementList                  shift and go to state 161
    empty                          shift and go to state 122
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    expr                           shift and go to state 130
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 124

    (27) statement -> primFuncStmt .
    PUT             reduce using rule 27 (statement -> primFuncStmt .)
    PICK            reduce using rule 27 (statement -> primFuncStmt .)
    STOP            reduce using rule 27 (statement -> primFuncStmt .)
    RESTART         reduce using rule 27 (statement -> primFuncStmt .)
    SELL            reduce using rule 27 (statement -> primFuncStmt .)
    TALK            reduce using rule 27 (statement -> primFuncStmt .)
    IN              reduce using rule 27 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 27 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 27 (statement -> primFuncStmt .)
    LET             reduce using rule 27 (statement -> primFuncStmt .)
    -               reduce using rule 27 (statement -> primFuncStmt .)
    !               reduce using rule 27 (statement -> primFuncStmt .)
    BUY             reduce using rule 27 (statement -> primFuncStmt .)
    MOVE            reduce using rule 27 (statement -> primFuncStmt .)
    ID              reduce using rule 27 (statement -> primFuncStmt .)
    FIND            reduce using rule 27 (statement -> primFuncStmt .)
    RANDOM          reduce using rule 27 (statement -> primFuncStmt .)
    (               reduce using rule 27 (statement -> primFuncStmt .)
    {               reduce using rule 27 (statement -> primFuncStmt .)
    [               reduce using rule 27 (statement -> primFuncStmt .)
    STRING          reduce using rule 27 (statement -> primFuncStmt .)
    NUMBER          reduce using rule 27 (statement -> primFuncStmt .)
    FALSE           reduce using rule 27 (statement -> primFuncStmt .)
    TRUE            reduce using rule 27 (statement -> primFuncStmt .)
    }               reduce using rule 27 (statement -> primFuncStmt .)


state 125

    (28) statement -> incaseStmt .
    PUT             reduce using rule 28 (statement -> incaseStmt .)
    PICK            reduce using rule 28 (statement -> incaseStmt .)
    STOP            reduce using rule 28 (statement -> incaseStmt .)
    RESTART         reduce using rule 28 (statement -> incaseStmt .)
    SELL            reduce using rule 28 (statement -> incaseStmt .)
    TALK            reduce using rule 28 (statement -> incaseStmt .)
    IN              reduce using rule 28 (statement -> incaseStmt .)
    FOREACH         reduce using rule 28 (statement -> incaseStmt .)
    REPEAT          reduce using rule 28 (statement -> incaseStmt .)
    LET             reduce using rule 28 (statement -> incaseStmt .)
    -               reduce using rule 28 (statement -> incaseStmt .)
    !               reduce using rule 28 (statement -> incaseStmt .)
    BUY             reduce using rule 28 (statement -> incaseStmt .)
    MOVE            reduce using rule 28 (statement -> incaseStmt .)
    ID              reduce using rule 28 (statement -> incaseStmt .)
    FIND            reduce using rule 28 (statement -> incaseStmt .)
    RANDOM          reduce using rule 28 (statement -> incaseStmt .)
    (               reduce using rule 28 (statement -> incaseStmt .)
    {               reduce using rule 28 (statement -> incaseStmt .)
    [               reduce using rule 28 (statement -> incaseStmt .)
    STRING          reduce using rule 28 (statement -> incaseStmt .)
    NUMBER          reduce using rule 28 (statement -> incaseStmt .)
    FALSE           reduce using rule 28 (statement -> incaseStmt .)
    TRUE            reduce using rule 28 (statement -> incaseStmt .)
    }               reduce using rule 28 (statement -> incaseStmt .)


state 126

    (29) statement -> foreachStmt .
    PUT             reduce using rule 29 (statement -> foreachStmt .)
    PICK            reduce using rule 29 (statement -> foreachStmt .)
    STOP            reduce using rule 29 (statement -> foreachStmt .)
    RESTART         reduce using rule 29 (statement -> foreachStmt .)
    SELL            reduce using rule 29 (statement -> foreachStmt .)
    TALK            reduce using rule 29 (statement -> foreachStmt .)
    IN              reduce using rule 29 (statement -> foreachStmt .)
    FOREACH         reduce using rule 29 (statement -> foreachStmt .)
    REPEAT          reduce using rule 29 (statement -> foreachStmt .)
    LET             reduce using rule 29 (statement -> foreachStmt .)
    -               reduce using rule 29 (statement -> foreachStmt .)
    !               reduce using rule 29 (statement -> foreachStmt .)
    BUY             reduce using rule 29 (statement -> foreachStmt .)
    MOVE            reduce using rule 29 (statement -> foreachStmt .)
    ID              reduce using rule 29 (statement -> foreachStmt .)
    FIND            reduce using rule 29 (statement -> foreachStmt .)
    RANDOM          reduce using rule 29 (statement -> foreachStmt .)
    (               reduce using rule 29 (statement -> foreachStmt .)
    {               reduce using rule 29 (statement -> foreachStmt .)
    [               reduce using rule 29 (statement -> foreachStmt .)
    STRING          reduce using rule 29 (statement -> foreachStmt .)
    NUMBER          reduce using rule 29 (statement -> foreachStmt .)
    FALSE           reduce using rule 29 (statement -> foreachStmt .)
    TRUE            reduce using rule 29 (statement -> foreachStmt .)
    }               reduce using rule 29 (statement -> foreachStmt .)


state 127

    (30) statement -> repeatStmt .
    PUT             reduce using rule 30 (statement -> repeatStmt .)
    PICK            reduce using rule 30 (statement -> repeatStmt .)
    STOP            reduce using rule 30 (statement -> repeatStmt .)
    RESTART         reduce using rule 30 (statement -> repeatStmt .)
    SELL            reduce using rule 30 (statement -> repeatStmt .)
    TALK            reduce using rule 30 (statement -> repeatStmt .)
    IN              reduce using rule 30 (statement -> repeatStmt .)
    FOREACH         reduce using rule 30 (statement -> repeatStmt .)
    REPEAT          reduce using rule 30 (statement -> repeatStmt .)
    LET             reduce using rule 30 (statement -> repeatStmt .)
    -               reduce using rule 30 (statement -> repeatStmt .)
    !               reduce using rule 30 (statement -> repeatStmt .)
    BUY             reduce using rule 30 (statement -> repeatStmt .)
    MOVE            reduce using rule 30 (statement -> repeatStmt .)
    ID              reduce using rule 30 (statement -> repeatStmt .)
    FIND            reduce using rule 30 (statement -> repeatStmt .)
    RANDOM          reduce using rule 30 (statement -> repeatStmt .)
    (               reduce using rule 30 (statement -> repeatStmt .)
    {               reduce using rule 30 (statement -> repeatStmt .)
    [               reduce using rule 30 (statement -> repeatStmt .)
    STRING          reduce using rule 30 (statement -> repeatStmt .)
    NUMBER          reduce using rule 30 (statement -> repeatStmt .)
    FALSE           reduce using rule 30 (statement -> repeatStmt .)
    TRUE            reduce using rule 30 (statement -> repeatStmt .)
    }               reduce using rule 30 (statement -> repeatStmt .)


state 128

    (31) statement -> varAssign .
    PUT             reduce using rule 31 (statement -> varAssign .)
    PICK            reduce using rule 31 (statement -> varAssign .)
    STOP            reduce using rule 31 (statement -> varAssign .)
    RESTART         reduce using rule 31 (statement -> varAssign .)
    SELL            reduce using rule 31 (statement -> varAssign .)
    TALK            reduce using rule 31 (statement -> varAssign .)
    IN              reduce using rule 31 (statement -> varAssign .)
    FOREACH         reduce using rule 31 (statement -> varAssign .)
    REPEAT          reduce using rule 31 (statement -> varAssign .)
    LET             reduce using rule 31 (statement -> varAssign .)
    -               reduce using rule 31 (statement -> varAssign .)
    !               reduce using rule 31 (statement -> varAssign .)
    BUY             reduce using rule 31 (statement -> varAssign .)
    MOVE            reduce using rule 31 (statement -> varAssign .)
    ID              reduce using rule 31 (statement -> varAssign .)
    FIND            reduce using rule 31 (statement -> varAssign .)
    RANDOM          reduce using rule 31 (statement -> varAssign .)
    (               reduce using rule 31 (statement -> varAssign .)
    {               reduce using rule 31 (statement -> varAssign .)
    [               reduce using rule 31 (statement -> varAssign .)
    STRING          reduce using rule 31 (statement -> varAssign .)
    NUMBER          reduce using rule 31 (statement -> varAssign .)
    FALSE           reduce using rule 31 (statement -> varAssign .)
    TRUE            reduce using rule 31 (statement -> varAssign .)
    }               reduce using rule 31 (statement -> varAssign .)


state 129

    (32) statement -> varDecl .
    PUT             reduce using rule 32 (statement -> varDecl .)
    PICK            reduce using rule 32 (statement -> varDecl .)
    STOP            reduce using rule 32 (statement -> varDecl .)
    RESTART         reduce using rule 32 (statement -> varDecl .)
    SELL            reduce using rule 32 (statement -> varDecl .)
    TALK            reduce using rule 32 (statement -> varDecl .)
    IN              reduce using rule 32 (statement -> varDecl .)
    FOREACH         reduce using rule 32 (statement -> varDecl .)
    REPEAT          reduce using rule 32 (statement -> varDecl .)
    LET             reduce using rule 32 (statement -> varDecl .)
    -               reduce using rule 32 (statement -> varDecl .)
    !               reduce using rule 32 (statement -> varDecl .)
    BUY             reduce using rule 32 (statement -> varDecl .)
    MOVE            reduce using rule 32 (statement -> varDecl .)
    ID              reduce using rule 32 (statement -> varDecl .)
    FIND            reduce using rule 32 (statement -> varDecl .)
    RANDOM          reduce using rule 32 (statement -> varDecl .)
    (               reduce using rule 32 (statement -> varDecl .)
    {               reduce using rule 32 (statement -> varDecl .)
    [               reduce using rule 32 (statement -> varDecl .)
    STRING          reduce using rule 32 (statement -> varDecl .)
    NUMBER          reduce using rule 32 (statement -> varDecl .)
    FALSE           reduce using rule 32 (statement -> varDecl .)
    TRUE            reduce using rule 32 (statement -> varDecl .)
    }               reduce using rule 32 (statement -> varDecl .)


state 130

    (33) statement -> expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 162
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 131

    (40) primFuncStmt -> PUT . expr , expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 163
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 132

    (41) primFuncStmt -> PICK . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 164
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 133

    (42) primFuncStmt -> STOP . SEP
    SEP             shift and go to state 165


state 134

    (43) primFuncStmt -> RESTART . BEHAVE SEP
    BEHAVE          shift and go to state 166


state 135

    (44) primFuncStmt -> SELL . expr , expr , expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 167
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 136

    (45) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 168


state 137

    (46) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 169


state 138

    (47) primFuncStmt -> TALK . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 170
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 139

    (36) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 171


state 140

    (35) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 172


state 141

    (34) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 173


state 142

    (53) buyStmt -> BUY . expr
    (54) buyStmt -> BUY . expr , expr , expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 174
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 143

    (48) moveStmt -> MOVE . RIGHT
    (49) moveStmt -> MOVE . LEFT
    (50) moveStmt -> MOVE . DOWN
    (51) moveStmt -> MOVE . UP
    (52) moveStmt -> MOVE . expr , expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    RIGHT           shift and go to state 175
    LEFT            shift and go to state 176
    DOWN            shift and go to state 177
    UP              shift and go to state 178
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 179
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 144

    (11) agentDecl -> AGENT ID { agentBody . }
    }               shift and go to state 180


state 145

    (20) agentBody -> varList .
    }               reduce using rule 20 (agentBody -> varList .)


state 146

    (22) varList -> empty .
    }               reduce using rule 22 (varList -> empty .)


state 147

    (23) varList -> varAssign . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (73) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varAssign                      shift and go to state 147
    varList                        shift and go to state 181
    empty                          shift and go to state 146
    varDecl                        shift and go to state 148
    getter                         shift and go to state 15

state 148

    (24) varList -> varDecl . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (73) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varDecl                        shift and go to state 148
    varList                        shift and go to state 182
    empty                          shift and go to state 146
    varAssign                      shift and go to state 147
    getter                         shift and go to state 15

state 149

    (10) envDecl -> ENV ID { envBody . }
    }               shift and go to state 183


state 150

    (19) envBody -> varList .
    }               reduce using rule 19 (envBody -> varList .)


state 151

    (16) envFunc -> PUT expr IN ID AT . expr , expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 184
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 152

    (85) primitiveValue -> RANDOM FROM expr TO . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 185
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 153

    (96) bookItems -> STRING : ( . listItems ) , bookItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    listItems                      shift and go to state 186
    empty                          shift and go to state 72
    expr                           shift and go to state 73
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 154

    (94) listItems -> expr , listItems .
    ]               reduce using rule 94 (listItems -> expr , listItems .)
    )               reduce using rule 94 (listItems -> expr , listItems .)


state 155

    (75) dotTail -> [ expr ] dotTail .
    ASSIGN          reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    IN              reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    /               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    *               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    -               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    +               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    GREATER         reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    GREATEREQ       reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    LESSEQ          reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    LESS            reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    EQEQ            reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    NOTEQ           reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    AND             reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    OR              reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    )               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    ,               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    ]               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    SEP             reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    TO              reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    [               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    .               reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    ITERATIONS      reduce using rule 75 (dotTail -> [ expr ] dotTail .)
    {               reduce using rule 75 (dotTail -> [ expr ] dotTail .)


state 156

    (17) envFunc -> RUN ID WITH expr ITERATIONS . SEP
    SEP             shift and go to state 187


state 157

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 188
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 158

    (14) varDecl -> LET ID : type SEP .
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RUN             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESET           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BEHAVE          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    AGENT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ENV             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TALK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    -               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    !               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FIND            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RANDOM          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    (               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    {               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    [               reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STRING          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    NUMBER          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FALSE           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TRUE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 159

    (73) getter -> ID dotTail .
    (70) call -> ID dotTail .
    ASSIGN          reduce using rule 73 (getter -> ID dotTail .)
    SEP             reduce using rule 70 (call -> ID dotTail .)
    /               reduce using rule 70 (call -> ID dotTail .)
    *               reduce using rule 70 (call -> ID dotTail .)
    -               reduce using rule 70 (call -> ID dotTail .)
    +               reduce using rule 70 (call -> ID dotTail .)
    GREATER         reduce using rule 70 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 70 (call -> ID dotTail .)
    LESSEQ          reduce using rule 70 (call -> ID dotTail .)
    LESS            reduce using rule 70 (call -> ID dotTail .)
    EQEQ            reduce using rule 70 (call -> ID dotTail .)
    NOTEQ           reduce using rule 70 (call -> ID dotTail .)
    AND             reduce using rule 70 (call -> ID dotTail .)
    OR              reduce using rule 70 (call -> ID dotTail .)


state 160

    (12) behaveDecl -> BEHAVE ID { behaveBody } .
    PUT             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RUN             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RESET           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    LET             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    BEHAVE          reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    AGENT           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ENV             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ID              reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    $end            reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)


state 161

    (26) statementList -> statement statementList .
    }               reduce using rule 26 (statementList -> statement statementList .)


state 162

    (33) statement -> expr SEP .
    PUT             reduce using rule 33 (statement -> expr SEP .)
    PICK            reduce using rule 33 (statement -> expr SEP .)
    STOP            reduce using rule 33 (statement -> expr SEP .)
    RESTART         reduce using rule 33 (statement -> expr SEP .)
    SELL            reduce using rule 33 (statement -> expr SEP .)
    TALK            reduce using rule 33 (statement -> expr SEP .)
    IN              reduce using rule 33 (statement -> expr SEP .)
    FOREACH         reduce using rule 33 (statement -> expr SEP .)
    REPEAT          reduce using rule 33 (statement -> expr SEP .)
    LET             reduce using rule 33 (statement -> expr SEP .)
    -               reduce using rule 33 (statement -> expr SEP .)
    !               reduce using rule 33 (statement -> expr SEP .)
    BUY             reduce using rule 33 (statement -> expr SEP .)
    MOVE            reduce using rule 33 (statement -> expr SEP .)
    ID              reduce using rule 33 (statement -> expr SEP .)
    FIND            reduce using rule 33 (statement -> expr SEP .)
    RANDOM          reduce using rule 33 (statement -> expr SEP .)
    (               reduce using rule 33 (statement -> expr SEP .)
    {               reduce using rule 33 (statement -> expr SEP .)
    [               reduce using rule 33 (statement -> expr SEP .)
    STRING          reduce using rule 33 (statement -> expr SEP .)
    NUMBER          reduce using rule 33 (statement -> expr SEP .)
    FALSE           reduce using rule 33 (statement -> expr SEP .)
    TRUE            reduce using rule 33 (statement -> expr SEP .)
    }               reduce using rule 33 (statement -> expr SEP .)


state 163

    (40) primFuncStmt -> PUT expr . , expr SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 189
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 164

    (41) primFuncStmt -> PICK expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 190
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 165

    (42) primFuncStmt -> STOP SEP .
    PUT             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    TALK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    IN              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    LET             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    -               reduce using rule 42 (primFuncStmt -> STOP SEP .)
    !               reduce using rule 42 (primFuncStmt -> STOP SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    ID              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    FIND            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    RANDOM          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    (               reduce using rule 42 (primFuncStmt -> STOP SEP .)
    {               reduce using rule 42 (primFuncStmt -> STOP SEP .)
    [               reduce using rule 42 (primFuncStmt -> STOP SEP .)
    STRING          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    NUMBER          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    FALSE           reduce using rule 42 (primFuncStmt -> STOP SEP .)
    TRUE            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    }               reduce using rule 42 (primFuncStmt -> STOP SEP .)


state 166

    (43) primFuncStmt -> RESTART BEHAVE . SEP
    SEP             shift and go to state 191


state 167

    (44) primFuncStmt -> SELL expr . , expr , expr SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 192
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 168

    (45) primFuncStmt -> buyStmt SEP .
    PUT             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    TALK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    -               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    !               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    ID              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    FIND            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    RANDOM          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    (               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    {               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    [               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    STRING          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    NUMBER          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    FALSE           reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    TRUE            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)


state 169

    (46) primFuncStmt -> moveStmt SEP .
    PUT             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    TALK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    -               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    !               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    ID              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    FIND            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    RANDOM          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    (               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    {               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    [               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    STRING          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    NUMBER          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    FALSE           reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    TRUE            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)


state 170

    (47) primFuncStmt -> TALK expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 193
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 171

    (36) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 194
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 172

    (35) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 195


state 173

    (34) repeatStmt -> REPEAT WHEN . expr { statementList }
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 196
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 174

    (53) buyStmt -> BUY expr .
    (54) buyStmt -> BUY expr . , expr , expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             reduce using rule 53 (buyStmt -> BUY expr .)
    ,               shift and go to state 197
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 175

    (48) moveStmt -> MOVE RIGHT .
    SEP             reduce using rule 48 (moveStmt -> MOVE RIGHT .)


state 176

    (49) moveStmt -> MOVE LEFT .
    SEP             reduce using rule 49 (moveStmt -> MOVE LEFT .)


state 177

    (50) moveStmt -> MOVE DOWN .
    SEP             reduce using rule 50 (moveStmt -> MOVE DOWN .)


state 178

    (51) moveStmt -> MOVE UP .
    SEP             reduce using rule 51 (moveStmt -> MOVE UP .)


state 179

    (52) moveStmt -> MOVE expr . , expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 198
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 180

    (11) agentDecl -> AGENT ID { agentBody } .
    PUT             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RUN             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RESET           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    LET             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    BEHAVE          reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    AGENT           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ENV             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ID              reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    $end            reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)


state 181

    (23) varList -> varAssign varList .
    }               reduce using rule 23 (varList -> varAssign varList .)


state 182

    (24) varList -> varDecl varList .
    }               reduce using rule 24 (varList -> varDecl varList .)


state 183

    (10) envDecl -> ENV ID { envBody } .
    PUT             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RUN             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RESET           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    LET             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    BEHAVE          reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    AGENT           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ENV             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ID              reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    $end            reduce using rule 10 (envDecl -> ENV ID { envBody } .)


state 184

    (16) envFunc -> PUT expr IN ID AT expr . , expr SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 199
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 185

    (85) primitiveValue -> RANDOM FROM expr TO expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    IN              reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    )               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ,               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ]               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    SEP             reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    TO              reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    [               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    .               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ASSIGN          reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ITERATIONS      reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    {               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 186

    (96) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 200


state 187

    (17) envFunc -> RUN ID WITH expr ITERATIONS SEP .
    PUT             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RUN             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RESET           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    LET             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    BEHAVE          reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    AGENT           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ENV             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ID              reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    $end            reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)


state 188

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 201
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 189

    (40) primFuncStmt -> PUT expr , . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 202
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 190

    (41) primFuncStmt -> PICK expr SEP .
    PUT             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    PICK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    STOP            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    RESTART         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    SELL            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    TALK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    IN              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    FOREACH         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    REPEAT          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    LET             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    -               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    !               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    BUY             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    MOVE            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    ID              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    FIND            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    RANDOM          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    (               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    {               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    [               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    STRING          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    NUMBER          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    FALSE           reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    TRUE            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    }               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)


state 191

    (43) primFuncStmt -> RESTART BEHAVE SEP .
    PUT             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    PICK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    STOP            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    RESTART         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    SELL            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    TALK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    IN              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    FOREACH         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    REPEAT          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    LET             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    -               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    !               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    BUY             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    MOVE            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    ID              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    FIND            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    RANDOM          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    (               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    {               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    [               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    STRING          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    NUMBER          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    FALSE           reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    TRUE            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    }               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)


state 192

    (44) primFuncStmt -> SELL expr , . expr , expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 203
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 193

    (47) primFuncStmt -> TALK expr SEP .
    PUT             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    TALK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    IN              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    LET             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    -               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    !               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    ID              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    FIND            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    RANDOM          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    (               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    {               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    [               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    STRING          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    NUMBER          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    FALSE           reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    TRUE            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    }               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)


state 194

    (36) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    {               shift and go to state 204
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 195

    (35) foreachStmt -> FOREACH ID IN . expr { statementList }
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 205
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 196

    (34) repeatStmt -> REPEAT WHEN expr . { statementList }
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    {               shift and go to state 206
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 197

    (54) buyStmt -> BUY expr , . expr , expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 207
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 198

    (52) moveStmt -> MOVE expr , . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 208
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 199

    (16) envFunc -> PUT expr IN ID AT expr , . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 209
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 200

    (96) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 210


state 201

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RUN             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESET           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BEHAVE          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    AGENT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ENV             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TALK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    -               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    !               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FIND            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RANDOM          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    (               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    {               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    [               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STRING          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    NUMBER          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FALSE           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TRUE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 202

    (40) primFuncStmt -> PUT expr , expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 211
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 203

    (44) primFuncStmt -> SELL expr , expr . , expr SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 212
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 204

    (36) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 130
    statementList                  shift and go to state 213
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 205

    (35) foreachStmt -> FOREACH ID IN expr . { statementList }
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    {               shift and go to state 214
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 206

    (34) repeatStmt -> REPEAT WHEN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 130
    statementList                  shift and go to state 215
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 207

    (54) buyStmt -> BUY expr , expr . , expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    ,               shift and go to state 216
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 208

    (52) moveStmt -> MOVE expr , expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             reduce using rule 52 (moveStmt -> MOVE expr , expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 209

    (16) envFunc -> PUT expr IN ID AT expr , expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 217
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 210

    (96) bookItems -> STRING : ( listItems ) , . bookItems
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 70
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 218
    empty                          shift and go to state 69

state 211

    (40) primFuncStmt -> PUT expr , expr SEP .
    PUT             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    PICK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    STOP            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    RESTART         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    SELL            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    TALK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    IN              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    FOREACH         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    REPEAT          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    LET             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    -               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    !               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    BUY             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    MOVE            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    ID              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    FIND            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    RANDOM          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    (               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    {               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    [               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    STRING          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    NUMBER          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    FALSE           reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    TRUE            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    }               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)


state 212

    (44) primFuncStmt -> SELL expr , expr , . expr SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 219
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 213

    (36) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 220


state 214

    (35) foreachStmt -> FOREACH ID IN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 130
    statementList                  shift and go to state 221
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 215

    (34) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 222


state 216

    (54) buyStmt -> BUY expr , expr , . expr
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 223
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 217

    (16) envFunc -> PUT expr IN ID AT expr , expr SEP .
    PUT             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    RUN             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    RESET           reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    LET             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    BEHAVE          reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    AGENT           reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    ENV             reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    ID              reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)
    $end            reduce using rule 16 (envFunc -> PUT expr IN ID AT expr , expr SEP .)


state 218

    (96) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 96 (bookItems -> STRING : ( listItems ) , bookItems .)


state 219

    (44) primFuncStmt -> SELL expr , expr , expr . SEP
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             shift and go to state 224
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 220

    (36) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (37) inothercaseStmt -> . empty
    (38) inothercaseStmt -> . OTHERWISE { statementList }
    (39) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 228
    IN              shift and go to state 225
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    !               reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    FIND            reduce using rule 102 (empty -> .)
    RANDOM          reduce using rule 102 (empty -> .)
    (               reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)
    [               reduce using rule 102 (empty -> .)
    STRING          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 226
    empty                          shift and go to state 227

state 221

    (35) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 229


state 222

    (34) repeatStmt -> REPEAT WHEN expr { statementList } .
    PUT             reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TALK            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    -               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    !               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    ID              reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FIND            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RANDOM          reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    (               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    {               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    [               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STRING          reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    NUMBER          reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FALSE           reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TRUE            reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 34 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 223

    (54) buyStmt -> BUY expr , expr , expr .
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    SEP             reduce using rule 54 (buyStmt -> BUY expr , expr , expr .)
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 224

    (44) primFuncStmt -> SELL expr , expr , expr SEP .
    PUT             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TALK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    IN              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    LET             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    -               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    !               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    ID              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FIND            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RANDOM          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    (               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    {               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    [               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STRING          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    NUMBER          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FALSE           reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TRUE            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    }               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)


state 225

    (39) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 230


state 226

    (36) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    -               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    !               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FIND            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    (               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    {               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    [               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STRING          reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    NUMBER          reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FALSE           reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TRUE            reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 36 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 227

    (37) inothercaseStmt -> empty .
    PUT             reduce using rule 37 (inothercaseStmt -> empty .)
    PICK            reduce using rule 37 (inothercaseStmt -> empty .)
    STOP            reduce using rule 37 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 37 (inothercaseStmt -> empty .)
    SELL            reduce using rule 37 (inothercaseStmt -> empty .)
    TALK            reduce using rule 37 (inothercaseStmt -> empty .)
    IN              reduce using rule 37 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 37 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 37 (inothercaseStmt -> empty .)
    LET             reduce using rule 37 (inothercaseStmt -> empty .)
    -               reduce using rule 37 (inothercaseStmt -> empty .)
    !               reduce using rule 37 (inothercaseStmt -> empty .)
    BUY             reduce using rule 37 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 37 (inothercaseStmt -> empty .)
    ID              reduce using rule 37 (inothercaseStmt -> empty .)
    FIND            reduce using rule 37 (inothercaseStmt -> empty .)
    RANDOM          reduce using rule 37 (inothercaseStmt -> empty .)
    (               reduce using rule 37 (inothercaseStmt -> empty .)
    {               reduce using rule 37 (inothercaseStmt -> empty .)
    [               reduce using rule 37 (inothercaseStmt -> empty .)
    STRING          reduce using rule 37 (inothercaseStmt -> empty .)
    NUMBER          reduce using rule 37 (inothercaseStmt -> empty .)
    FALSE           reduce using rule 37 (inothercaseStmt -> empty .)
    TRUE            reduce using rule 37 (inothercaseStmt -> empty .)
    }               reduce using rule 37 (inothercaseStmt -> empty .)


state 228

    (38) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 231


state 229

    (35) foreachStmt -> FOREACH ID IN expr { statementList } .
    PUT             reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TALK            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    -               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    !               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    ID              reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FIND            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RANDOM          reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    (               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    {               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    [               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STRING          reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    NUMBER          reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FALSE           reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TRUE            reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 35 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 230

    (39) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 232


state 231

    (38) inothercaseStmt -> OTHERWISE { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    statementList                  shift and go to state 233
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    expr                           shift and go to state 130
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 232

    (39) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 24
    !               shift and go to state 25
    ID              shift and go to state 22
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 234
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 233

    (38) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 235


state 234

    (39) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (62) expr -> expr . GREATER expr
    (63) expr -> expr . GREATEREQ expr
    (64) expr -> expr . LESSEQ expr
    (65) expr -> expr . LESS expr
    (66) expr -> expr . EQEQ expr
    (67) expr -> expr . NOTEQ expr
    (68) expr -> expr . AND expr
    (69) expr -> expr . OR expr
    {               shift and go to state 236
    /               shift and go to state 49
    *               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52
    GREATER         shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    LESS            shift and go to state 56
    EQEQ            shift and go to state 57
    NOTEQ           shift and go to state 58
    AND             shift and go to state 59
    OR              shift and go to state 60


state 235

    (38) inothercaseStmt -> OTHERWISE { statementList } .
    PUT             reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    TALK            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    -               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    !               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    ID              reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    FIND            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    RANDOM          reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    (               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    {               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    [               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    STRING          reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    NUMBER          reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    FALSE           reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    TRUE            reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 38 (inothercaseStmt -> OTHERWISE { statementList } .)


state 236

    (39) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (33) statement -> . expr SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (36) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (35) foreachStmt -> . FOREACH ID IN expr { statementList }
    (34) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) expr -> . call
    (56) expr -> . - expr
    (57) expr -> . ! expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . expr GREATER expr
    (63) expr -> . expr GREATEREQ expr
    (64) expr -> . expr LESSEQ expr
    (65) expr -> . expr LESS expr
    (66) expr -> . expr EQEQ expr
    (67) expr -> . expr NOTEQ expr
    (68) expr -> . expr AND expr
    (69) expr -> . expr OR expr
    (53) buyStmt -> . BUY expr
    (54) buyStmt -> . BUY expr , expr , expr
    (48) moveStmt -> . MOVE RIGHT
    (49) moveStmt -> . MOVE LEFT
    (50) moveStmt -> . MOVE DOWN
    (51) moveStmt -> . MOVE UP
    (52) moveStmt -> . MOVE expr , expr
    (73) getter -> . ID dotTail
    (70) call -> . ID dotTail
    (71) call -> . primitiveValue
    (72) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 131
    PICK            shift and go to state 132
    STOP            shift and go to state 133
    RESTART         shift and go to state 134
    SELL            shift and go to state 135
    TALK            shift and go to state 138
    IN              shift and go to state 139
    FOREACH         shift and go to state 140
    REPEAT          shift and go to state 141
    LET             shift and go to state 16
    -               shift and go to state 24
    !               shift and go to state 25
    BUY             shift and go to state 142
    MOVE            shift and go to state 143
    ID              shift and go to state 119
    FIND            shift and go to state 28
    RANDOM          shift and go to state 29
    (               shift and go to state 30
    {               shift and go to state 31
    [               shift and go to state 32
    STRING          shift and go to state 33
    NUMBER          shift and go to state 34
    FALSE           shift and go to state 35
    TRUE            shift and go to state 36

    expr                           shift and go to state 130
    statementList                  shift and go to state 237
    empty                          shift and go to state 122
    statement                      shift and go to state 123
    primFuncStmt                   shift and go to state 124
    incaseStmt                     shift and go to state 125
    foreachStmt                    shift and go to state 126
    repeatStmt                     shift and go to state 127
    varAssign                      shift and go to state 128
    varDecl                        shift and go to state 129
    buyStmt                        shift and go to state 136
    moveStmt                       shift and go to state 137
    getter                         shift and go to state 15
    call                           shift and go to state 23
    primitiveValue                 shift and go to state 26
    primary                        shift and go to state 27

state 237

    (39) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 238


state 238

    (39) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (37) inothercaseStmt -> . empty
    (38) inothercaseStmt -> . OTHERWISE { statementList }
    (39) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 228
    IN              shift and go to state 225
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    !               reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    FIND            reduce using rule 102 (empty -> .)
    RANDOM          reduce using rule 102 (empty -> .)
    (               reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)
    [               reduce using rule 102 (empty -> .)
    STRING          reduce using rule 102 (empty -> .)
    NUMBER          reduce using rule 102 (empty -> .)
    FALSE           reduce using rule 102 (empty -> .)
    TRUE            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 239
    empty                          shift and go to state 227

state 239

    (39) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    -               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    !               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FIND            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RANDOM          reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    (               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    {               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    [               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STRING          reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    NUMBER          reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FALSE           reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TRUE            reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 39 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for [ in state 22 resolved as shift
shift/reduce conflict for . in state 22 resolved as shift
shift/reduce conflict for [ in state 75 resolved as shift
shift/reduce conflict for . in state 75 resolved as shift
shift/reduce conflict for [ in state 108 resolved as shift
shift/reduce conflict for . in state 108 resolved as shift
shift/reduce conflict for / in state 110 resolved as shift
shift/reduce conflict for * in state 110 resolved as shift
shift/reduce conflict for - in state 110 resolved as shift
shift/reduce conflict for + in state 110 resolved as shift
shift/reduce conflict for GREATER in state 110 resolved as shift
shift/reduce conflict for GREATEREQ in state 110 resolved as shift
shift/reduce conflict for LESSEQ in state 110 resolved as shift
shift/reduce conflict for LESS in state 110 resolved as shift
shift/reduce conflict for EQEQ in state 110 resolved as shift
shift/reduce conflict for NOTEQ in state 110 resolved as shift
shift/reduce conflict for AND in state 110 resolved as shift
shift/reduce conflict for OR in state 110 resolved as shift
shift/reduce conflict for / in state 185 resolved as shift
shift/reduce conflict for * in state 185 resolved as shift
shift/reduce conflict for - in state 185 resolved as shift
shift/reduce conflict for + in state 185 resolved as shift
shift/reduce conflict for GREATER in state 185 resolved as shift
shift/reduce conflict for GREATEREQ in state 185 resolved as shift
shift/reduce conflict for LESSEQ in state 185 resolved as shift
shift/reduce conflict for LESS in state 185 resolved as shift
shift/reduce conflict for EQEQ in state 185 resolved as shift
shift/reduce conflict for NOTEQ in state 185 resolved as shift
shift/reduce conflict for AND in state 185 resolved as shift
shift/reduce conflict for OR in state 185 resolved as shift
shift/reduce conflict for IN in state 220 resolved as shift
shift/reduce conflict for IN in state 238 resolved as shift