Grammar:

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP
Rule 17    envFunc -> ID . RUN ( expr ) SEP
Rule 18    envFunc -> ID . RESET ( ) SEP
Rule 19    envBody -> varList
Rule 20    agentBody -> varList
Rule 21    behaveBody -> statementList
Rule 22    varList -> empty
Rule 23    varList -> varAssign varList
Rule 24    varList -> varDecl varList
Rule 25    statementList -> empty
Rule 26    statementList -> statement statementList
Rule 27    statement -> primFuncStmt
Rule 28    statement -> incaseStmt
Rule 29    statement -> foreachStmt
Rule 30    statement -> repeatStmt
Rule 31    statement -> varAssign
Rule 32    statement -> varDecl
Rule 33    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 34    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 35    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 36    inothercaseStmt -> empty
Rule 37    inothercaseStmt -> OTHERWISE { statementList }
Rule 38    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 39    primFuncStmt -> ID ASSIGN PEERS SEP
Rule 40    primFuncStmt -> ID ASSIGN FIND SEP
Rule 41    primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP
Rule 42    primFuncStmt -> PUT ( expr , expr ) SEP
Rule 43    primFuncStmt -> PICK ( expr ) SEP
Rule 44    primFuncStmt -> STOP ( expr ) SEP
Rule 45    primFuncStmt -> RESTART BEHAVE
Rule 46    primFuncStmt -> SELL ( expr , expr , expr ) SEP
Rule 47    primFuncStmt -> buyStmt SEP
Rule 48    primFuncStmt -> moveStmt SEP
Rule 49    primFuncStmt -> PRINT ( expr ) SEP
Rule 50    moveStmt -> MOVE RIGHT
Rule 51    moveStmt -> MOVE LEFT
Rule 52    moveStmt -> MOVE DOWN
Rule 53    moveStmt -> MOVE UP
Rule 54    moveStmt -> MOVE ( expr , expr )
Rule 55    buyStmt -> BUY ( expr )
Rule 56    buyStmt -> BUY ( expr , expr , expr )
Rule 57    expr -> call
Rule 58    expr -> - expr  [precedence=right, level=9]
Rule 59    expr -> ! expr  [precedence=right, level=10]
Rule 60    expr -> expr / expr  [precedence=left, level=8]
Rule 61    expr -> expr * expr  [precedence=left, level=8]
Rule 62    expr -> expr - expr  [precedence=left, level=7]
Rule 63    expr -> expr + expr  [precedence=left, level=7]
Rule 64    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 65    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 66    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 67    expr -> expr LESS expr  [precedence=left, level=5]
Rule 68    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 69    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 70    expr -> expr AND expr  [precedence=left, level=3]
Rule 71    expr -> expr OR expr  [precedence=left, level=2]
Rule 72    call -> ID dotTail
Rule 73    call -> primary
Rule 74    getter -> ID dotTail
Rule 75    dotTail -> empty
Rule 76    dotTail -> . idTail
Rule 77    idTail -> listFunc dotTail
Rule 78    idTail -> ID dotTail
Rule 79    listFunc -> REVERSE ( )
Rule 80    listFunc -> POP ( )
Rule 81    listFunc -> SIZE ( )
Rule 82    listFunc -> PUSH ( expr )
Rule 83    listFunc -> GET ( expr )
Rule 84    primary -> ( expr )
Rule 85    primary -> { bookItems }
Rule 86    primary -> [ listItems ]
Rule 87    primary -> STRING
Rule 88    primary -> NUMBER
Rule 89    primary -> FALSE
Rule 90    primary -> TRUE
Rule 91    listItems -> empty
Rule 92    listItems -> expr , listItems
Rule 93    bookItems -> empty
Rule 94    bookItems -> STRING : ( listItems ) , bookItems
Rule 95    type -> BOOK_TYPE
Rule 96    type -> LIST_TYPE
Rule 97    type -> STRING_TYPE
Rule 98    type -> BOOL_TYPE
Rule 99    type -> NUMBER_TYPE
Rule 100   empty -> <empty>

Unused terminals:

    AT
    SLASHASGN
    SHRASGN
    ANDASGN
    DEC
    PLUSASGN
    STARASGN
    SHL
    ORASGN
    SHLASGN
    INC
    XORASGN
    SHR
    MINUSASGN
    MODULOASGN

Terminals, with rules where they appear:

!                    : 59
(                    : 16 17 18 41 42 43 44 46 49 54 55 56 79 80 81 82 83 84 94
)                    : 16 17 18 41 42 43 44 46 49 54 55 56 79 80 81 82 83 84 94
*                    : 61
+                    : 63
,                    : 16 16 16 41 42 46 46 54 56 56 92 94
-                    : 58 62
.                    : 16 17 18 76
/                    : 60
:                    : 13 14 94
AGENT                : 11
AND                  : 70
ANDASGN              : 
ASSIGN               : 13 15 39 40 41
AT                   : 
BEHAVE               : 12 45
BOOK_TYPE            : 95
BOOL_TYPE            : 98
BUY                  : 55 56
CASE                 : 35 38
DEC                  : 
DOWN                 : 52
ENV                  : 10
EQEQ                 : 68
FALSE                : 89
FIND                 : 40
FOREACH              : 34
GET                  : 83
GREATER              : 64
GREATEREQ            : 65
ID                   : 10 11 12 13 14 16 17 18 34 39 40 41 72 74 78
IN                   : 34 35 38
INC                  : 
LEFT                 : 51
LESS                 : 67
LESSEQ               : 66
LET                  : 13 14
LIST_TYPE            : 96
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 50 51 52 53 54
NOTEQ                : 69
NUMBER               : 88
NUMBER_TYPE          : 99
OR                   : 71
ORASGN               : 
OTHER                : 38
OTHERWISE            : 37
PEERS                : 39
PICK                 : 43
PLUSASGN             : 
POP                  : 80
PRINT                : 49
PUSH                 : 82
PUT                  : 16 42
RANDOM               : 41
REPEAT               : 33
RESET                : 18
RESTART              : 45
REVERSE              : 79
RIGHT                : 50
RUN                  : 17
SELL                 : 46
SEP                  : 13 14 15 16 17 18 39 40 41 42 43 44 46 47 48 49
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 81
SLASHASGN            : 
STARASGN             : 
STOP                 : 44
STRING               : 87 94
STRING_TYPE          : 97
TRUE                 : 90
UP                   : 53
WHEN                 : 33
XORASGN              : 
[                    : 86
]                    : 86
error                : 
{                    : 10 11 12 33 34 35 37 38 85
}                    : 10 11 12 33 34 35 37 38 85

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 85 94
buyStmt              : 47
call                 : 57
declaration          : 3
declarationList      : 1 3
dotTail              : 72 74 77 78
empty                : 2 22 25 36 75 91 93
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 16 16 17 33 34 35 38 41 41 42 42 43 44 46 46 46 49 54 54 55 56 56 56 58 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 82 83 84 92
foreachStmt          : 29
getter               : 15
idTail               : 76
incaseStmt           : 28
inothercaseStmt      : 35 38
listFunc             : 77
listItems            : 86 92 94
moveStmt             : 48
primFuncStmt         : 27
primary              : 73
program              : 0
repeatStmt           : 30
statement            : 26
statementList        : 21 26 33 34 35 37 38
type                 : 13 14
varAssign            : 5 23 31
varDecl              : 6 24 32
varList              : 19 20 23 24


state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (100) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . ID . PUT ( expr , expr , expr , expr ) SEP
    (17) envFunc -> . ID . RUN ( expr ) SEP
    (18) envFunc -> . ID . RESET ( ) SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 100 (empty -> .)
    ID              shift and go to state 11
    LET             shift and go to state 13
    BEHAVE          shift and go to state 14
    AGENT           shift and go to state 15
    ENV             shift and go to state 16

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    empty                          shift and go to state 3
    declaration                    shift and go to state 4
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 12

state 1

    (0) S' -> program .


state 2

    (1) program -> declarationList .
    $end            reduce using rule 1 (program -> declarationList .)


state 3

    (2) declarationList -> empty .
    $end            reduce using rule 2 (declarationList -> empty .)


state 4

    (3) declarationList -> declaration . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (100) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . ID . PUT ( expr , expr , expr , expr ) SEP
    (17) envFunc -> . ID . RUN ( expr ) SEP
    (18) envFunc -> . ID . RESET ( ) SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (74) getter -> . ID dotTail
    $end            reduce using rule 100 (empty -> .)
    ID              shift and go to state 11
    LET             shift and go to state 13
    BEHAVE          shift and go to state 14
    AGENT           shift and go to state 15
    ENV             shift and go to state 16

    declaration                    shift and go to state 4
    declarationList                shift and go to state 17
    empty                          shift and go to state 3
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 12

state 5

    (4) declaration -> envFunc .
    ID              reduce using rule 4 (declaration -> envFunc .)
    LET             reduce using rule 4 (declaration -> envFunc .)
    BEHAVE          reduce using rule 4 (declaration -> envFunc .)
    AGENT           reduce using rule 4 (declaration -> envFunc .)
    ENV             reduce using rule 4 (declaration -> envFunc .)
    $end            reduce using rule 4 (declaration -> envFunc .)


state 6

    (5) declaration -> varAssign .
    ID              reduce using rule 5 (declaration -> varAssign .)
    LET             reduce using rule 5 (declaration -> varAssign .)
    BEHAVE          reduce using rule 5 (declaration -> varAssign .)
    AGENT           reduce using rule 5 (declaration -> varAssign .)
    ENV             reduce using rule 5 (declaration -> varAssign .)
    $end            reduce using rule 5 (declaration -> varAssign .)


state 7

    (6) declaration -> varDecl .
    ID              reduce using rule 6 (declaration -> varDecl .)
    LET             reduce using rule 6 (declaration -> varDecl .)
    BEHAVE          reduce using rule 6 (declaration -> varDecl .)
    AGENT           reduce using rule 6 (declaration -> varDecl .)
    ENV             reduce using rule 6 (declaration -> varDecl .)
    $end            reduce using rule 6 (declaration -> varDecl .)


state 8

    (7) declaration -> behaveDecl .
    ID              reduce using rule 7 (declaration -> behaveDecl .)
    LET             reduce using rule 7 (declaration -> behaveDecl .)
    BEHAVE          reduce using rule 7 (declaration -> behaveDecl .)
    AGENT           reduce using rule 7 (declaration -> behaveDecl .)
    ENV             reduce using rule 7 (declaration -> behaveDecl .)
    $end            reduce using rule 7 (declaration -> behaveDecl .)


state 9

    (8) declaration -> agentDecl .
    ID              reduce using rule 8 (declaration -> agentDecl .)
    LET             reduce using rule 8 (declaration -> agentDecl .)
    BEHAVE          reduce using rule 8 (declaration -> agentDecl .)
    AGENT           reduce using rule 8 (declaration -> agentDecl .)
    ENV             reduce using rule 8 (declaration -> agentDecl .)
    $end            reduce using rule 8 (declaration -> agentDecl .)


state 10

    (9) declaration -> envDecl .
    ID              reduce using rule 9 (declaration -> envDecl .)
    LET             reduce using rule 9 (declaration -> envDecl .)
    BEHAVE          reduce using rule 9 (declaration -> envDecl .)
    AGENT           reduce using rule 9 (declaration -> envDecl .)
    ENV             reduce using rule 9 (declaration -> envDecl .)
    $end            reduce using rule 9 (declaration -> envDecl .)


state 11

    (16) envFunc -> ID . . PUT ( expr , expr , expr , expr ) SEP
    (17) envFunc -> ID . . RUN ( expr ) SEP
    (18) envFunc -> ID . . RESET ( ) SEP
    (74) getter -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 18
    ASSIGN          reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 19
    empty                          shift and go to state 20

state 12

    (15) varAssign -> getter . ASSIGN expr SEP
    ASSIGN          shift and go to state 21


state 13

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 22


state 14

    (12) behaveDecl -> BEHAVE . ID { behaveBody }
    ID              shift and go to state 23


state 15

    (11) agentDecl -> AGENT . ID { agentBody }
    ID              shift and go to state 24


state 16

    (10) envDecl -> ENV . ID { envBody }
    ID              shift and go to state 25


state 17

    (3) declarationList -> declaration declarationList .
    $end            reduce using rule 3 (declarationList -> declaration declarationList .)


state 18

    (16) envFunc -> ID . . PUT ( expr , expr , expr , expr ) SEP
    (17) envFunc -> ID . . RUN ( expr ) SEP
    (18) envFunc -> ID . . RESET ( ) SEP
    (76) dotTail -> . . idTail
    (77) idTail -> . listFunc dotTail
    (78) idTail -> . ID dotTail
    (79) listFunc -> . REVERSE ( )
    (80) listFunc -> . POP ( )
    (81) listFunc -> . SIZE ( )
    (82) listFunc -> . PUSH ( expr )
    (83) listFunc -> . GET ( expr )
    PUT             shift and go to state 27
    RUN             shift and go to state 28
    RESET           shift and go to state 29
    ID              shift and go to state 26
    REVERSE         shift and go to state 32
    POP             shift and go to state 33
    SIZE            shift and go to state 34
    PUSH            shift and go to state 35
    GET             shift and go to state 36

    idTail                         shift and go to state 30
    listFunc                       shift and go to state 31

state 19

    (74) getter -> ID dotTail .
    ASSIGN          reduce using rule 74 (getter -> ID dotTail .)


state 20

    (75) dotTail -> empty .
    ASSIGN          reduce using rule 75 (dotTail -> empty .)
    SEP             reduce using rule 75 (dotTail -> empty .)
    /               reduce using rule 75 (dotTail -> empty .)
    *               reduce using rule 75 (dotTail -> empty .)
    -               reduce using rule 75 (dotTail -> empty .)
    +               reduce using rule 75 (dotTail -> empty .)
    GREATER         reduce using rule 75 (dotTail -> empty .)
    GREATEREQ       reduce using rule 75 (dotTail -> empty .)
    LESSEQ          reduce using rule 75 (dotTail -> empty .)
    LESS            reduce using rule 75 (dotTail -> empty .)
    EQEQ            reduce using rule 75 (dotTail -> empty .)
    NOTEQ           reduce using rule 75 (dotTail -> empty .)
    AND             reduce using rule 75 (dotTail -> empty .)
    OR              reduce using rule 75 (dotTail -> empty .)
    )               reduce using rule 75 (dotTail -> empty .)
    ,               reduce using rule 75 (dotTail -> empty .)
    {               reduce using rule 75 (dotTail -> empty .)


state 21

    (15) varAssign -> getter ASSIGN . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 37
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 22

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 50


state 23

    (12) behaveDecl -> BEHAVE ID . { behaveBody }
    {               shift and go to state 51


state 24

    (11) agentDecl -> AGENT ID . { agentBody }
    {               shift and go to state 52


state 25

    (10) envDecl -> ENV ID . { envBody }
    {               shift and go to state 53


state 26

    (78) idTail -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 55
    ASSIGN          reduce using rule 100 (empty -> .)
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 54
    empty                          shift and go to state 20

state 27

    (16) envFunc -> ID . PUT . ( expr , expr , expr , expr ) SEP
    (               shift and go to state 56


state 28

    (17) envFunc -> ID . RUN . ( expr ) SEP
    (               shift and go to state 57


state 29

    (18) envFunc -> ID . RESET . ( ) SEP
    (               shift and go to state 58


state 30

    (76) dotTail -> . idTail .
    ASSIGN          reduce using rule 76 (dotTail -> . idTail .)
    SEP             reduce using rule 76 (dotTail -> . idTail .)
    /               reduce using rule 76 (dotTail -> . idTail .)
    *               reduce using rule 76 (dotTail -> . idTail .)
    -               reduce using rule 76 (dotTail -> . idTail .)
    +               reduce using rule 76 (dotTail -> . idTail .)
    GREATER         reduce using rule 76 (dotTail -> . idTail .)
    GREATEREQ       reduce using rule 76 (dotTail -> . idTail .)
    LESSEQ          reduce using rule 76 (dotTail -> . idTail .)
    LESS            reduce using rule 76 (dotTail -> . idTail .)
    EQEQ            reduce using rule 76 (dotTail -> . idTail .)
    NOTEQ           reduce using rule 76 (dotTail -> . idTail .)
    AND             reduce using rule 76 (dotTail -> . idTail .)
    OR              reduce using rule 76 (dotTail -> . idTail .)
    )               reduce using rule 76 (dotTail -> . idTail .)
    ,               reduce using rule 76 (dotTail -> . idTail .)
    {               reduce using rule 76 (dotTail -> . idTail .)


state 31

    (77) idTail -> listFunc . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 55
    ASSIGN          reduce using rule 100 (empty -> .)
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 59
    empty                          shift and go to state 20

state 32

    (79) listFunc -> REVERSE . ( )
    (               shift and go to state 60


state 33

    (80) listFunc -> POP . ( )
    (               shift and go to state 61


state 34

    (81) listFunc -> SIZE . ( )
    (               shift and go to state 62


state 35

    (82) listFunc -> PUSH . ( expr )
    (               shift and go to state 63


state 36

    (83) listFunc -> GET . ( expr )
    (               shift and go to state 64


state 37

    (15) varAssign -> getter ASSIGN expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 65
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 38

    (57) expr -> call .
    SEP             reduce using rule 57 (expr -> call .)
    /               reduce using rule 57 (expr -> call .)
    *               reduce using rule 57 (expr -> call .)
    -               reduce using rule 57 (expr -> call .)
    +               reduce using rule 57 (expr -> call .)
    GREATER         reduce using rule 57 (expr -> call .)
    GREATEREQ       reduce using rule 57 (expr -> call .)
    LESSEQ          reduce using rule 57 (expr -> call .)
    LESS            reduce using rule 57 (expr -> call .)
    EQEQ            reduce using rule 57 (expr -> call .)
    NOTEQ           reduce using rule 57 (expr -> call .)
    AND             reduce using rule 57 (expr -> call .)
    OR              reduce using rule 57 (expr -> call .)
    )               reduce using rule 57 (expr -> call .)
    ,               reduce using rule 57 (expr -> call .)
    {               reduce using rule 57 (expr -> call .)


state 39

    (58) expr -> - . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 78
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 40

    (59) expr -> ! . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 79
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 41

    (72) call -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 55
    SEP             reduce using rule 100 (empty -> .)
    /               reduce using rule 100 (empty -> .)
    *               reduce using rule 100 (empty -> .)
    -               reduce using rule 100 (empty -> .)
    +               reduce using rule 100 (empty -> .)
    GREATER         reduce using rule 100 (empty -> .)
    GREATEREQ       reduce using rule 100 (empty -> .)
    LESSEQ          reduce using rule 100 (empty -> .)
    LESS            reduce using rule 100 (empty -> .)
    EQEQ            reduce using rule 100 (empty -> .)
    NOTEQ           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    ,               reduce using rule 100 (empty -> .)
    {               reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 80
    empty                          shift and go to state 20

state 42

    (73) call -> primary .
    SEP             reduce using rule 73 (call -> primary .)
    /               reduce using rule 73 (call -> primary .)
    *               reduce using rule 73 (call -> primary .)
    -               reduce using rule 73 (call -> primary .)
    +               reduce using rule 73 (call -> primary .)
    GREATER         reduce using rule 73 (call -> primary .)
    GREATEREQ       reduce using rule 73 (call -> primary .)
    LESSEQ          reduce using rule 73 (call -> primary .)
    LESS            reduce using rule 73 (call -> primary .)
    EQEQ            reduce using rule 73 (call -> primary .)
    NOTEQ           reduce using rule 73 (call -> primary .)
    AND             reduce using rule 73 (call -> primary .)
    OR              reduce using rule 73 (call -> primary .)
    )               reduce using rule 73 (call -> primary .)
    ,               reduce using rule 73 (call -> primary .)
    {               reduce using rule 73 (call -> primary .)


state 43

    (84) primary -> ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 81
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 44

    (85) primary -> { . bookItems }
    (93) bookItems -> . empty
    (94) bookItems -> . STRING : ( listItems ) , bookItems
    (100) empty -> .
    STRING          shift and go to state 84
    }               reduce using rule 100 (empty -> .)

    bookItems                      shift and go to state 82
    empty                          shift and go to state 83

state 45

    (86) primary -> [ . listItems ]
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    ]               reduce using rule 100 (empty -> .)
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    listItems                      shift and go to state 85
    empty                          shift and go to state 86
    expr                           shift and go to state 87
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 46

    (87) primary -> STRING .
    SEP             reduce using rule 87 (primary -> STRING .)
    /               reduce using rule 87 (primary -> STRING .)
    *               reduce using rule 87 (primary -> STRING .)
    -               reduce using rule 87 (primary -> STRING .)
    +               reduce using rule 87 (primary -> STRING .)
    GREATER         reduce using rule 87 (primary -> STRING .)
    GREATEREQ       reduce using rule 87 (primary -> STRING .)
    LESSEQ          reduce using rule 87 (primary -> STRING .)
    LESS            reduce using rule 87 (primary -> STRING .)
    EQEQ            reduce using rule 87 (primary -> STRING .)
    NOTEQ           reduce using rule 87 (primary -> STRING .)
    AND             reduce using rule 87 (primary -> STRING .)
    OR              reduce using rule 87 (primary -> STRING .)
    )               reduce using rule 87 (primary -> STRING .)
    ,               reduce using rule 87 (primary -> STRING .)
    {               reduce using rule 87 (primary -> STRING .)


state 47

    (88) primary -> NUMBER .
    SEP             reduce using rule 88 (primary -> NUMBER .)
    /               reduce using rule 88 (primary -> NUMBER .)
    *               reduce using rule 88 (primary -> NUMBER .)
    -               reduce using rule 88 (primary -> NUMBER .)
    +               reduce using rule 88 (primary -> NUMBER .)
    GREATER         reduce using rule 88 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 88 (primary -> NUMBER .)
    LESSEQ          reduce using rule 88 (primary -> NUMBER .)
    LESS            reduce using rule 88 (primary -> NUMBER .)
    EQEQ            reduce using rule 88 (primary -> NUMBER .)
    NOTEQ           reduce using rule 88 (primary -> NUMBER .)
    AND             reduce using rule 88 (primary -> NUMBER .)
    OR              reduce using rule 88 (primary -> NUMBER .)
    )               reduce using rule 88 (primary -> NUMBER .)
    ,               reduce using rule 88 (primary -> NUMBER .)
    {               reduce using rule 88 (primary -> NUMBER .)


state 48

    (89) primary -> FALSE .
    SEP             reduce using rule 89 (primary -> FALSE .)
    /               reduce using rule 89 (primary -> FALSE .)
    *               reduce using rule 89 (primary -> FALSE .)
    -               reduce using rule 89 (primary -> FALSE .)
    +               reduce using rule 89 (primary -> FALSE .)
    GREATER         reduce using rule 89 (primary -> FALSE .)
    GREATEREQ       reduce using rule 89 (primary -> FALSE .)
    LESSEQ          reduce using rule 89 (primary -> FALSE .)
    LESS            reduce using rule 89 (primary -> FALSE .)
    EQEQ            reduce using rule 89 (primary -> FALSE .)
    NOTEQ           reduce using rule 89 (primary -> FALSE .)
    AND             reduce using rule 89 (primary -> FALSE .)
    OR              reduce using rule 89 (primary -> FALSE .)
    )               reduce using rule 89 (primary -> FALSE .)
    ,               reduce using rule 89 (primary -> FALSE .)
    {               reduce using rule 89 (primary -> FALSE .)


state 49

    (90) primary -> TRUE .
    SEP             reduce using rule 90 (primary -> TRUE .)
    /               reduce using rule 90 (primary -> TRUE .)
    *               reduce using rule 90 (primary -> TRUE .)
    -               reduce using rule 90 (primary -> TRUE .)
    +               reduce using rule 90 (primary -> TRUE .)
    GREATER         reduce using rule 90 (primary -> TRUE .)
    GREATEREQ       reduce using rule 90 (primary -> TRUE .)
    LESSEQ          reduce using rule 90 (primary -> TRUE .)
    LESS            reduce using rule 90 (primary -> TRUE .)
    EQEQ            reduce using rule 90 (primary -> TRUE .)
    NOTEQ           reduce using rule 90 (primary -> TRUE .)
    AND             reduce using rule 90 (primary -> TRUE .)
    OR              reduce using rule 90 (primary -> TRUE .)
    )               reduce using rule 90 (primary -> TRUE .)
    ,               reduce using rule 90 (primary -> TRUE .)
    {               reduce using rule 90 (primary -> TRUE .)


state 50

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (95) type -> . BOOK_TYPE
    (96) type -> . LIST_TYPE
    (97) type -> . STRING_TYPE
    (98) type -> . BOOL_TYPE
    (99) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 89
    LIST_TYPE       shift and go to state 90
    STRING_TYPE     shift and go to state 91
    BOOL_TYPE       shift and go to state 92
    NUMBER_TYPE     shift and go to state 93

    type                           shift and go to state 88

state 51

    (12) behaveDecl -> BEHAVE ID { . behaveBody }
    (21) behaveBody -> . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    behaveBody                     shift and go to state 95
    statementList                  shift and go to state 96
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 52

    (11) agentDecl -> AGENT ID { . agentBody }
    (20) agentBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 13
    ID              shift and go to state 118

    agentBody                      shift and go to state 119
    varList                        shift and go to state 120
    empty                          shift and go to state 121
    varAssign                      shift and go to state 122
    varDecl                        shift and go to state 123
    getter                         shift and go to state 12

state 53

    (10) envDecl -> ENV ID { . envBody }
    (19) envBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 13
    ID              shift and go to state 118

    envBody                        shift and go to state 124
    varList                        shift and go to state 125
    empty                          shift and go to state 121
    varAssign                      shift and go to state 122
    varDecl                        shift and go to state 123
    getter                         shift and go to state 12

state 54

    (78) idTail -> ID dotTail .
    ASSIGN          reduce using rule 78 (idTail -> ID dotTail .)
    SEP             reduce using rule 78 (idTail -> ID dotTail .)
    /               reduce using rule 78 (idTail -> ID dotTail .)
    *               reduce using rule 78 (idTail -> ID dotTail .)
    -               reduce using rule 78 (idTail -> ID dotTail .)
    +               reduce using rule 78 (idTail -> ID dotTail .)
    GREATER         reduce using rule 78 (idTail -> ID dotTail .)
    GREATEREQ       reduce using rule 78 (idTail -> ID dotTail .)
    LESSEQ          reduce using rule 78 (idTail -> ID dotTail .)
    LESS            reduce using rule 78 (idTail -> ID dotTail .)
    EQEQ            reduce using rule 78 (idTail -> ID dotTail .)
    NOTEQ           reduce using rule 78 (idTail -> ID dotTail .)
    AND             reduce using rule 78 (idTail -> ID dotTail .)
    OR              reduce using rule 78 (idTail -> ID dotTail .)
    )               reduce using rule 78 (idTail -> ID dotTail .)
    ,               reduce using rule 78 (idTail -> ID dotTail .)
    {               reduce using rule 78 (idTail -> ID dotTail .)


state 55

    (76) dotTail -> . . idTail
    (77) idTail -> . listFunc dotTail
    (78) idTail -> . ID dotTail
    (79) listFunc -> . REVERSE ( )
    (80) listFunc -> . POP ( )
    (81) listFunc -> . SIZE ( )
    (82) listFunc -> . PUSH ( expr )
    (83) listFunc -> . GET ( expr )
    ID              shift and go to state 26
    REVERSE         shift and go to state 32
    POP             shift and go to state 33
    SIZE            shift and go to state 34
    PUSH            shift and go to state 35
    GET             shift and go to state 36

    idTail                         shift and go to state 30
    listFunc                       shift and go to state 31

state 56

    (16) envFunc -> ID . PUT ( . expr , expr , expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 126
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 57

    (17) envFunc -> ID . RUN ( . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 127
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 58

    (18) envFunc -> ID . RESET ( . ) SEP
    )               shift and go to state 128


state 59

    (77) idTail -> listFunc dotTail .
    ASSIGN          reduce using rule 77 (idTail -> listFunc dotTail .)
    SEP             reduce using rule 77 (idTail -> listFunc dotTail .)
    /               reduce using rule 77 (idTail -> listFunc dotTail .)
    *               reduce using rule 77 (idTail -> listFunc dotTail .)
    -               reduce using rule 77 (idTail -> listFunc dotTail .)
    +               reduce using rule 77 (idTail -> listFunc dotTail .)
    GREATER         reduce using rule 77 (idTail -> listFunc dotTail .)
    GREATEREQ       reduce using rule 77 (idTail -> listFunc dotTail .)
    LESSEQ          reduce using rule 77 (idTail -> listFunc dotTail .)
    LESS            reduce using rule 77 (idTail -> listFunc dotTail .)
    EQEQ            reduce using rule 77 (idTail -> listFunc dotTail .)
    NOTEQ           reduce using rule 77 (idTail -> listFunc dotTail .)
    AND             reduce using rule 77 (idTail -> listFunc dotTail .)
    OR              reduce using rule 77 (idTail -> listFunc dotTail .)
    )               reduce using rule 77 (idTail -> listFunc dotTail .)
    ,               reduce using rule 77 (idTail -> listFunc dotTail .)
    {               reduce using rule 77 (idTail -> listFunc dotTail .)


state 60

    (79) listFunc -> REVERSE ( . )
    )               shift and go to state 129


state 61

    (80) listFunc -> POP ( . )
    )               shift and go to state 130


state 62

    (81) listFunc -> SIZE ( . )
    )               shift and go to state 131


state 63

    (82) listFunc -> PUSH ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 132
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 64

    (83) listFunc -> GET ( . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 133
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 65

    (15) varAssign -> getter ASSIGN expr SEP .
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BEHAVE          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    AGENT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ENV             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PRINT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 66

    (60) expr -> expr / . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 134
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 67

    (61) expr -> expr * . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 135
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 68

    (62) expr -> expr - . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 136
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 69

    (63) expr -> expr + . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 137
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 70

    (64) expr -> expr GREATER . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 138
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 71

    (65) expr -> expr GREATEREQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 139
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 72

    (66) expr -> expr LESSEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 140
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 73

    (67) expr -> expr LESS . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 141
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 74

    (68) expr -> expr EQEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 142
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 75

    (69) expr -> expr NOTEQ . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 143
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 76

    (70) expr -> expr AND . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 144
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 77

    (71) expr -> expr OR . expr
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 145
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 78

    (58) expr -> - expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 58 (expr -> - expr .)
    /               reduce using rule 58 (expr -> - expr .)
    *               reduce using rule 58 (expr -> - expr .)
    -               reduce using rule 58 (expr -> - expr .)
    +               reduce using rule 58 (expr -> - expr .)
    GREATER         reduce using rule 58 (expr -> - expr .)
    GREATEREQ       reduce using rule 58 (expr -> - expr .)
    LESSEQ          reduce using rule 58 (expr -> - expr .)
    LESS            reduce using rule 58 (expr -> - expr .)
    EQEQ            reduce using rule 58 (expr -> - expr .)
    NOTEQ           reduce using rule 58 (expr -> - expr .)
    AND             reduce using rule 58 (expr -> - expr .)
    OR              reduce using rule 58 (expr -> - expr .)
    )               reduce using rule 58 (expr -> - expr .)
    ,               reduce using rule 58 (expr -> - expr .)
    {               reduce using rule 58 (expr -> - expr .)


state 79

    (59) expr -> ! expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 59 (expr -> ! expr .)
    /               reduce using rule 59 (expr -> ! expr .)
    *               reduce using rule 59 (expr -> ! expr .)
    -               reduce using rule 59 (expr -> ! expr .)
    +               reduce using rule 59 (expr -> ! expr .)
    GREATER         reduce using rule 59 (expr -> ! expr .)
    GREATEREQ       reduce using rule 59 (expr -> ! expr .)
    LESSEQ          reduce using rule 59 (expr -> ! expr .)
    LESS            reduce using rule 59 (expr -> ! expr .)
    EQEQ            reduce using rule 59 (expr -> ! expr .)
    NOTEQ           reduce using rule 59 (expr -> ! expr .)
    AND             reduce using rule 59 (expr -> ! expr .)
    OR              reduce using rule 59 (expr -> ! expr .)
    )               reduce using rule 59 (expr -> ! expr .)
    ,               reduce using rule 59 (expr -> ! expr .)
    {               reduce using rule 59 (expr -> ! expr .)


state 80

    (72) call -> ID dotTail .
    SEP             reduce using rule 72 (call -> ID dotTail .)
    /               reduce using rule 72 (call -> ID dotTail .)
    *               reduce using rule 72 (call -> ID dotTail .)
    -               reduce using rule 72 (call -> ID dotTail .)
    +               reduce using rule 72 (call -> ID dotTail .)
    GREATER         reduce using rule 72 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 72 (call -> ID dotTail .)
    LESSEQ          reduce using rule 72 (call -> ID dotTail .)
    LESS            reduce using rule 72 (call -> ID dotTail .)
    EQEQ            reduce using rule 72 (call -> ID dotTail .)
    NOTEQ           reduce using rule 72 (call -> ID dotTail .)
    AND             reduce using rule 72 (call -> ID dotTail .)
    OR              reduce using rule 72 (call -> ID dotTail .)
    )               reduce using rule 72 (call -> ID dotTail .)
    ,               reduce using rule 72 (call -> ID dotTail .)
    {               reduce using rule 72 (call -> ID dotTail .)


state 81

    (84) primary -> ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 146
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 82

    (85) primary -> { bookItems . }
    }               shift and go to state 147


state 83

    (93) bookItems -> empty .
    }               reduce using rule 93 (bookItems -> empty .)


state 84

    (94) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 148


state 85

    (86) primary -> [ listItems . ]
    ]               shift and go to state 149


state 86

    (91) listItems -> empty .
    ]               reduce using rule 91 (listItems -> empty .)
    )               reduce using rule 91 (listItems -> empty .)


state 87

    (92) listItems -> expr . , listItems
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 150
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 88

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 151
    SEP             shift and go to state 152


state 89

    (95) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 95 (type -> BOOK_TYPE .)
    SEP             reduce using rule 95 (type -> BOOK_TYPE .)


state 90

    (96) type -> LIST_TYPE .
    ASSIGN          reduce using rule 96 (type -> LIST_TYPE .)
    SEP             reduce using rule 96 (type -> LIST_TYPE .)


state 91

    (97) type -> STRING_TYPE .
    ASSIGN          reduce using rule 97 (type -> STRING_TYPE .)
    SEP             reduce using rule 97 (type -> STRING_TYPE .)


state 92

    (98) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 98 (type -> BOOL_TYPE .)
    SEP             reduce using rule 98 (type -> BOOL_TYPE .)


state 93

    (99) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 99 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 99 (type -> NUMBER_TYPE .)


state 94

    (39) primFuncStmt -> ID . ASSIGN PEERS SEP
    (40) primFuncStmt -> ID . ASSIGN FIND SEP
    (41) primFuncStmt -> ID . ASSIGN RANDOM ( expr , expr ) SEP
    (74) getter -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
  ! shift/reduce conflict for ASSIGN resolved as shift
    ASSIGN          shift and go to state 153
    .               shift and go to state 55

    dotTail                        shift and go to state 19
    empty                          shift and go to state 20

state 95

    (12) behaveDecl -> BEHAVE ID { behaveBody . }
    }               shift and go to state 154


state 96

    (21) behaveBody -> statementList .
    }               reduce using rule 21 (behaveBody -> statementList .)


state 97

    (25) statementList -> empty .
    }               reduce using rule 25 (statementList -> empty .)


state 98

    (26) statementList -> statement . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statement                      shift and go to state 98
    statementList                  shift and go to state 155
    empty                          shift and go to state 97
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 99

    (27) statement -> primFuncStmt .
    ID              reduce using rule 27 (statement -> primFuncStmt .)
    PUT             reduce using rule 27 (statement -> primFuncStmt .)
    PICK            reduce using rule 27 (statement -> primFuncStmt .)
    STOP            reduce using rule 27 (statement -> primFuncStmt .)
    RESTART         reduce using rule 27 (statement -> primFuncStmt .)
    SELL            reduce using rule 27 (statement -> primFuncStmt .)
    PRINT           reduce using rule 27 (statement -> primFuncStmt .)
    IN              reduce using rule 27 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 27 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 27 (statement -> primFuncStmt .)
    LET             reduce using rule 27 (statement -> primFuncStmt .)
    BUY             reduce using rule 27 (statement -> primFuncStmt .)
    MOVE            reduce using rule 27 (statement -> primFuncStmt .)
    }               reduce using rule 27 (statement -> primFuncStmt .)


state 100

    (28) statement -> incaseStmt .
    ID              reduce using rule 28 (statement -> incaseStmt .)
    PUT             reduce using rule 28 (statement -> incaseStmt .)
    PICK            reduce using rule 28 (statement -> incaseStmt .)
    STOP            reduce using rule 28 (statement -> incaseStmt .)
    RESTART         reduce using rule 28 (statement -> incaseStmt .)
    SELL            reduce using rule 28 (statement -> incaseStmt .)
    PRINT           reduce using rule 28 (statement -> incaseStmt .)
    IN              reduce using rule 28 (statement -> incaseStmt .)
    FOREACH         reduce using rule 28 (statement -> incaseStmt .)
    REPEAT          reduce using rule 28 (statement -> incaseStmt .)
    LET             reduce using rule 28 (statement -> incaseStmt .)
    BUY             reduce using rule 28 (statement -> incaseStmt .)
    MOVE            reduce using rule 28 (statement -> incaseStmt .)
    }               reduce using rule 28 (statement -> incaseStmt .)


state 101

    (29) statement -> foreachStmt .
    ID              reduce using rule 29 (statement -> foreachStmt .)
    PUT             reduce using rule 29 (statement -> foreachStmt .)
    PICK            reduce using rule 29 (statement -> foreachStmt .)
    STOP            reduce using rule 29 (statement -> foreachStmt .)
    RESTART         reduce using rule 29 (statement -> foreachStmt .)
    SELL            reduce using rule 29 (statement -> foreachStmt .)
    PRINT           reduce using rule 29 (statement -> foreachStmt .)
    IN              reduce using rule 29 (statement -> foreachStmt .)
    FOREACH         reduce using rule 29 (statement -> foreachStmt .)
    REPEAT          reduce using rule 29 (statement -> foreachStmt .)
    LET             reduce using rule 29 (statement -> foreachStmt .)
    BUY             reduce using rule 29 (statement -> foreachStmt .)
    MOVE            reduce using rule 29 (statement -> foreachStmt .)
    }               reduce using rule 29 (statement -> foreachStmt .)


state 102

    (30) statement -> repeatStmt .
    ID              reduce using rule 30 (statement -> repeatStmt .)
    PUT             reduce using rule 30 (statement -> repeatStmt .)
    PICK            reduce using rule 30 (statement -> repeatStmt .)
    STOP            reduce using rule 30 (statement -> repeatStmt .)
    RESTART         reduce using rule 30 (statement -> repeatStmt .)
    SELL            reduce using rule 30 (statement -> repeatStmt .)
    PRINT           reduce using rule 30 (statement -> repeatStmt .)
    IN              reduce using rule 30 (statement -> repeatStmt .)
    FOREACH         reduce using rule 30 (statement -> repeatStmt .)
    REPEAT          reduce using rule 30 (statement -> repeatStmt .)
    LET             reduce using rule 30 (statement -> repeatStmt .)
    BUY             reduce using rule 30 (statement -> repeatStmt .)
    MOVE            reduce using rule 30 (statement -> repeatStmt .)
    }               reduce using rule 30 (statement -> repeatStmt .)


state 103

    (31) statement -> varAssign .
    ID              reduce using rule 31 (statement -> varAssign .)
    PUT             reduce using rule 31 (statement -> varAssign .)
    PICK            reduce using rule 31 (statement -> varAssign .)
    STOP            reduce using rule 31 (statement -> varAssign .)
    RESTART         reduce using rule 31 (statement -> varAssign .)
    SELL            reduce using rule 31 (statement -> varAssign .)
    PRINT           reduce using rule 31 (statement -> varAssign .)
    IN              reduce using rule 31 (statement -> varAssign .)
    FOREACH         reduce using rule 31 (statement -> varAssign .)
    REPEAT          reduce using rule 31 (statement -> varAssign .)
    LET             reduce using rule 31 (statement -> varAssign .)
    BUY             reduce using rule 31 (statement -> varAssign .)
    MOVE            reduce using rule 31 (statement -> varAssign .)
    }               reduce using rule 31 (statement -> varAssign .)


state 104

    (32) statement -> varDecl .
    ID              reduce using rule 32 (statement -> varDecl .)
    PUT             reduce using rule 32 (statement -> varDecl .)
    PICK            reduce using rule 32 (statement -> varDecl .)
    STOP            reduce using rule 32 (statement -> varDecl .)
    RESTART         reduce using rule 32 (statement -> varDecl .)
    SELL            reduce using rule 32 (statement -> varDecl .)
    PRINT           reduce using rule 32 (statement -> varDecl .)
    IN              reduce using rule 32 (statement -> varDecl .)
    FOREACH         reduce using rule 32 (statement -> varDecl .)
    REPEAT          reduce using rule 32 (statement -> varDecl .)
    LET             reduce using rule 32 (statement -> varDecl .)
    BUY             reduce using rule 32 (statement -> varDecl .)
    MOVE            reduce using rule 32 (statement -> varDecl .)
    }               reduce using rule 32 (statement -> varDecl .)


state 105

    (42) primFuncStmt -> PUT . ( expr , expr ) SEP
    (               shift and go to state 156


state 106

    (43) primFuncStmt -> PICK . ( expr ) SEP
    (               shift and go to state 157


state 107

    (44) primFuncStmt -> STOP . ( expr ) SEP
    (               shift and go to state 158


state 108

    (45) primFuncStmt -> RESTART . BEHAVE
    BEHAVE          shift and go to state 159


state 109

    (46) primFuncStmt -> SELL . ( expr , expr , expr ) SEP
    (               shift and go to state 160


state 110

    (47) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 161


state 111

    (48) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 162


state 112

    (49) primFuncStmt -> PRINT . ( expr ) SEP
    (               shift and go to state 163


state 113

    (35) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 164


state 114

    (34) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 165


state 115

    (33) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 166


state 116

    (55) buyStmt -> BUY . ( expr )
    (56) buyStmt -> BUY . ( expr , expr , expr )
    (               shift and go to state 167


state 117

    (50) moveStmt -> MOVE . RIGHT
    (51) moveStmt -> MOVE . LEFT
    (52) moveStmt -> MOVE . DOWN
    (53) moveStmt -> MOVE . UP
    (54) moveStmt -> MOVE . ( expr , expr )
    RIGHT           shift and go to state 168
    LEFT            shift and go to state 169
    DOWN            shift and go to state 170
    UP              shift and go to state 171
    (               shift and go to state 172


state 118

    (74) getter -> ID . dotTail
    (75) dotTail -> . empty
    (76) dotTail -> . . idTail
    (100) empty -> .
    .               shift and go to state 55
    ASSIGN          reduce using rule 100 (empty -> .)

    dotTail                        shift and go to state 19
    empty                          shift and go to state 20

state 119

    (11) agentDecl -> AGENT ID { agentBody . }
    }               shift and go to state 173


state 120

    (20) agentBody -> varList .
    }               reduce using rule 20 (agentBody -> varList .)


state 121

    (22) varList -> empty .
    }               reduce using rule 22 (varList -> empty .)


state 122

    (23) varList -> varAssign . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 13
    ID              shift and go to state 118

    varAssign                      shift and go to state 122
    varList                        shift and go to state 174
    empty                          shift and go to state 121
    varDecl                        shift and go to state 123
    getter                         shift and go to state 12

state 123

    (24) varList -> varDecl . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (100) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    LET             shift and go to state 13
    ID              shift and go to state 118

    varDecl                        shift and go to state 123
    varList                        shift and go to state 175
    empty                          shift and go to state 121
    varAssign                      shift and go to state 122
    getter                         shift and go to state 12

state 124

    (10) envDecl -> ENV ID { envBody . }
    }               shift and go to state 176


state 125

    (19) envBody -> varList .
    }               reduce using rule 19 (envBody -> varList .)


state 126

    (16) envFunc -> ID . PUT ( expr . , expr , expr , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 177
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 127

    (17) envFunc -> ID . RUN ( expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 178
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 128

    (18) envFunc -> ID . RESET ( ) . SEP
    SEP             shift and go to state 179


state 129

    (79) listFunc -> REVERSE ( ) .
    .               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ASSIGN          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    SEP             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    /               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    *               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    -               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    +               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    GREATER         reduce using rule 79 (listFunc -> REVERSE ( ) .)
    GREATEREQ       reduce using rule 79 (listFunc -> REVERSE ( ) .)
    LESSEQ          reduce using rule 79 (listFunc -> REVERSE ( ) .)
    LESS            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    EQEQ            reduce using rule 79 (listFunc -> REVERSE ( ) .)
    NOTEQ           reduce using rule 79 (listFunc -> REVERSE ( ) .)
    AND             reduce using rule 79 (listFunc -> REVERSE ( ) .)
    OR              reduce using rule 79 (listFunc -> REVERSE ( ) .)
    )               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    ,               reduce using rule 79 (listFunc -> REVERSE ( ) .)
    {               reduce using rule 79 (listFunc -> REVERSE ( ) .)


state 130

    (80) listFunc -> POP ( ) .
    .               reduce using rule 80 (listFunc -> POP ( ) .)
    ASSIGN          reduce using rule 80 (listFunc -> POP ( ) .)
    SEP             reduce using rule 80 (listFunc -> POP ( ) .)
    /               reduce using rule 80 (listFunc -> POP ( ) .)
    *               reduce using rule 80 (listFunc -> POP ( ) .)
    -               reduce using rule 80 (listFunc -> POP ( ) .)
    +               reduce using rule 80 (listFunc -> POP ( ) .)
    GREATER         reduce using rule 80 (listFunc -> POP ( ) .)
    GREATEREQ       reduce using rule 80 (listFunc -> POP ( ) .)
    LESSEQ          reduce using rule 80 (listFunc -> POP ( ) .)
    LESS            reduce using rule 80 (listFunc -> POP ( ) .)
    EQEQ            reduce using rule 80 (listFunc -> POP ( ) .)
    NOTEQ           reduce using rule 80 (listFunc -> POP ( ) .)
    AND             reduce using rule 80 (listFunc -> POP ( ) .)
    OR              reduce using rule 80 (listFunc -> POP ( ) .)
    )               reduce using rule 80 (listFunc -> POP ( ) .)
    ,               reduce using rule 80 (listFunc -> POP ( ) .)
    {               reduce using rule 80 (listFunc -> POP ( ) .)


state 131

    (81) listFunc -> SIZE ( ) .
    .               reduce using rule 81 (listFunc -> SIZE ( ) .)
    ASSIGN          reduce using rule 81 (listFunc -> SIZE ( ) .)
    SEP             reduce using rule 81 (listFunc -> SIZE ( ) .)
    /               reduce using rule 81 (listFunc -> SIZE ( ) .)
    *               reduce using rule 81 (listFunc -> SIZE ( ) .)
    -               reduce using rule 81 (listFunc -> SIZE ( ) .)
    +               reduce using rule 81 (listFunc -> SIZE ( ) .)
    GREATER         reduce using rule 81 (listFunc -> SIZE ( ) .)
    GREATEREQ       reduce using rule 81 (listFunc -> SIZE ( ) .)
    LESSEQ          reduce using rule 81 (listFunc -> SIZE ( ) .)
    LESS            reduce using rule 81 (listFunc -> SIZE ( ) .)
    EQEQ            reduce using rule 81 (listFunc -> SIZE ( ) .)
    NOTEQ           reduce using rule 81 (listFunc -> SIZE ( ) .)
    AND             reduce using rule 81 (listFunc -> SIZE ( ) .)
    OR              reduce using rule 81 (listFunc -> SIZE ( ) .)
    )               reduce using rule 81 (listFunc -> SIZE ( ) .)
    ,               reduce using rule 81 (listFunc -> SIZE ( ) .)
    {               reduce using rule 81 (listFunc -> SIZE ( ) .)


state 132

    (82) listFunc -> PUSH ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 180
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 133

    (83) listFunc -> GET ( expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 181
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 134

    (60) expr -> expr / expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 60 (expr -> expr / expr .)
    /               reduce using rule 60 (expr -> expr / expr .)
    *               reduce using rule 60 (expr -> expr / expr .)
    -               reduce using rule 60 (expr -> expr / expr .)
    +               reduce using rule 60 (expr -> expr / expr .)
    GREATER         reduce using rule 60 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 60 (expr -> expr / expr .)
    LESSEQ          reduce using rule 60 (expr -> expr / expr .)
    LESS            reduce using rule 60 (expr -> expr / expr .)
    EQEQ            reduce using rule 60 (expr -> expr / expr .)
    NOTEQ           reduce using rule 60 (expr -> expr / expr .)
    AND             reduce using rule 60 (expr -> expr / expr .)
    OR              reduce using rule 60 (expr -> expr / expr .)
    )               reduce using rule 60 (expr -> expr / expr .)
    ,               reduce using rule 60 (expr -> expr / expr .)
    {               reduce using rule 60 (expr -> expr / expr .)


state 135

    (61) expr -> expr * expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 61 (expr -> expr * expr .)
    /               reduce using rule 61 (expr -> expr * expr .)
    *               reduce using rule 61 (expr -> expr * expr .)
    -               reduce using rule 61 (expr -> expr * expr .)
    +               reduce using rule 61 (expr -> expr * expr .)
    GREATER         reduce using rule 61 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr * expr .)
    LESSEQ          reduce using rule 61 (expr -> expr * expr .)
    LESS            reduce using rule 61 (expr -> expr * expr .)
    EQEQ            reduce using rule 61 (expr -> expr * expr .)
    NOTEQ           reduce using rule 61 (expr -> expr * expr .)
    AND             reduce using rule 61 (expr -> expr * expr .)
    OR              reduce using rule 61 (expr -> expr * expr .)
    )               reduce using rule 61 (expr -> expr * expr .)
    ,               reduce using rule 61 (expr -> expr * expr .)
    {               reduce using rule 61 (expr -> expr * expr .)


state 136

    (62) expr -> expr - expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 62 (expr -> expr - expr .)
    -               reduce using rule 62 (expr -> expr - expr .)
    +               reduce using rule 62 (expr -> expr - expr .)
    GREATER         reduce using rule 62 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr - expr .)
    LESSEQ          reduce using rule 62 (expr -> expr - expr .)
    LESS            reduce using rule 62 (expr -> expr - expr .)
    EQEQ            reduce using rule 62 (expr -> expr - expr .)
    NOTEQ           reduce using rule 62 (expr -> expr - expr .)
    AND             reduce using rule 62 (expr -> expr - expr .)
    OR              reduce using rule 62 (expr -> expr - expr .)
    )               reduce using rule 62 (expr -> expr - expr .)
    ,               reduce using rule 62 (expr -> expr - expr .)
    {               reduce using rule 62 (expr -> expr - expr .)
    /               shift and go to state 66
    *               shift and go to state 67


state 137

    (63) expr -> expr + expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 63 (expr -> expr + expr .)
    -               reduce using rule 63 (expr -> expr + expr .)
    +               reduce using rule 63 (expr -> expr + expr .)
    GREATER         reduce using rule 63 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr + expr .)
    LESSEQ          reduce using rule 63 (expr -> expr + expr .)
    LESS            reduce using rule 63 (expr -> expr + expr .)
    EQEQ            reduce using rule 63 (expr -> expr + expr .)
    NOTEQ           reduce using rule 63 (expr -> expr + expr .)
    AND             reduce using rule 63 (expr -> expr + expr .)
    OR              reduce using rule 63 (expr -> expr + expr .)
    )               reduce using rule 63 (expr -> expr + expr .)
    ,               reduce using rule 63 (expr -> expr + expr .)
    {               reduce using rule 63 (expr -> expr + expr .)
    /               shift and go to state 66
    *               shift and go to state 67


state 138

    (64) expr -> expr GREATER expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 64 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 64 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 64 (expr -> expr GREATER expr .)
    LESS            reduce using rule 64 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 64 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 64 (expr -> expr GREATER expr .)
    AND             reduce using rule 64 (expr -> expr GREATER expr .)
    OR              reduce using rule 64 (expr -> expr GREATER expr .)
    )               reduce using rule 64 (expr -> expr GREATER expr .)
    ,               reduce using rule 64 (expr -> expr GREATER expr .)
    {               reduce using rule 64 (expr -> expr GREATER expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69


state 139

    (65) expr -> expr GREATEREQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 65 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 65 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 65 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 65 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 65 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 65 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 65 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69


state 140

    (66) expr -> expr LESSEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 66 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 66 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 66 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 66 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 66 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 66 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 66 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 66 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 66 (expr -> expr LESSEQ expr .)
    )               reduce using rule 66 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 66 (expr -> expr LESSEQ expr .)
    {               reduce using rule 66 (expr -> expr LESSEQ expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69


state 141

    (67) expr -> expr LESS expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 67 (expr -> expr LESS expr .)
    GREATER         reduce using rule 67 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 67 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 67 (expr -> expr LESS expr .)
    LESS            reduce using rule 67 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 67 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 67 (expr -> expr LESS expr .)
    AND             reduce using rule 67 (expr -> expr LESS expr .)
    OR              reduce using rule 67 (expr -> expr LESS expr .)
    )               reduce using rule 67 (expr -> expr LESS expr .)
    ,               reduce using rule 67 (expr -> expr LESS expr .)
    {               reduce using rule 67 (expr -> expr LESS expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69


state 142

    (68) expr -> expr EQEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 68 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 68 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 68 (expr -> expr EQEQ expr .)
    AND             reduce using rule 68 (expr -> expr EQEQ expr .)
    OR              reduce using rule 68 (expr -> expr EQEQ expr .)
    )               reduce using rule 68 (expr -> expr EQEQ expr .)
    ,               reduce using rule 68 (expr -> expr EQEQ expr .)
    {               reduce using rule 68 (expr -> expr EQEQ expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73


state 143

    (69) expr -> expr NOTEQ expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 69 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 69 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 69 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 69 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 69 (expr -> expr NOTEQ expr .)
    )               reduce using rule 69 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 69 (expr -> expr NOTEQ expr .)
    {               reduce using rule 69 (expr -> expr NOTEQ expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73


state 144

    (70) expr -> expr AND expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 70 (expr -> expr AND expr .)
    AND             reduce using rule 70 (expr -> expr AND expr .)
    OR              reduce using rule 70 (expr -> expr AND expr .)
    )               reduce using rule 70 (expr -> expr AND expr .)
    ,               reduce using rule 70 (expr -> expr AND expr .)
    {               reduce using rule 70 (expr -> expr AND expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75


state 145

    (71) expr -> expr OR expr .
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             reduce using rule 71 (expr -> expr OR expr .)
    OR              reduce using rule 71 (expr -> expr OR expr .)
    )               reduce using rule 71 (expr -> expr OR expr .)
    ,               reduce using rule 71 (expr -> expr OR expr .)
    {               reduce using rule 71 (expr -> expr OR expr .)
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76


state 146

    (84) primary -> ( expr ) .
    SEP             reduce using rule 84 (primary -> ( expr ) .)
    /               reduce using rule 84 (primary -> ( expr ) .)
    *               reduce using rule 84 (primary -> ( expr ) .)
    -               reduce using rule 84 (primary -> ( expr ) .)
    +               reduce using rule 84 (primary -> ( expr ) .)
    GREATER         reduce using rule 84 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 84 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 84 (primary -> ( expr ) .)
    LESS            reduce using rule 84 (primary -> ( expr ) .)
    EQEQ            reduce using rule 84 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 84 (primary -> ( expr ) .)
    AND             reduce using rule 84 (primary -> ( expr ) .)
    OR              reduce using rule 84 (primary -> ( expr ) .)
    )               reduce using rule 84 (primary -> ( expr ) .)
    ,               reduce using rule 84 (primary -> ( expr ) .)
    {               reduce using rule 84 (primary -> ( expr ) .)


state 147

    (85) primary -> { bookItems } .
    SEP             reduce using rule 85 (primary -> { bookItems } .)
    /               reduce using rule 85 (primary -> { bookItems } .)
    *               reduce using rule 85 (primary -> { bookItems } .)
    -               reduce using rule 85 (primary -> { bookItems } .)
    +               reduce using rule 85 (primary -> { bookItems } .)
    GREATER         reduce using rule 85 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 85 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 85 (primary -> { bookItems } .)
    LESS            reduce using rule 85 (primary -> { bookItems } .)
    EQEQ            reduce using rule 85 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 85 (primary -> { bookItems } .)
    AND             reduce using rule 85 (primary -> { bookItems } .)
    OR              reduce using rule 85 (primary -> { bookItems } .)
    )               reduce using rule 85 (primary -> { bookItems } .)
    ,               reduce using rule 85 (primary -> { bookItems } .)
    {               reduce using rule 85 (primary -> { bookItems } .)


state 148

    (94) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 182


state 149

    (86) primary -> [ listItems ] .
    SEP             reduce using rule 86 (primary -> [ listItems ] .)
    /               reduce using rule 86 (primary -> [ listItems ] .)
    *               reduce using rule 86 (primary -> [ listItems ] .)
    -               reduce using rule 86 (primary -> [ listItems ] .)
    +               reduce using rule 86 (primary -> [ listItems ] .)
    GREATER         reduce using rule 86 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 86 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 86 (primary -> [ listItems ] .)
    LESS            reduce using rule 86 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 86 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 86 (primary -> [ listItems ] .)
    AND             reduce using rule 86 (primary -> [ listItems ] .)
    OR              reduce using rule 86 (primary -> [ listItems ] .)
    )               reduce using rule 86 (primary -> [ listItems ] .)
    ,               reduce using rule 86 (primary -> [ listItems ] .)
    {               reduce using rule 86 (primary -> [ listItems ] .)


state 150

    (92) listItems -> expr , . listItems
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    ]               reduce using rule 100 (empty -> .)
    )               reduce using rule 100 (empty -> .)
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 87
    listItems                      shift and go to state 183
    empty                          shift and go to state 86
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 151

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 184
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 152

    (14) varDecl -> LET ID : type SEP .
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BEHAVE          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    AGENT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ENV             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PRINT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 153

    (39) primFuncStmt -> ID ASSIGN . PEERS SEP
    (40) primFuncStmt -> ID ASSIGN . FIND SEP
    (41) primFuncStmt -> ID ASSIGN . RANDOM ( expr , expr ) SEP
    PEERS           shift and go to state 185
    FIND            shift and go to state 186
    RANDOM          shift and go to state 187


state 154

    (12) behaveDecl -> BEHAVE ID { behaveBody } .
    ID              reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    LET             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    BEHAVE          reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    AGENT           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ENV             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    $end            reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)


state 155

    (26) statementList -> statement statementList .
    }               reduce using rule 26 (statementList -> statement statementList .)


state 156

    (42) primFuncStmt -> PUT ( . expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 188
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 157

    (43) primFuncStmt -> PICK ( . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 189
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 158

    (44) primFuncStmt -> STOP ( . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 190
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 159

    (45) primFuncStmt -> RESTART BEHAVE .
    ID              reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    PUT             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    PICK            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    STOP            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    RESTART         reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    SELL            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    PRINT           reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    IN              reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    FOREACH         reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    REPEAT          reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    LET             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    BUY             reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    MOVE            reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)
    }               reduce using rule 45 (primFuncStmt -> RESTART BEHAVE .)


state 160

    (46) primFuncStmt -> SELL ( . expr , expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 191
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 161

    (47) primFuncStmt -> buyStmt SEP .
    ID              reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    PUT             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    PRINT           reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 47 (primFuncStmt -> buyStmt SEP .)


state 162

    (48) primFuncStmt -> moveStmt SEP .
    ID              reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    PUT             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    PRINT           reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 48 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 48 (primFuncStmt -> moveStmt SEP .)


state 163

    (49) primFuncStmt -> PRINT ( . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 192
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 164

    (35) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 193
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 165

    (34) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 194


state 166

    (33) repeatStmt -> REPEAT WHEN . expr { statementList }
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 195
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 167

    (55) buyStmt -> BUY ( . expr )
    (56) buyStmt -> BUY ( . expr , expr , expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 196
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 168

    (50) moveStmt -> MOVE RIGHT .
    SEP             reduce using rule 50 (moveStmt -> MOVE RIGHT .)


state 169

    (51) moveStmt -> MOVE LEFT .
    SEP             reduce using rule 51 (moveStmt -> MOVE LEFT .)


state 170

    (52) moveStmt -> MOVE DOWN .
    SEP             reduce using rule 52 (moveStmt -> MOVE DOWN .)


state 171

    (53) moveStmt -> MOVE UP .
    SEP             reduce using rule 53 (moveStmt -> MOVE UP .)


state 172

    (54) moveStmt -> MOVE ( . expr , expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 197
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 173

    (11) agentDecl -> AGENT ID { agentBody } .
    ID              reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    LET             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    BEHAVE          reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    AGENT           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ENV             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    $end            reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)


state 174

    (23) varList -> varAssign varList .
    }               reduce using rule 23 (varList -> varAssign varList .)


state 175

    (24) varList -> varDecl varList .
    }               reduce using rule 24 (varList -> varDecl varList .)


state 176

    (10) envDecl -> ENV ID { envBody } .
    ID              reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    LET             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    BEHAVE          reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    AGENT           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ENV             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    $end            reduce using rule 10 (envDecl -> ENV ID { envBody } .)


state 177

    (16) envFunc -> ID . PUT ( expr , . expr , expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 198
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 178

    (17) envFunc -> ID . RUN ( expr ) . SEP
    SEP             shift and go to state 199


state 179

    (18) envFunc -> ID . RESET ( ) SEP .
    ID              reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)
    LET             reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)
    BEHAVE          reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)
    AGENT           reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)
    ENV             reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)
    $end            reduce using rule 18 (envFunc -> ID . RESET ( ) SEP .)


state 180

    (82) listFunc -> PUSH ( expr ) .
    .               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ASSIGN          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    SEP             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    /               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    *               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    -               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    +               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    GREATER         reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    GREATEREQ       reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    LESSEQ          reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    LESS            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    EQEQ            reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    NOTEQ           reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    AND             reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    OR              reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    )               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    ,               reduce using rule 82 (listFunc -> PUSH ( expr ) .)
    {               reduce using rule 82 (listFunc -> PUSH ( expr ) .)


state 181

    (83) listFunc -> GET ( expr ) .
    .               reduce using rule 83 (listFunc -> GET ( expr ) .)
    ASSIGN          reduce using rule 83 (listFunc -> GET ( expr ) .)
    SEP             reduce using rule 83 (listFunc -> GET ( expr ) .)
    /               reduce using rule 83 (listFunc -> GET ( expr ) .)
    *               reduce using rule 83 (listFunc -> GET ( expr ) .)
    -               reduce using rule 83 (listFunc -> GET ( expr ) .)
    +               reduce using rule 83 (listFunc -> GET ( expr ) .)
    GREATER         reduce using rule 83 (listFunc -> GET ( expr ) .)
    GREATEREQ       reduce using rule 83 (listFunc -> GET ( expr ) .)
    LESSEQ          reduce using rule 83 (listFunc -> GET ( expr ) .)
    LESS            reduce using rule 83 (listFunc -> GET ( expr ) .)
    EQEQ            reduce using rule 83 (listFunc -> GET ( expr ) .)
    NOTEQ           reduce using rule 83 (listFunc -> GET ( expr ) .)
    AND             reduce using rule 83 (listFunc -> GET ( expr ) .)
    OR              reduce using rule 83 (listFunc -> GET ( expr ) .)
    )               reduce using rule 83 (listFunc -> GET ( expr ) .)
    ,               reduce using rule 83 (listFunc -> GET ( expr ) .)
    {               reduce using rule 83 (listFunc -> GET ( expr ) .)


state 182

    (94) bookItems -> STRING : ( . listItems ) , bookItems
    (91) listItems -> . empty
    (92) listItems -> . expr , listItems
    (100) empty -> .
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    )               reduce using rule 100 (empty -> .)
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    listItems                      shift and go to state 200
    empty                          shift and go to state 86
    expr                           shift and go to state 87
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 183

    (92) listItems -> expr , listItems .
    ]               reduce using rule 92 (listItems -> expr , listItems .)
    )               reduce using rule 92 (listItems -> expr , listItems .)


state 184

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    SEP             shift and go to state 201
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 185

    (39) primFuncStmt -> ID ASSIGN PEERS . SEP
    SEP             shift and go to state 202


state 186

    (40) primFuncStmt -> ID ASSIGN FIND . SEP
    SEP             shift and go to state 203


state 187

    (41) primFuncStmt -> ID ASSIGN RANDOM . ( expr , expr ) SEP
    (               shift and go to state 204


state 188

    (42) primFuncStmt -> PUT ( expr . , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 205
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 189

    (43) primFuncStmt -> PICK ( expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 206
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 190

    (44) primFuncStmt -> STOP ( expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 207
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 191

    (46) primFuncStmt -> SELL ( expr . , expr , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 208
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 192

    (49) primFuncStmt -> PRINT ( expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 209
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 193

    (35) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 210
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 194

    (34) foreachStmt -> FOREACH ID IN . expr { statementList }
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 211
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 195

    (33) repeatStmt -> REPEAT WHEN expr . { statementList }
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 212
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 196

    (55) buyStmt -> BUY ( expr . )
    (56) buyStmt -> BUY ( expr . , expr , expr )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 213
    ,               shift and go to state 214
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 197

    (54) moveStmt -> MOVE ( expr . , expr )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 215
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 198

    (16) envFunc -> ID . PUT ( expr , expr . , expr , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 216
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 199

    (17) envFunc -> ID . RUN ( expr ) SEP .
    ID              reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)
    LET             reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)
    BEHAVE          reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)
    AGENT           reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)
    ENV             reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)
    $end            reduce using rule 17 (envFunc -> ID . RUN ( expr ) SEP .)


state 200

    (94) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 217


state 201

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BEHAVE          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    AGENT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ENV             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PRINT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 202

    (39) primFuncStmt -> ID ASSIGN PEERS SEP .
    ID              reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    PUT             reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    PICK            reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    STOP            reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    RESTART         reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    SELL            reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    PRINT           reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    IN              reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    FOREACH         reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    REPEAT          reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    LET             reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    BUY             reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    MOVE            reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)
    }               reduce using rule 39 (primFuncStmt -> ID ASSIGN PEERS SEP .)


state 203

    (40) primFuncStmt -> ID ASSIGN FIND SEP .
    ID              reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    PUT             reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    PICK            reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    STOP            reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    RESTART         reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    SELL            reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    PRINT           reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    IN              reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    FOREACH         reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    REPEAT          reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    LET             reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    BUY             reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    MOVE            reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)
    }               reduce using rule 40 (primFuncStmt -> ID ASSIGN FIND SEP .)


state 204

    (41) primFuncStmt -> ID ASSIGN RANDOM ( . expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 218
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 205

    (42) primFuncStmt -> PUT ( expr , . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 219
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 206

    (43) primFuncStmt -> PICK ( expr ) . SEP
    SEP             shift and go to state 220


state 207

    (44) primFuncStmt -> STOP ( expr ) . SEP
    SEP             shift and go to state 221


state 208

    (46) primFuncStmt -> SELL ( expr , . expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 222
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 209

    (49) primFuncStmt -> PRINT ( expr ) . SEP
    SEP             shift and go to state 223


state 210

    (35) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statementList                  shift and go to state 224
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 211

    (34) foreachStmt -> FOREACH ID IN expr . { statementList }
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 225
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 212

    (33) repeatStmt -> REPEAT WHEN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statementList                  shift and go to state 226
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 213

    (55) buyStmt -> BUY ( expr ) .
    SEP             reduce using rule 55 (buyStmt -> BUY ( expr ) .)


state 214

    (56) buyStmt -> BUY ( expr , . expr , expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 227
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 215

    (54) moveStmt -> MOVE ( expr , . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 228
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 216

    (16) envFunc -> ID . PUT ( expr , expr , . expr , expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 229
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 217

    (94) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 230


state 218

    (41) primFuncStmt -> ID ASSIGN RANDOM ( expr . , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 231
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 219

    (42) primFuncStmt -> PUT ( expr , expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 232
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 220

    (43) primFuncStmt -> PICK ( expr ) SEP .
    ID              reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    PUT             reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    PICK            reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    STOP            reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    RESTART         reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    SELL            reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    PRINT           reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    IN              reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    FOREACH         reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    REPEAT          reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    LET             reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    BUY             reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    MOVE            reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)
    }               reduce using rule 43 (primFuncStmt -> PICK ( expr ) SEP .)


state 221

    (44) primFuncStmt -> STOP ( expr ) SEP .
    ID              reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    PUT             reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    PRINT           reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    IN              reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    LET             reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)
    }               reduce using rule 44 (primFuncStmt -> STOP ( expr ) SEP .)


state 222

    (46) primFuncStmt -> SELL ( expr , expr . , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 233
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 223

    (49) primFuncStmt -> PRINT ( expr ) SEP .
    ID              reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    PUT             reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    PICK            reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    STOP            reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    RESTART         reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    SELL            reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    PRINT           reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    IN              reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    FOREACH         reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    REPEAT          reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    LET             reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    BUY             reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    MOVE            reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)
    }               reduce using rule 49 (primFuncStmt -> PRINT ( expr ) SEP .)


state 224

    (35) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 234


state 225

    (34) foreachStmt -> FOREACH ID IN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statementList                  shift and go to state 235
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 226

    (33) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 236


state 227

    (56) buyStmt -> BUY ( expr , expr . , expr )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 237
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 228

    (54) moveStmt -> MOVE ( expr , expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 238
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 229

    (16) envFunc -> ID . PUT ( expr , expr , expr . , expr ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    ,               shift and go to state 239
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 230

    (94) bookItems -> STRING : ( listItems ) , . bookItems
    (93) bookItems -> . empty
    (94) bookItems -> . STRING : ( listItems ) , bookItems
    (100) empty -> .
    STRING          shift and go to state 84
    }               reduce using rule 100 (empty -> .)

    bookItems                      shift and go to state 240
    empty                          shift and go to state 83

state 231

    (41) primFuncStmt -> ID ASSIGN RANDOM ( expr , . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 241
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 232

    (42) primFuncStmt -> PUT ( expr , expr ) . SEP
    SEP             shift and go to state 242


state 233

    (46) primFuncStmt -> SELL ( expr , expr , . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 243
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 234

    (35) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (100) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 247
    IN              shift and go to state 244
    ID              reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    inothercaseStmt                shift and go to state 245
    empty                          shift and go to state 246

state 235

    (34) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 248


state 236

    (33) repeatStmt -> REPEAT WHEN expr { statementList } .
    ID              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PUT             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PRINT           reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 237

    (56) buyStmt -> BUY ( expr , expr , . expr )
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 249
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 238

    (54) moveStmt -> MOVE ( expr , expr ) .
    SEP             reduce using rule 54 (moveStmt -> MOVE ( expr , expr ) .)


state 239

    (16) envFunc -> ID . PUT ( expr , expr , expr , . expr ) SEP
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 250
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 240

    (94) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 94 (bookItems -> STRING : ( listItems ) , bookItems .)


state 241

    (41) primFuncStmt -> ID ASSIGN RANDOM ( expr , expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 251
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 242

    (42) primFuncStmt -> PUT ( expr , expr ) SEP .
    ID              reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    PUT             reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    PRINT           reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    IN              reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    LET             reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)
    }               reduce using rule 42 (primFuncStmt -> PUT ( expr , expr ) SEP .)


state 243

    (46) primFuncStmt -> SELL ( expr , expr , expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 252
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 244

    (38) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 253


state 245

    (35) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    ID              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PUT             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PRINT           reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 246

    (36) inothercaseStmt -> empty .
    ID              reduce using rule 36 (inothercaseStmt -> empty .)
    PUT             reduce using rule 36 (inothercaseStmt -> empty .)
    PICK            reduce using rule 36 (inothercaseStmt -> empty .)
    STOP            reduce using rule 36 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 36 (inothercaseStmt -> empty .)
    SELL            reduce using rule 36 (inothercaseStmt -> empty .)
    PRINT           reduce using rule 36 (inothercaseStmt -> empty .)
    IN              reduce using rule 36 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 36 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 36 (inothercaseStmt -> empty .)
    LET             reduce using rule 36 (inothercaseStmt -> empty .)
    BUY             reduce using rule 36 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 36 (inothercaseStmt -> empty .)
    }               reduce using rule 36 (inothercaseStmt -> empty .)


state 247

    (37) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 254


state 248

    (34) foreachStmt -> FOREACH ID IN expr { statementList } .
    ID              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PUT             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PRINT           reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 249

    (56) buyStmt -> BUY ( expr , expr , expr . )
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 255
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 250

    (16) envFunc -> ID . PUT ( expr , expr , expr , expr . ) SEP
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    )               shift and go to state 256
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 251

    (41) primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) . SEP
    SEP             shift and go to state 257


state 252

    (46) primFuncStmt -> SELL ( expr , expr , expr ) . SEP
    SEP             shift and go to state 258


state 253

    (38) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 259


state 254

    (37) inothercaseStmt -> OTHERWISE { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statementList                  shift and go to state 260
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 255

    (56) buyStmt -> BUY ( expr , expr , expr ) .
    SEP             reduce using rule 56 (buyStmt -> BUY ( expr , expr , expr ) .)


state 256

    (16) envFunc -> ID . PUT ( expr , expr , expr , expr ) . SEP
    SEP             shift and go to state 261


state 257

    (41) primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .
    ID              reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    PUT             reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    PICK            reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    STOP            reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    RESTART         reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    SELL            reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    PRINT           reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    IN              reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    FOREACH         reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    REPEAT          reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    LET             reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    BUY             reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    MOVE            reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)
    }               reduce using rule 41 (primFuncStmt -> ID ASSIGN RANDOM ( expr , expr ) SEP .)


state 258

    (46) primFuncStmt -> SELL ( expr , expr , expr ) SEP .
    ID              reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    PUT             reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    PRINT           reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    IN              reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    LET             reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)
    }               reduce using rule 46 (primFuncStmt -> SELL ( expr , expr , expr ) SEP .)


state 259

    (38) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (57) expr -> . call
    (58) expr -> . - expr
    (59) expr -> . ! expr
    (60) expr -> . expr / expr
    (61) expr -> . expr * expr
    (62) expr -> . expr - expr
    (63) expr -> . expr + expr
    (64) expr -> . expr GREATER expr
    (65) expr -> . expr GREATEREQ expr
    (66) expr -> . expr LESSEQ expr
    (67) expr -> . expr LESS expr
    (68) expr -> . expr EQEQ expr
    (69) expr -> . expr NOTEQ expr
    (70) expr -> . expr AND expr
    (71) expr -> . expr OR expr
    (72) call -> . ID dotTail
    (73) call -> . primary
    (84) primary -> . ( expr )
    (85) primary -> . { bookItems }
    (86) primary -> . [ listItems ]
    (87) primary -> . STRING
    (88) primary -> . NUMBER
    (89) primary -> . FALSE
    (90) primary -> . TRUE
    -               shift and go to state 39
    !               shift and go to state 40
    ID              shift and go to state 41
    (               shift and go to state 43
    {               shift and go to state 44
    [               shift and go to state 45
    STRING          shift and go to state 46
    NUMBER          shift and go to state 47
    FALSE           shift and go to state 48
    TRUE            shift and go to state 49

    expr                           shift and go to state 262
    call                           shift and go to state 38
    primary                        shift and go to state 42

state 260

    (37) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 263


state 261

    (16) envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .
    ID              reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)
    LET             reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)
    BEHAVE          reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)
    AGENT           reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)
    ENV             reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)
    $end            reduce using rule 16 (envFunc -> ID . PUT ( expr , expr , expr , expr ) SEP .)


state 262

    (38) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (60) expr -> expr . / expr
    (61) expr -> expr . * expr
    (62) expr -> expr . - expr
    (63) expr -> expr . + expr
    (64) expr -> expr . GREATER expr
    (65) expr -> expr . GREATEREQ expr
    (66) expr -> expr . LESSEQ expr
    (67) expr -> expr . LESS expr
    (68) expr -> expr . EQEQ expr
    (69) expr -> expr . NOTEQ expr
    (70) expr -> expr . AND expr
    (71) expr -> expr . OR expr
    {               shift and go to state 264
    /               shift and go to state 66
    *               shift and go to state 67
    -               shift and go to state 68
    +               shift and go to state 69
    GREATER         shift and go to state 70
    GREATEREQ       shift and go to state 71
    LESSEQ          shift and go to state 72
    LESS            shift and go to state 73
    EQEQ            shift and go to state 74
    NOTEQ           shift and go to state 75
    AND             shift and go to state 76
    OR              shift and go to state 77


state 263

    (37) inothercaseStmt -> OTHERWISE { statementList } .
    ID              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PUT             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PRINT           reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)


state 264

    (38) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (100) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . ID ASSIGN PEERS SEP
    (40) primFuncStmt -> . ID ASSIGN FIND SEP
    (41) primFuncStmt -> . ID ASSIGN RANDOM ( expr , expr ) SEP
    (42) primFuncStmt -> . PUT ( expr , expr ) SEP
    (43) primFuncStmt -> . PICK ( expr ) SEP
    (44) primFuncStmt -> . STOP ( expr ) SEP
    (45) primFuncStmt -> . RESTART BEHAVE
    (46) primFuncStmt -> . SELL ( expr , expr , expr ) SEP
    (47) primFuncStmt -> . buyStmt SEP
    (48) primFuncStmt -> . moveStmt SEP
    (49) primFuncStmt -> . PRINT ( expr ) SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (55) buyStmt -> . BUY ( expr )
    (56) buyStmt -> . BUY ( expr , expr , expr )
    (50) moveStmt -> . MOVE RIGHT
    (51) moveStmt -> . MOVE LEFT
    (52) moveStmt -> . MOVE DOWN
    (53) moveStmt -> . MOVE UP
    (54) moveStmt -> . MOVE ( expr , expr )
    (74) getter -> . ID dotTail
    }               reduce using rule 100 (empty -> .)
    ID              shift and go to state 94
    PUT             shift and go to state 105
    PICK            shift and go to state 106
    STOP            shift and go to state 107
    RESTART         shift and go to state 108
    SELL            shift and go to state 109
    PRINT           shift and go to state 112
    IN              shift and go to state 113
    FOREACH         shift and go to state 114
    REPEAT          shift and go to state 115
    LET             shift and go to state 13
    BUY             shift and go to state 116
    MOVE            shift and go to state 117

    statementList                  shift and go to state 265
    empty                          shift and go to state 97
    statement                      shift and go to state 98
    primFuncStmt                   shift and go to state 99
    incaseStmt                     shift and go to state 100
    foreachStmt                    shift and go to state 101
    repeatStmt                     shift and go to state 102
    varAssign                      shift and go to state 103
    varDecl                        shift and go to state 104
    buyStmt                        shift and go to state 110
    moveStmt                       shift and go to state 111
    getter                         shift and go to state 12

state 265

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 266


state 266

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (100) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 247
    IN              shift and go to state 244
    ID              reduce using rule 100 (empty -> .)
    PUT             reduce using rule 100 (empty -> .)
    PICK            reduce using rule 100 (empty -> .)
    STOP            reduce using rule 100 (empty -> .)
    RESTART         reduce using rule 100 (empty -> .)
    SELL            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOREACH         reduce using rule 100 (empty -> .)
    REPEAT          reduce using rule 100 (empty -> .)
    LET             reduce using rule 100 (empty -> .)
    BUY             reduce using rule 100 (empty -> .)
    MOVE            reduce using rule 100 (empty -> .)
    }               reduce using rule 100 (empty -> .)

    inothercaseStmt                shift and go to state 267
    empty                          shift and go to state 246

state 267

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    ID              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PUT             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PRINT           reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for ASSIGN in state 94 resolved as shift
shift/reduce conflict for IN in state 234 resolved as shift
shift/reduce conflict for IN in state 266 resolved as shift