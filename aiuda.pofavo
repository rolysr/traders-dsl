Grammar:

Rule 0     S' -> program
Rule 1     program -> empty
Rule 2     program -> statements
Rule 3     statements -> statements statement
Rule 4     statements -> statement
Rule 5     statement -> expr SEP
Rule 6     statement -> var_assign SEP
Rule 7     statement -> LET var : var_type SEP
Rule 8     statement -> var_define SEP
Rule 9     statement -> in_case_statement
Rule 10    statement -> repeat_when_statement
Rule 11    statement -> stop_statement
Rule 12    statement -> behavior_statement
Rule 13    behavior_statement -> behavior_definition
Rule 14    behavior_statement -> empty
Rule 15    var_type -> DICT_TYPE
Rule 16    var_type -> LIST_TYPE
Rule 17    var_type -> BOOL_TYPE
Rule 18    var_type -> STRING_TYPE
Rule 19    var_type -> FLOAT_TYPE
Rule 20    var_type -> INT_TYPE
Rule 21    behavior_definition -> BEHAVIOR ID ( params ) block
Rule 22    var_define -> LET getter ASSIGN expr
Rule 23    var_define -> LET var ASSIGN expr
Rule 24    stop_statement -> STOP expr SEP
Rule 25    var_assign -> DEC var  [precedence=right, level=12]
Rule 26    var_assign -> INC var  [precedence=right, level=12]
Rule 27    var_assign -> var SHRASGN expr  [precedence=right, level=1]
Rule 28    var_assign -> var SHLASGN expr  [precedence=right, level=1]
Rule 29    var_assign -> var XORASGN expr  [precedence=right, level=1]
Rule 30    var_assign -> var ORASGN expr  [precedence=right, level=1]
Rule 31    var_assign -> var ANDASGN expr  [precedence=right, level=1]
Rule 32    var_assign -> var MODULOASGN expr  [precedence=right, level=1]
Rule 33    var_assign -> var SLASHASGN expr  [precedence=right, level=1]
Rule 34    var_assign -> var STARASGN expr  [precedence=right, level=1]
Rule 35    var_assign -> var MINUSASGN expr  [precedence=right, level=1]
Rule 36    var_assign -> var PLUSASGN expr  [precedence=right, level=1]
Rule 37    var_assign -> var ASSIGN expr
Rule 38    in_case_statement -> IN CASE expr block
Rule 39    in_case_statement -> IN CASE expr block in_other_case_statement
Rule 40    in_case_statement -> IN CASE expr block OTHERWISE block
Rule 41    in_other_case_statement -> IN OTHER CASE expr block
Rule 42    in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block
Rule 43    in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement
Rule 44    repeat_when_statement -> REPEAT WHEN expr block
Rule 45    expr -> getter
Rule 46    expr -> { member_list }
Rule 47    expr -> NIL
Rule 48    expr -> var
Rule 49    expr -> var [ expr ]
Rule 50    expr -> list_val
Rule 51    expr -> FALSE
Rule 52    expr -> TRUE
Rule 53    expr -> STRING
Rule 54    expr -> FLOAT
Rule 55    expr -> INT
Rule 56    expr -> ( expr )
Rule 57    expr -> expr % expr  [precedence=left, level=11]
Rule 58    expr -> expr / expr  [precedence=left, level=11]
Rule 59    expr -> expr * expr  [precedence=left, level=11]
Rule 60    expr -> expr - expr  [precedence=left, level=10]
Rule 61    expr -> expr + expr  [precedence=left, level=10]
Rule 62    expr -> ! expr  [precedence=right, level=13]
Rule 63    expr -> + expr  [precedence=right, level=12]
Rule 64    expr -> - expr  [precedence=right, level=12]
Rule 65    expr -> ~ expr  [precedence=right, level=12]
Rule 66    expr -> expr | expr  [precedence=left, level=4]
Rule 67    expr -> expr ^ expr  [precedence=left, level=5]
Rule 68    expr -> expr & expr  [precedence=left, level=6]
Rule 69    expr -> expr SHR expr  [precedence=left, level=9]
Rule 70    expr -> expr SHL expr  [precedence=left, level=9]
Rule 71    expr -> expr GREATER expr  [precedence=left, level=8]
Rule 72    expr -> expr LESS expr  [precedence=left, level=8]
Rule 73    expr -> expr OR expr  [precedence=left, level=2]
Rule 74    expr -> expr AND expr  [precedence=left, level=3]
Rule 75    expr -> expr GREATEREQ expr  [precedence=left, level=8]
Rule 76    expr -> expr LESSEQ expr  [precedence=left, level=8]
Rule 77    expr -> expr NOTEQ expr  [precedence=left, level=7]
Rule 78    expr -> expr EQEQ expr  [precedence=left, level=7]
Rule 79    expr -> expr ? expr : expr
Rule 80    expr -> ID ( args )
Rule 81    list_val -> [ exprs ]
Rule 82    exprs -> exprs , expr
Rule 83    exprs -> expr
Rule 84    exprs -> empty
Rule 85    var -> var [ expr ]
Rule 86    var -> ID
Rule 87    empty -> <empty>
Rule 88    block -> statement
Rule 89    block -> { program }
Rule 90    params -> empty
Rule 91    params -> param
Rule 92    params -> params , param
Rule 93    param -> ID : var_type
Rule 94    args -> empty
Rule 95    args -> arg
Rule 96    args -> args , arg
Rule 97    arg -> expr
Rule 98    member_list -> member_list , member
Rule 99    member_list -> member
Rule 100   member_list -> empty
Rule 101   member -> STRING : expr
Rule 102   getter -> ID
Rule 103   getter -> getter . ID

Unused terminals:

    LEFT
    TRADE
    FIND
    DOWN
    PICK
    PEERS
    ENVIRONMENT
    MOVE
    UP
    PRINT
    RIGHT
    AT
    RUN
    AGENT
    PUT

Terminals, with rules where they appear:

!                    : 62
%                    : 57
&                    : 68
(                    : 21 56 80
)                    : 21 56 80
*                    : 59
+                    : 61 63
,                    : 82 92 96 98
-                    : 60 64
.                    : 103
/                    : 58
:                    : 7 79 93 101
?                    : 79
AGENT                : 
AND                  : 74
ANDASGN              : 31
ASSIGN               : 22 23 37
AT                   : 
BEHAVIOR             : 21
BOOL_TYPE            : 17
CASE                 : 38 39 40 41 42 43
DEC                  : 25
DICT_TYPE            : 15
DOWN                 : 
ENVIRONMENT          : 
EQEQ                 : 78
FALSE                : 51
FIND                 : 
FLOAT                : 54
FLOAT_TYPE           : 19
GREATER              : 71
GREATEREQ            : 75
ID                   : 21 80 86 93 102 103
IN                   : 38 39 40 41 42 43
INC                  : 26
INT                  : 55
INT_TYPE             : 20
LEFT                 : 
LESS                 : 72
LESSEQ               : 76
LET                  : 7 22 23
LIST_TYPE            : 16
MINUSASGN            : 35
MODULOASGN           : 32
MOVE                 : 
NIL                  : 47
NOTEQ                : 77
OR                   : 73
ORASGN               : 30
OTHER                : 41 42 43
OTHERWISE            : 40 42
PEERS                : 
PICK                 : 
PLUSASGN             : 36
PRINT                : 
PUT                  : 
REPEAT               : 44
RIGHT                : 
RUN                  : 
SEP                  : 5 6 7 8 24
SHL                  : 70
SHLASGN              : 28
SHR                  : 69
SHRASGN              : 27
SLASHASGN            : 33
STARASGN             : 34
STOP                 : 24
STRING               : 53 101
STRING_TYPE          : 18
TRADE                : 
TRUE                 : 52
UP                   : 
WHEN                 : 44
XORASGN              : 29
[                    : 49 81 85
]                    : 49 81 85
^                    : 67
error                : 
{                    : 46 89
|                    : 66
}                    : 46 89
~                    : 65

Nonterminals, with rules where they appear:

arg                  : 95 96
args                 : 80 96
behavior_definition  : 13
behavior_statement   : 12
block                : 21 38 39 40 40 41 42 42 43 44
empty                : 1 14 84 90 94 100
expr                 : 5 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 49 56 57 57 58 58 59 59 60 60 61 61 62 63 64 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 79 82 83 85 97 101
exprs                : 81 82
getter               : 22 45 103
in_case_statement    : 9
in_other_case_statement : 39 43
list_val             : 50
member               : 98 99
member_list          : 46 98
param                : 91 92
params               : 21 92
program              : 89 0
repeat_when_statement : 10
statement            : 3 4 88
statements           : 2 3
stop_statement       : 11
var                  : 7 23 25 26 27 28 29 30 31 32 33 34 35 36 37 48 49 85
var_assign           : 6
var_define           : 8
var_type             : 7 93


state 0

    (0) S' -> . program
    (1) program -> . empty
    (2) program -> . statements
    (87) empty -> .
    (3) statements -> . statements statement
    (4) statements -> . statement
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    $end            reduce using rule 87 (empty -> .)
    LET             shift and go to state 7
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36

    program                        shift and go to state 1
    empty                          shift and go to state 2
    statements                     shift and go to state 3
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35

state 1

    (0) S' -> program .


state 2

    (1) program -> empty .
    (14) behavior_statement -> empty .
  ! reduce/reduce conflict for $end resolved using rule 1 (program -> empty .)
    $end            reduce using rule 1 (program -> empty .)
    LET             reduce using rule 14 (behavior_statement -> empty .)
    {               reduce using rule 14 (behavior_statement -> empty .)
    NIL             reduce using rule 14 (behavior_statement -> empty .)
    FALSE           reduce using rule 14 (behavior_statement -> empty .)
    TRUE            reduce using rule 14 (behavior_statement -> empty .)
    STRING          reduce using rule 14 (behavior_statement -> empty .)
    FLOAT           reduce using rule 14 (behavior_statement -> empty .)
    INT             reduce using rule 14 (behavior_statement -> empty .)
    (               reduce using rule 14 (behavior_statement -> empty .)
    !               reduce using rule 14 (behavior_statement -> empty .)
    +               reduce using rule 14 (behavior_statement -> empty .)
    -               reduce using rule 14 (behavior_statement -> empty .)
    ~               reduce using rule 14 (behavior_statement -> empty .)
    ID              reduce using rule 14 (behavior_statement -> empty .)
    DEC             reduce using rule 14 (behavior_statement -> empty .)
    INC             reduce using rule 14 (behavior_statement -> empty .)
    IN              reduce using rule 14 (behavior_statement -> empty .)
    REPEAT          reduce using rule 14 (behavior_statement -> empty .)
    STOP            reduce using rule 14 (behavior_statement -> empty .)
    [               reduce using rule 14 (behavior_statement -> empty .)
    BEHAVIOR        reduce using rule 14 (behavior_statement -> empty .)


state 3

    (2) program -> statements .
    (3) statements -> statements . statement
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 2 (program -> statements .)
  ! reduce/reduce conflict for } resolved using rule 2 (program -> statements .)
    $end            reduce using rule 2 (program -> statements .)
    }               reduce using rule 2 (program -> statements .)
    LET             shift and go to state 7
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36

    statement                      shift and go to state 37
    expr                           shift and go to state 5
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 4

    (4) statements -> statement .
    LET             reduce using rule 4 (statements -> statement .)
    {               reduce using rule 4 (statements -> statement .)
    NIL             reduce using rule 4 (statements -> statement .)
    FALSE           reduce using rule 4 (statements -> statement .)
    TRUE            reduce using rule 4 (statements -> statement .)
    STRING          reduce using rule 4 (statements -> statement .)
    FLOAT           reduce using rule 4 (statements -> statement .)
    INT             reduce using rule 4 (statements -> statement .)
    (               reduce using rule 4 (statements -> statement .)
    !               reduce using rule 4 (statements -> statement .)
    +               reduce using rule 4 (statements -> statement .)
    -               reduce using rule 4 (statements -> statement .)
    ~               reduce using rule 4 (statements -> statement .)
    ID              reduce using rule 4 (statements -> statement .)
    DEC             reduce using rule 4 (statements -> statement .)
    INC             reduce using rule 4 (statements -> statement .)
    IN              reduce using rule 4 (statements -> statement .)
    REPEAT          reduce using rule 4 (statements -> statement .)
    STOP            reduce using rule 4 (statements -> statement .)
    [               reduce using rule 4 (statements -> statement .)
    BEHAVIOR        reduce using rule 4 (statements -> statement .)
    $end            reduce using rule 4 (statements -> statement .)
    }               reduce using rule 4 (statements -> statement .)


state 5

    (5) statement -> expr . SEP
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             shift and go to state 39
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 6

    (6) statement -> var_assign . SEP
    SEP             shift and go to state 59


state 7

    (7) statement -> LET . var : var_type SEP
    (22) var_define -> LET . getter ASSIGN expr
    (23) var_define -> LET . var ASSIGN expr
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (102) getter -> . ID
    (103) getter -> . getter . ID
    ID              shift and go to state 62

    var                            shift and go to state 60
    getter                         shift and go to state 61

state 8

    (48) expr -> var .
    (49) expr -> var . [ expr ]
    (27) var_assign -> var . SHRASGN expr
    (28) var_assign -> var . SHLASGN expr
    (29) var_assign -> var . XORASGN expr
    (30) var_assign -> var . ORASGN expr
    (31) var_assign -> var . ANDASGN expr
    (32) var_assign -> var . MODULOASGN expr
    (33) var_assign -> var . SLASHASGN expr
    (34) var_assign -> var . STARASGN expr
    (35) var_assign -> var . MINUSASGN expr
    (36) var_assign -> var . PLUSASGN expr
    (37) var_assign -> var . ASSIGN expr
    (85) var -> var . [ expr ]
    SEP             reduce using rule 48 (expr -> var .)
    %               reduce using rule 48 (expr -> var .)
    /               reduce using rule 48 (expr -> var .)
    *               reduce using rule 48 (expr -> var .)
    -               reduce using rule 48 (expr -> var .)
    +               reduce using rule 48 (expr -> var .)
    |               reduce using rule 48 (expr -> var .)
    ^               reduce using rule 48 (expr -> var .)
    &               reduce using rule 48 (expr -> var .)
    SHR             reduce using rule 48 (expr -> var .)
    SHL             reduce using rule 48 (expr -> var .)
    GREATER         reduce using rule 48 (expr -> var .)
    LESS            reduce using rule 48 (expr -> var .)
    OR              reduce using rule 48 (expr -> var .)
    AND             reduce using rule 48 (expr -> var .)
    GREATEREQ       reduce using rule 48 (expr -> var .)
    LESSEQ          reduce using rule 48 (expr -> var .)
    NOTEQ           reduce using rule 48 (expr -> var .)
    EQEQ            reduce using rule 48 (expr -> var .)
    ?               reduce using rule 48 (expr -> var .)
    [               shift and go to state 63
    SHRASGN         shift and go to state 64
    SHLASGN         shift and go to state 65
    XORASGN         shift and go to state 66
    ORASGN          shift and go to state 67
    ANDASGN         shift and go to state 68
    MODULOASGN      shift and go to state 69
    SLASHASGN       shift and go to state 70
    STARASGN        shift and go to state 71
    MINUSASGN       shift and go to state 72
    PLUSASGN        shift and go to state 73
    ASSIGN          shift and go to state 74


state 9

    (8) statement -> var_define . SEP
    SEP             shift and go to state 75


state 10

    (9) statement -> in_case_statement .
    LET             reduce using rule 9 (statement -> in_case_statement .)
    {               reduce using rule 9 (statement -> in_case_statement .)
    NIL             reduce using rule 9 (statement -> in_case_statement .)
    FALSE           reduce using rule 9 (statement -> in_case_statement .)
    TRUE            reduce using rule 9 (statement -> in_case_statement .)
    STRING          reduce using rule 9 (statement -> in_case_statement .)
    FLOAT           reduce using rule 9 (statement -> in_case_statement .)
    INT             reduce using rule 9 (statement -> in_case_statement .)
    (               reduce using rule 9 (statement -> in_case_statement .)
    !               reduce using rule 9 (statement -> in_case_statement .)
    +               reduce using rule 9 (statement -> in_case_statement .)
    -               reduce using rule 9 (statement -> in_case_statement .)
    ~               reduce using rule 9 (statement -> in_case_statement .)
    ID              reduce using rule 9 (statement -> in_case_statement .)
    DEC             reduce using rule 9 (statement -> in_case_statement .)
    INC             reduce using rule 9 (statement -> in_case_statement .)
    IN              reduce using rule 9 (statement -> in_case_statement .)
    REPEAT          reduce using rule 9 (statement -> in_case_statement .)
    STOP            reduce using rule 9 (statement -> in_case_statement .)
    [               reduce using rule 9 (statement -> in_case_statement .)
    BEHAVIOR        reduce using rule 9 (statement -> in_case_statement .)
    $end            reduce using rule 9 (statement -> in_case_statement .)
    }               reduce using rule 9 (statement -> in_case_statement .)
    OTHERWISE       reduce using rule 9 (statement -> in_case_statement .)


state 11

    (10) statement -> repeat_when_statement .
    LET             reduce using rule 10 (statement -> repeat_when_statement .)
    {               reduce using rule 10 (statement -> repeat_when_statement .)
    NIL             reduce using rule 10 (statement -> repeat_when_statement .)
    FALSE           reduce using rule 10 (statement -> repeat_when_statement .)
    TRUE            reduce using rule 10 (statement -> repeat_when_statement .)
    STRING          reduce using rule 10 (statement -> repeat_when_statement .)
    FLOAT           reduce using rule 10 (statement -> repeat_when_statement .)
    INT             reduce using rule 10 (statement -> repeat_when_statement .)
    (               reduce using rule 10 (statement -> repeat_when_statement .)
    !               reduce using rule 10 (statement -> repeat_when_statement .)
    +               reduce using rule 10 (statement -> repeat_when_statement .)
    -               reduce using rule 10 (statement -> repeat_when_statement .)
    ~               reduce using rule 10 (statement -> repeat_when_statement .)
    ID              reduce using rule 10 (statement -> repeat_when_statement .)
    DEC             reduce using rule 10 (statement -> repeat_when_statement .)
    INC             reduce using rule 10 (statement -> repeat_when_statement .)
    IN              reduce using rule 10 (statement -> repeat_when_statement .)
    REPEAT          reduce using rule 10 (statement -> repeat_when_statement .)
    STOP            reduce using rule 10 (statement -> repeat_when_statement .)
    [               reduce using rule 10 (statement -> repeat_when_statement .)
    BEHAVIOR        reduce using rule 10 (statement -> repeat_when_statement .)
    $end            reduce using rule 10 (statement -> repeat_when_statement .)
    }               reduce using rule 10 (statement -> repeat_when_statement .)
    OTHERWISE       reduce using rule 10 (statement -> repeat_when_statement .)


state 12

    (11) statement -> stop_statement .
    LET             reduce using rule 11 (statement -> stop_statement .)
    {               reduce using rule 11 (statement -> stop_statement .)
    NIL             reduce using rule 11 (statement -> stop_statement .)
    FALSE           reduce using rule 11 (statement -> stop_statement .)
    TRUE            reduce using rule 11 (statement -> stop_statement .)
    STRING          reduce using rule 11 (statement -> stop_statement .)
    FLOAT           reduce using rule 11 (statement -> stop_statement .)
    INT             reduce using rule 11 (statement -> stop_statement .)
    (               reduce using rule 11 (statement -> stop_statement .)
    !               reduce using rule 11 (statement -> stop_statement .)
    +               reduce using rule 11 (statement -> stop_statement .)
    -               reduce using rule 11 (statement -> stop_statement .)
    ~               reduce using rule 11 (statement -> stop_statement .)
    ID              reduce using rule 11 (statement -> stop_statement .)
    DEC             reduce using rule 11 (statement -> stop_statement .)
    INC             reduce using rule 11 (statement -> stop_statement .)
    IN              reduce using rule 11 (statement -> stop_statement .)
    REPEAT          reduce using rule 11 (statement -> stop_statement .)
    STOP            reduce using rule 11 (statement -> stop_statement .)
    [               reduce using rule 11 (statement -> stop_statement .)
    BEHAVIOR        reduce using rule 11 (statement -> stop_statement .)
    $end            reduce using rule 11 (statement -> stop_statement .)
    }               reduce using rule 11 (statement -> stop_statement .)
    OTHERWISE       reduce using rule 11 (statement -> stop_statement .)


state 13

    (12) statement -> behavior_statement .
    LET             reduce using rule 12 (statement -> behavior_statement .)
    {               reduce using rule 12 (statement -> behavior_statement .)
    NIL             reduce using rule 12 (statement -> behavior_statement .)
    FALSE           reduce using rule 12 (statement -> behavior_statement .)
    TRUE            reduce using rule 12 (statement -> behavior_statement .)
    STRING          reduce using rule 12 (statement -> behavior_statement .)
    FLOAT           reduce using rule 12 (statement -> behavior_statement .)
    INT             reduce using rule 12 (statement -> behavior_statement .)
    (               reduce using rule 12 (statement -> behavior_statement .)
    !               reduce using rule 12 (statement -> behavior_statement .)
    +               reduce using rule 12 (statement -> behavior_statement .)
    -               reduce using rule 12 (statement -> behavior_statement .)
    ~               reduce using rule 12 (statement -> behavior_statement .)
    ID              reduce using rule 12 (statement -> behavior_statement .)
    DEC             reduce using rule 12 (statement -> behavior_statement .)
    INC             reduce using rule 12 (statement -> behavior_statement .)
    IN              reduce using rule 12 (statement -> behavior_statement .)
    REPEAT          reduce using rule 12 (statement -> behavior_statement .)
    STOP            reduce using rule 12 (statement -> behavior_statement .)
    [               reduce using rule 12 (statement -> behavior_statement .)
    BEHAVIOR        reduce using rule 12 (statement -> behavior_statement .)
    $end            reduce using rule 12 (statement -> behavior_statement .)
    }               reduce using rule 12 (statement -> behavior_statement .)
    OTHERWISE       reduce using rule 12 (statement -> behavior_statement .)


state 14

    (45) expr -> getter .
    (103) getter -> getter . . ID
    SEP             reduce using rule 45 (expr -> getter .)
    %               reduce using rule 45 (expr -> getter .)
    /               reduce using rule 45 (expr -> getter .)
    *               reduce using rule 45 (expr -> getter .)
    -               reduce using rule 45 (expr -> getter .)
    +               reduce using rule 45 (expr -> getter .)
    |               reduce using rule 45 (expr -> getter .)
    ^               reduce using rule 45 (expr -> getter .)
    &               reduce using rule 45 (expr -> getter .)
    SHR             reduce using rule 45 (expr -> getter .)
    SHL             reduce using rule 45 (expr -> getter .)
    GREATER         reduce using rule 45 (expr -> getter .)
    LESS            reduce using rule 45 (expr -> getter .)
    OR              reduce using rule 45 (expr -> getter .)
    AND             reduce using rule 45 (expr -> getter .)
    GREATEREQ       reduce using rule 45 (expr -> getter .)
    LESSEQ          reduce using rule 45 (expr -> getter .)
    NOTEQ           reduce using rule 45 (expr -> getter .)
    EQEQ            reduce using rule 45 (expr -> getter .)
    ?               reduce using rule 45 (expr -> getter .)
    ]               reduce using rule 45 (expr -> getter .)
    ,               reduce using rule 45 (expr -> getter .)
    )               reduce using rule 45 (expr -> getter .)
    :               reduce using rule 45 (expr -> getter .)
    {               reduce using rule 45 (expr -> getter .)
    LET             reduce using rule 45 (expr -> getter .)
    NIL             reduce using rule 45 (expr -> getter .)
    FALSE           reduce using rule 45 (expr -> getter .)
    TRUE            reduce using rule 45 (expr -> getter .)
    STRING          reduce using rule 45 (expr -> getter .)
    FLOAT           reduce using rule 45 (expr -> getter .)
    INT             reduce using rule 45 (expr -> getter .)
    (               reduce using rule 45 (expr -> getter .)
    !               reduce using rule 45 (expr -> getter .)
    ~               reduce using rule 45 (expr -> getter .)
    ID              reduce using rule 45 (expr -> getter .)
    DEC             reduce using rule 45 (expr -> getter .)
    INC             reduce using rule 45 (expr -> getter .)
    IN              reduce using rule 45 (expr -> getter .)
    REPEAT          reduce using rule 45 (expr -> getter .)
    STOP            reduce using rule 45 (expr -> getter .)
    [               reduce using rule 45 (expr -> getter .)
    BEHAVIOR        reduce using rule 45 (expr -> getter .)
    OTHERWISE       reduce using rule 45 (expr -> getter .)
    $end            reduce using rule 45 (expr -> getter .)
    }               reduce using rule 45 (expr -> getter .)
    .               shift and go to state 76


state 15

    (46) expr -> { . member_list }
    (98) member_list -> . member_list , member
    (99) member_list -> . member
    (100) member_list -> . empty
    (101) member -> . STRING : expr
    (87) empty -> .
    STRING          shift and go to state 80
    }               reduce using rule 87 (empty -> .)
    ,               reduce using rule 87 (empty -> .)

    member_list                    shift and go to state 77
    member                         shift and go to state 78
    empty                          shift and go to state 79

state 16

    (47) expr -> NIL .
    SEP             reduce using rule 47 (expr -> NIL .)
    %               reduce using rule 47 (expr -> NIL .)
    /               reduce using rule 47 (expr -> NIL .)
    *               reduce using rule 47 (expr -> NIL .)
    -               reduce using rule 47 (expr -> NIL .)
    +               reduce using rule 47 (expr -> NIL .)
    |               reduce using rule 47 (expr -> NIL .)
    ^               reduce using rule 47 (expr -> NIL .)
    &               reduce using rule 47 (expr -> NIL .)
    SHR             reduce using rule 47 (expr -> NIL .)
    SHL             reduce using rule 47 (expr -> NIL .)
    GREATER         reduce using rule 47 (expr -> NIL .)
    LESS            reduce using rule 47 (expr -> NIL .)
    OR              reduce using rule 47 (expr -> NIL .)
    AND             reduce using rule 47 (expr -> NIL .)
    GREATEREQ       reduce using rule 47 (expr -> NIL .)
    LESSEQ          reduce using rule 47 (expr -> NIL .)
    NOTEQ           reduce using rule 47 (expr -> NIL .)
    EQEQ            reduce using rule 47 (expr -> NIL .)
    ?               reduce using rule 47 (expr -> NIL .)
    ]               reduce using rule 47 (expr -> NIL .)
    ,               reduce using rule 47 (expr -> NIL .)
    )               reduce using rule 47 (expr -> NIL .)
    :               reduce using rule 47 (expr -> NIL .)
    {               reduce using rule 47 (expr -> NIL .)
    LET             reduce using rule 47 (expr -> NIL .)
    NIL             reduce using rule 47 (expr -> NIL .)
    FALSE           reduce using rule 47 (expr -> NIL .)
    TRUE            reduce using rule 47 (expr -> NIL .)
    STRING          reduce using rule 47 (expr -> NIL .)
    FLOAT           reduce using rule 47 (expr -> NIL .)
    INT             reduce using rule 47 (expr -> NIL .)
    (               reduce using rule 47 (expr -> NIL .)
    !               reduce using rule 47 (expr -> NIL .)
    ~               reduce using rule 47 (expr -> NIL .)
    ID              reduce using rule 47 (expr -> NIL .)
    DEC             reduce using rule 47 (expr -> NIL .)
    INC             reduce using rule 47 (expr -> NIL .)
    IN              reduce using rule 47 (expr -> NIL .)
    REPEAT          reduce using rule 47 (expr -> NIL .)
    STOP            reduce using rule 47 (expr -> NIL .)
    [               reduce using rule 47 (expr -> NIL .)
    BEHAVIOR        reduce using rule 47 (expr -> NIL .)
    OTHERWISE       reduce using rule 47 (expr -> NIL .)
    $end            reduce using rule 47 (expr -> NIL .)
    }               reduce using rule 47 (expr -> NIL .)


state 17

    (81) list_val -> [ . exprs ]
    (82) exprs -> . exprs , expr
    (83) exprs -> . expr
    (84) exprs -> . empty
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (87) empty -> .
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    ]               reduce using rule 87 (empty -> .)
    ,               reduce using rule 87 (empty -> .)
    [               shift and go to state 17

    exprs                          shift and go to state 81
    expr                           shift and go to state 82
    empty                          shift and go to state 83
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 18

    (50) expr -> list_val .
    SEP             reduce using rule 50 (expr -> list_val .)
    %               reduce using rule 50 (expr -> list_val .)
    /               reduce using rule 50 (expr -> list_val .)
    *               reduce using rule 50 (expr -> list_val .)
    -               reduce using rule 50 (expr -> list_val .)
    +               reduce using rule 50 (expr -> list_val .)
    |               reduce using rule 50 (expr -> list_val .)
    ^               reduce using rule 50 (expr -> list_val .)
    &               reduce using rule 50 (expr -> list_val .)
    SHR             reduce using rule 50 (expr -> list_val .)
    SHL             reduce using rule 50 (expr -> list_val .)
    GREATER         reduce using rule 50 (expr -> list_val .)
    LESS            reduce using rule 50 (expr -> list_val .)
    OR              reduce using rule 50 (expr -> list_val .)
    AND             reduce using rule 50 (expr -> list_val .)
    GREATEREQ       reduce using rule 50 (expr -> list_val .)
    LESSEQ          reduce using rule 50 (expr -> list_val .)
    NOTEQ           reduce using rule 50 (expr -> list_val .)
    EQEQ            reduce using rule 50 (expr -> list_val .)
    ?               reduce using rule 50 (expr -> list_val .)
    ]               reduce using rule 50 (expr -> list_val .)
    ,               reduce using rule 50 (expr -> list_val .)
    )               reduce using rule 50 (expr -> list_val .)
    :               reduce using rule 50 (expr -> list_val .)
    {               reduce using rule 50 (expr -> list_val .)
    LET             reduce using rule 50 (expr -> list_val .)
    NIL             reduce using rule 50 (expr -> list_val .)
    FALSE           reduce using rule 50 (expr -> list_val .)
    TRUE            reduce using rule 50 (expr -> list_val .)
    STRING          reduce using rule 50 (expr -> list_val .)
    FLOAT           reduce using rule 50 (expr -> list_val .)
    INT             reduce using rule 50 (expr -> list_val .)
    (               reduce using rule 50 (expr -> list_val .)
    !               reduce using rule 50 (expr -> list_val .)
    ~               reduce using rule 50 (expr -> list_val .)
    ID              reduce using rule 50 (expr -> list_val .)
    DEC             reduce using rule 50 (expr -> list_val .)
    INC             reduce using rule 50 (expr -> list_val .)
    IN              reduce using rule 50 (expr -> list_val .)
    REPEAT          reduce using rule 50 (expr -> list_val .)
    STOP            reduce using rule 50 (expr -> list_val .)
    [               reduce using rule 50 (expr -> list_val .)
    BEHAVIOR        reduce using rule 50 (expr -> list_val .)
    OTHERWISE       reduce using rule 50 (expr -> list_val .)
    $end            reduce using rule 50 (expr -> list_val .)
    }               reduce using rule 50 (expr -> list_val .)


state 19

    (51) expr -> FALSE .
    SEP             reduce using rule 51 (expr -> FALSE .)
    %               reduce using rule 51 (expr -> FALSE .)
    /               reduce using rule 51 (expr -> FALSE .)
    *               reduce using rule 51 (expr -> FALSE .)
    -               reduce using rule 51 (expr -> FALSE .)
    +               reduce using rule 51 (expr -> FALSE .)
    |               reduce using rule 51 (expr -> FALSE .)
    ^               reduce using rule 51 (expr -> FALSE .)
    &               reduce using rule 51 (expr -> FALSE .)
    SHR             reduce using rule 51 (expr -> FALSE .)
    SHL             reduce using rule 51 (expr -> FALSE .)
    GREATER         reduce using rule 51 (expr -> FALSE .)
    LESS            reduce using rule 51 (expr -> FALSE .)
    OR              reduce using rule 51 (expr -> FALSE .)
    AND             reduce using rule 51 (expr -> FALSE .)
    GREATEREQ       reduce using rule 51 (expr -> FALSE .)
    LESSEQ          reduce using rule 51 (expr -> FALSE .)
    NOTEQ           reduce using rule 51 (expr -> FALSE .)
    EQEQ            reduce using rule 51 (expr -> FALSE .)
    ?               reduce using rule 51 (expr -> FALSE .)
    ]               reduce using rule 51 (expr -> FALSE .)
    ,               reduce using rule 51 (expr -> FALSE .)
    )               reduce using rule 51 (expr -> FALSE .)
    :               reduce using rule 51 (expr -> FALSE .)
    {               reduce using rule 51 (expr -> FALSE .)
    LET             reduce using rule 51 (expr -> FALSE .)
    NIL             reduce using rule 51 (expr -> FALSE .)
    FALSE           reduce using rule 51 (expr -> FALSE .)
    TRUE            reduce using rule 51 (expr -> FALSE .)
    STRING          reduce using rule 51 (expr -> FALSE .)
    FLOAT           reduce using rule 51 (expr -> FALSE .)
    INT             reduce using rule 51 (expr -> FALSE .)
    (               reduce using rule 51 (expr -> FALSE .)
    !               reduce using rule 51 (expr -> FALSE .)
    ~               reduce using rule 51 (expr -> FALSE .)
    ID              reduce using rule 51 (expr -> FALSE .)
    DEC             reduce using rule 51 (expr -> FALSE .)
    INC             reduce using rule 51 (expr -> FALSE .)
    IN              reduce using rule 51 (expr -> FALSE .)
    REPEAT          reduce using rule 51 (expr -> FALSE .)
    STOP            reduce using rule 51 (expr -> FALSE .)
    [               reduce using rule 51 (expr -> FALSE .)
    BEHAVIOR        reduce using rule 51 (expr -> FALSE .)
    OTHERWISE       reduce using rule 51 (expr -> FALSE .)
    $end            reduce using rule 51 (expr -> FALSE .)
    }               reduce using rule 51 (expr -> FALSE .)


state 20

    (52) expr -> TRUE .
    SEP             reduce using rule 52 (expr -> TRUE .)
    %               reduce using rule 52 (expr -> TRUE .)
    /               reduce using rule 52 (expr -> TRUE .)
    *               reduce using rule 52 (expr -> TRUE .)
    -               reduce using rule 52 (expr -> TRUE .)
    +               reduce using rule 52 (expr -> TRUE .)
    |               reduce using rule 52 (expr -> TRUE .)
    ^               reduce using rule 52 (expr -> TRUE .)
    &               reduce using rule 52 (expr -> TRUE .)
    SHR             reduce using rule 52 (expr -> TRUE .)
    SHL             reduce using rule 52 (expr -> TRUE .)
    GREATER         reduce using rule 52 (expr -> TRUE .)
    LESS            reduce using rule 52 (expr -> TRUE .)
    OR              reduce using rule 52 (expr -> TRUE .)
    AND             reduce using rule 52 (expr -> TRUE .)
    GREATEREQ       reduce using rule 52 (expr -> TRUE .)
    LESSEQ          reduce using rule 52 (expr -> TRUE .)
    NOTEQ           reduce using rule 52 (expr -> TRUE .)
    EQEQ            reduce using rule 52 (expr -> TRUE .)
    ?               reduce using rule 52 (expr -> TRUE .)
    ]               reduce using rule 52 (expr -> TRUE .)
    ,               reduce using rule 52 (expr -> TRUE .)
    )               reduce using rule 52 (expr -> TRUE .)
    :               reduce using rule 52 (expr -> TRUE .)
    {               reduce using rule 52 (expr -> TRUE .)
    LET             reduce using rule 52 (expr -> TRUE .)
    NIL             reduce using rule 52 (expr -> TRUE .)
    FALSE           reduce using rule 52 (expr -> TRUE .)
    TRUE            reduce using rule 52 (expr -> TRUE .)
    STRING          reduce using rule 52 (expr -> TRUE .)
    FLOAT           reduce using rule 52 (expr -> TRUE .)
    INT             reduce using rule 52 (expr -> TRUE .)
    (               reduce using rule 52 (expr -> TRUE .)
    !               reduce using rule 52 (expr -> TRUE .)
    ~               reduce using rule 52 (expr -> TRUE .)
    ID              reduce using rule 52 (expr -> TRUE .)
    DEC             reduce using rule 52 (expr -> TRUE .)
    INC             reduce using rule 52 (expr -> TRUE .)
    IN              reduce using rule 52 (expr -> TRUE .)
    REPEAT          reduce using rule 52 (expr -> TRUE .)
    STOP            reduce using rule 52 (expr -> TRUE .)
    [               reduce using rule 52 (expr -> TRUE .)
    BEHAVIOR        reduce using rule 52 (expr -> TRUE .)
    OTHERWISE       reduce using rule 52 (expr -> TRUE .)
    $end            reduce using rule 52 (expr -> TRUE .)
    }               reduce using rule 52 (expr -> TRUE .)


state 21

    (53) expr -> STRING .
    SEP             reduce using rule 53 (expr -> STRING .)
    %               reduce using rule 53 (expr -> STRING .)
    /               reduce using rule 53 (expr -> STRING .)
    *               reduce using rule 53 (expr -> STRING .)
    -               reduce using rule 53 (expr -> STRING .)
    +               reduce using rule 53 (expr -> STRING .)
    |               reduce using rule 53 (expr -> STRING .)
    ^               reduce using rule 53 (expr -> STRING .)
    &               reduce using rule 53 (expr -> STRING .)
    SHR             reduce using rule 53 (expr -> STRING .)
    SHL             reduce using rule 53 (expr -> STRING .)
    GREATER         reduce using rule 53 (expr -> STRING .)
    LESS            reduce using rule 53 (expr -> STRING .)
    OR              reduce using rule 53 (expr -> STRING .)
    AND             reduce using rule 53 (expr -> STRING .)
    GREATEREQ       reduce using rule 53 (expr -> STRING .)
    LESSEQ          reduce using rule 53 (expr -> STRING .)
    NOTEQ           reduce using rule 53 (expr -> STRING .)
    EQEQ            reduce using rule 53 (expr -> STRING .)
    ?               reduce using rule 53 (expr -> STRING .)
    ]               reduce using rule 53 (expr -> STRING .)
    ,               reduce using rule 53 (expr -> STRING .)
    )               reduce using rule 53 (expr -> STRING .)
    :               reduce using rule 53 (expr -> STRING .)
    {               reduce using rule 53 (expr -> STRING .)
    LET             reduce using rule 53 (expr -> STRING .)
    NIL             reduce using rule 53 (expr -> STRING .)
    FALSE           reduce using rule 53 (expr -> STRING .)
    TRUE            reduce using rule 53 (expr -> STRING .)
    STRING          reduce using rule 53 (expr -> STRING .)
    FLOAT           reduce using rule 53 (expr -> STRING .)
    INT             reduce using rule 53 (expr -> STRING .)
    (               reduce using rule 53 (expr -> STRING .)
    !               reduce using rule 53 (expr -> STRING .)
    ~               reduce using rule 53 (expr -> STRING .)
    ID              reduce using rule 53 (expr -> STRING .)
    DEC             reduce using rule 53 (expr -> STRING .)
    INC             reduce using rule 53 (expr -> STRING .)
    IN              reduce using rule 53 (expr -> STRING .)
    REPEAT          reduce using rule 53 (expr -> STRING .)
    STOP            reduce using rule 53 (expr -> STRING .)
    [               reduce using rule 53 (expr -> STRING .)
    BEHAVIOR        reduce using rule 53 (expr -> STRING .)
    OTHERWISE       reduce using rule 53 (expr -> STRING .)
    $end            reduce using rule 53 (expr -> STRING .)
    }               reduce using rule 53 (expr -> STRING .)


state 22

    (54) expr -> FLOAT .
    SEP             reduce using rule 54 (expr -> FLOAT .)
    %               reduce using rule 54 (expr -> FLOAT .)
    /               reduce using rule 54 (expr -> FLOAT .)
    *               reduce using rule 54 (expr -> FLOAT .)
    -               reduce using rule 54 (expr -> FLOAT .)
    +               reduce using rule 54 (expr -> FLOAT .)
    |               reduce using rule 54 (expr -> FLOAT .)
    ^               reduce using rule 54 (expr -> FLOAT .)
    &               reduce using rule 54 (expr -> FLOAT .)
    SHR             reduce using rule 54 (expr -> FLOAT .)
    SHL             reduce using rule 54 (expr -> FLOAT .)
    GREATER         reduce using rule 54 (expr -> FLOAT .)
    LESS            reduce using rule 54 (expr -> FLOAT .)
    OR              reduce using rule 54 (expr -> FLOAT .)
    AND             reduce using rule 54 (expr -> FLOAT .)
    GREATEREQ       reduce using rule 54 (expr -> FLOAT .)
    LESSEQ          reduce using rule 54 (expr -> FLOAT .)
    NOTEQ           reduce using rule 54 (expr -> FLOAT .)
    EQEQ            reduce using rule 54 (expr -> FLOAT .)
    ?               reduce using rule 54 (expr -> FLOAT .)
    ]               reduce using rule 54 (expr -> FLOAT .)
    ,               reduce using rule 54 (expr -> FLOAT .)
    )               reduce using rule 54 (expr -> FLOAT .)
    :               reduce using rule 54 (expr -> FLOAT .)
    {               reduce using rule 54 (expr -> FLOAT .)
    LET             reduce using rule 54 (expr -> FLOAT .)
    NIL             reduce using rule 54 (expr -> FLOAT .)
    FALSE           reduce using rule 54 (expr -> FLOAT .)
    TRUE            reduce using rule 54 (expr -> FLOAT .)
    STRING          reduce using rule 54 (expr -> FLOAT .)
    FLOAT           reduce using rule 54 (expr -> FLOAT .)
    INT             reduce using rule 54 (expr -> FLOAT .)
    (               reduce using rule 54 (expr -> FLOAT .)
    !               reduce using rule 54 (expr -> FLOAT .)
    ~               reduce using rule 54 (expr -> FLOAT .)
    ID              reduce using rule 54 (expr -> FLOAT .)
    DEC             reduce using rule 54 (expr -> FLOAT .)
    INC             reduce using rule 54 (expr -> FLOAT .)
    IN              reduce using rule 54 (expr -> FLOAT .)
    REPEAT          reduce using rule 54 (expr -> FLOAT .)
    STOP            reduce using rule 54 (expr -> FLOAT .)
    [               reduce using rule 54 (expr -> FLOAT .)
    BEHAVIOR        reduce using rule 54 (expr -> FLOAT .)
    OTHERWISE       reduce using rule 54 (expr -> FLOAT .)
    $end            reduce using rule 54 (expr -> FLOAT .)
    }               reduce using rule 54 (expr -> FLOAT .)


state 23

    (55) expr -> INT .
    SEP             reduce using rule 55 (expr -> INT .)
    %               reduce using rule 55 (expr -> INT .)
    /               reduce using rule 55 (expr -> INT .)
    *               reduce using rule 55 (expr -> INT .)
    -               reduce using rule 55 (expr -> INT .)
    +               reduce using rule 55 (expr -> INT .)
    |               reduce using rule 55 (expr -> INT .)
    ^               reduce using rule 55 (expr -> INT .)
    &               reduce using rule 55 (expr -> INT .)
    SHR             reduce using rule 55 (expr -> INT .)
    SHL             reduce using rule 55 (expr -> INT .)
    GREATER         reduce using rule 55 (expr -> INT .)
    LESS            reduce using rule 55 (expr -> INT .)
    OR              reduce using rule 55 (expr -> INT .)
    AND             reduce using rule 55 (expr -> INT .)
    GREATEREQ       reduce using rule 55 (expr -> INT .)
    LESSEQ          reduce using rule 55 (expr -> INT .)
    NOTEQ           reduce using rule 55 (expr -> INT .)
    EQEQ            reduce using rule 55 (expr -> INT .)
    ?               reduce using rule 55 (expr -> INT .)
    ]               reduce using rule 55 (expr -> INT .)
    ,               reduce using rule 55 (expr -> INT .)
    )               reduce using rule 55 (expr -> INT .)
    :               reduce using rule 55 (expr -> INT .)
    {               reduce using rule 55 (expr -> INT .)
    LET             reduce using rule 55 (expr -> INT .)
    NIL             reduce using rule 55 (expr -> INT .)
    FALSE           reduce using rule 55 (expr -> INT .)
    TRUE            reduce using rule 55 (expr -> INT .)
    STRING          reduce using rule 55 (expr -> INT .)
    FLOAT           reduce using rule 55 (expr -> INT .)
    INT             reduce using rule 55 (expr -> INT .)
    (               reduce using rule 55 (expr -> INT .)
    !               reduce using rule 55 (expr -> INT .)
    ~               reduce using rule 55 (expr -> INT .)
    ID              reduce using rule 55 (expr -> INT .)
    DEC             reduce using rule 55 (expr -> INT .)
    INC             reduce using rule 55 (expr -> INT .)
    IN              reduce using rule 55 (expr -> INT .)
    REPEAT          reduce using rule 55 (expr -> INT .)
    STOP            reduce using rule 55 (expr -> INT .)
    [               reduce using rule 55 (expr -> INT .)
    BEHAVIOR        reduce using rule 55 (expr -> INT .)
    OTHERWISE       reduce using rule 55 (expr -> INT .)
    $end            reduce using rule 55 (expr -> INT .)
    }               reduce using rule 55 (expr -> INT .)


state 24

    (56) expr -> ( . expr )
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 85
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 25

    (64) expr -> - . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 86
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 26

    (63) expr -> + . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 87
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 27

    (62) expr -> ! . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 88
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 28

    (65) expr -> ~ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 89
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 29

    (80) expr -> ID . ( args )
    (102) getter -> ID .
    (86) var -> ID .
  ! shift/reduce conflict for ( resolved as shift
  ! reduce/reduce conflict for [ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for SEP resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for % resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for / resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for * resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for - resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for + resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for | resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ^ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for & resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for SHR resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for SHL resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for LESS resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for OR resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for AND resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for EQEQ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ? resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ] resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for , resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ) resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for : resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for { resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for LET resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for NIL resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for FALSE resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for TRUE resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for STRING resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 86 (var -> ID .)
  ! shift/reduce conflict for ( resolved as shift
  ! reduce/reduce conflict for ! resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ~ resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for DEC resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for INC resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for IN resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for REPEAT resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for STOP resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for BEHAVIOR resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 86 (var -> ID .)
  ! reduce/reduce conflict for } resolved using rule 86 (var -> ID .)
    (               shift and go to state 90
    .               reduce using rule 102 (getter -> ID .)
    [               reduce using rule 86 (var -> ID .)
    SHRASGN         reduce using rule 86 (var -> ID .)
    SHLASGN         reduce using rule 86 (var -> ID .)
    XORASGN         reduce using rule 86 (var -> ID .)
    ORASGN          reduce using rule 86 (var -> ID .)
    ANDASGN         reduce using rule 86 (var -> ID .)
    MODULOASGN      reduce using rule 86 (var -> ID .)
    SLASHASGN       reduce using rule 86 (var -> ID .)
    STARASGN        reduce using rule 86 (var -> ID .)
    MINUSASGN       reduce using rule 86 (var -> ID .)
    PLUSASGN        reduce using rule 86 (var -> ID .)
    ASSIGN          reduce using rule 86 (var -> ID .)
    SEP             reduce using rule 86 (var -> ID .)
    %               reduce using rule 86 (var -> ID .)
    /               reduce using rule 86 (var -> ID .)
    *               reduce using rule 86 (var -> ID .)
    -               reduce using rule 86 (var -> ID .)
    +               reduce using rule 86 (var -> ID .)
    |               reduce using rule 86 (var -> ID .)
    ^               reduce using rule 86 (var -> ID .)
    &               reduce using rule 86 (var -> ID .)
    SHR             reduce using rule 86 (var -> ID .)
    SHL             reduce using rule 86 (var -> ID .)
    GREATER         reduce using rule 86 (var -> ID .)
    LESS            reduce using rule 86 (var -> ID .)
    OR              reduce using rule 86 (var -> ID .)
    AND             reduce using rule 86 (var -> ID .)
    GREATEREQ       reduce using rule 86 (var -> ID .)
    LESSEQ          reduce using rule 86 (var -> ID .)
    NOTEQ           reduce using rule 86 (var -> ID .)
    EQEQ            reduce using rule 86 (var -> ID .)
    ?               reduce using rule 86 (var -> ID .)
    ]               reduce using rule 86 (var -> ID .)
    ,               reduce using rule 86 (var -> ID .)
    )               reduce using rule 86 (var -> ID .)
    :               reduce using rule 86 (var -> ID .)
    {               reduce using rule 86 (var -> ID .)
    LET             reduce using rule 86 (var -> ID .)
    NIL             reduce using rule 86 (var -> ID .)
    FALSE           reduce using rule 86 (var -> ID .)
    TRUE            reduce using rule 86 (var -> ID .)
    STRING          reduce using rule 86 (var -> ID .)
    FLOAT           reduce using rule 86 (var -> ID .)
    INT             reduce using rule 86 (var -> ID .)
    !               reduce using rule 86 (var -> ID .)
    ~               reduce using rule 86 (var -> ID .)
    ID              reduce using rule 86 (var -> ID .)
    DEC             reduce using rule 86 (var -> ID .)
    INC             reduce using rule 86 (var -> ID .)
    IN              reduce using rule 86 (var -> ID .)
    REPEAT          reduce using rule 86 (var -> ID .)
    STOP            reduce using rule 86 (var -> ID .)
    BEHAVIOR        reduce using rule 86 (var -> ID .)
    OTHERWISE       reduce using rule 86 (var -> ID .)
    $end            reduce using rule 86 (var -> ID .)
    }               reduce using rule 86 (var -> ID .)


state 30

    (25) var_assign -> DEC . var
    (85) var -> . var [ expr ]
    (86) var -> . ID
    ID              shift and go to state 92

    var                            shift and go to state 91

state 31

    (26) var_assign -> INC . var
    (85) var -> . var [ expr ]
    (86) var -> . ID
    ID              shift and go to state 92

    var                            shift and go to state 93

state 32

    (38) in_case_statement -> IN . CASE expr block
    (39) in_case_statement -> IN . CASE expr block in_other_case_statement
    (40) in_case_statement -> IN . CASE expr block OTHERWISE block
    CASE            shift and go to state 94


state 33

    (44) repeat_when_statement -> REPEAT . WHEN expr block
    WHEN            shift and go to state 95


state 34

    (24) stop_statement -> STOP . expr SEP
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 96
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 35

    (13) behavior_statement -> behavior_definition .
    LET             reduce using rule 13 (behavior_statement -> behavior_definition .)
    {               reduce using rule 13 (behavior_statement -> behavior_definition .)
    NIL             reduce using rule 13 (behavior_statement -> behavior_definition .)
    FALSE           reduce using rule 13 (behavior_statement -> behavior_definition .)
    TRUE            reduce using rule 13 (behavior_statement -> behavior_definition .)
    STRING          reduce using rule 13 (behavior_statement -> behavior_definition .)
    FLOAT           reduce using rule 13 (behavior_statement -> behavior_definition .)
    INT             reduce using rule 13 (behavior_statement -> behavior_definition .)
    (               reduce using rule 13 (behavior_statement -> behavior_definition .)
    !               reduce using rule 13 (behavior_statement -> behavior_definition .)
    +               reduce using rule 13 (behavior_statement -> behavior_definition .)
    -               reduce using rule 13 (behavior_statement -> behavior_definition .)
    ~               reduce using rule 13 (behavior_statement -> behavior_definition .)
    ID              reduce using rule 13 (behavior_statement -> behavior_definition .)
    DEC             reduce using rule 13 (behavior_statement -> behavior_definition .)
    INC             reduce using rule 13 (behavior_statement -> behavior_definition .)
    IN              reduce using rule 13 (behavior_statement -> behavior_definition .)
    REPEAT          reduce using rule 13 (behavior_statement -> behavior_definition .)
    STOP            reduce using rule 13 (behavior_statement -> behavior_definition .)
    [               reduce using rule 13 (behavior_statement -> behavior_definition .)
    BEHAVIOR        reduce using rule 13 (behavior_statement -> behavior_definition .)
    $end            reduce using rule 13 (behavior_statement -> behavior_definition .)
    }               reduce using rule 13 (behavior_statement -> behavior_definition .)
    OTHERWISE       reduce using rule 13 (behavior_statement -> behavior_definition .)


state 36

    (21) behavior_definition -> BEHAVIOR . ID ( params ) block
    ID              shift and go to state 97


state 37

    (3) statements -> statements statement .
    LET             reduce using rule 3 (statements -> statements statement .)
    {               reduce using rule 3 (statements -> statements statement .)
    NIL             reduce using rule 3 (statements -> statements statement .)
    FALSE           reduce using rule 3 (statements -> statements statement .)
    TRUE            reduce using rule 3 (statements -> statements statement .)
    STRING          reduce using rule 3 (statements -> statements statement .)
    FLOAT           reduce using rule 3 (statements -> statements statement .)
    INT             reduce using rule 3 (statements -> statements statement .)
    (               reduce using rule 3 (statements -> statements statement .)
    !               reduce using rule 3 (statements -> statements statement .)
    +               reduce using rule 3 (statements -> statements statement .)
    -               reduce using rule 3 (statements -> statements statement .)
    ~               reduce using rule 3 (statements -> statements statement .)
    ID              reduce using rule 3 (statements -> statements statement .)
    DEC             reduce using rule 3 (statements -> statements statement .)
    INC             reduce using rule 3 (statements -> statements statement .)
    IN              reduce using rule 3 (statements -> statements statement .)
    REPEAT          reduce using rule 3 (statements -> statements statement .)
    STOP            reduce using rule 3 (statements -> statements statement .)
    [               reduce using rule 3 (statements -> statements statement .)
    BEHAVIOR        reduce using rule 3 (statements -> statements statement .)
    $end            reduce using rule 3 (statements -> statements statement .)
    }               reduce using rule 3 (statements -> statements statement .)


state 38

    (14) behavior_statement -> empty .
    LET             reduce using rule 14 (behavior_statement -> empty .)
    {               reduce using rule 14 (behavior_statement -> empty .)
    NIL             reduce using rule 14 (behavior_statement -> empty .)
    FALSE           reduce using rule 14 (behavior_statement -> empty .)
    TRUE            reduce using rule 14 (behavior_statement -> empty .)
    STRING          reduce using rule 14 (behavior_statement -> empty .)
    FLOAT           reduce using rule 14 (behavior_statement -> empty .)
    INT             reduce using rule 14 (behavior_statement -> empty .)
    (               reduce using rule 14 (behavior_statement -> empty .)
    !               reduce using rule 14 (behavior_statement -> empty .)
    +               reduce using rule 14 (behavior_statement -> empty .)
    -               reduce using rule 14 (behavior_statement -> empty .)
    ~               reduce using rule 14 (behavior_statement -> empty .)
    ID              reduce using rule 14 (behavior_statement -> empty .)
    DEC             reduce using rule 14 (behavior_statement -> empty .)
    INC             reduce using rule 14 (behavior_statement -> empty .)
    IN              reduce using rule 14 (behavior_statement -> empty .)
    REPEAT          reduce using rule 14 (behavior_statement -> empty .)
    STOP            reduce using rule 14 (behavior_statement -> empty .)
    [               reduce using rule 14 (behavior_statement -> empty .)
    BEHAVIOR        reduce using rule 14 (behavior_statement -> empty .)
    $end            reduce using rule 14 (behavior_statement -> empty .)
    }               reduce using rule 14 (behavior_statement -> empty .)
    OTHERWISE       reduce using rule 14 (behavior_statement -> empty .)


state 39

    (5) statement -> expr SEP .
    LET             reduce using rule 5 (statement -> expr SEP .)
    {               reduce using rule 5 (statement -> expr SEP .)
    NIL             reduce using rule 5 (statement -> expr SEP .)
    FALSE           reduce using rule 5 (statement -> expr SEP .)
    TRUE            reduce using rule 5 (statement -> expr SEP .)
    STRING          reduce using rule 5 (statement -> expr SEP .)
    FLOAT           reduce using rule 5 (statement -> expr SEP .)
    INT             reduce using rule 5 (statement -> expr SEP .)
    (               reduce using rule 5 (statement -> expr SEP .)
    !               reduce using rule 5 (statement -> expr SEP .)
    +               reduce using rule 5 (statement -> expr SEP .)
    -               reduce using rule 5 (statement -> expr SEP .)
    ~               reduce using rule 5 (statement -> expr SEP .)
    ID              reduce using rule 5 (statement -> expr SEP .)
    DEC             reduce using rule 5 (statement -> expr SEP .)
    INC             reduce using rule 5 (statement -> expr SEP .)
    IN              reduce using rule 5 (statement -> expr SEP .)
    REPEAT          reduce using rule 5 (statement -> expr SEP .)
    STOP            reduce using rule 5 (statement -> expr SEP .)
    [               reduce using rule 5 (statement -> expr SEP .)
    BEHAVIOR        reduce using rule 5 (statement -> expr SEP .)
    $end            reduce using rule 5 (statement -> expr SEP .)
    }               reduce using rule 5 (statement -> expr SEP .)
    OTHERWISE       reduce using rule 5 (statement -> expr SEP .)


state 40

    (57) expr -> expr % . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 98
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 41

    (58) expr -> expr / . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 99
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 42

    (59) expr -> expr * . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 100
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 43

    (60) expr -> expr - . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 101
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 44

    (61) expr -> expr + . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 102
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 45

    (66) expr -> expr | . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 103
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 46

    (67) expr -> expr ^ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 104
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 47

    (68) expr -> expr & . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 105
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 48

    (69) expr -> expr SHR . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 106
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 49

    (70) expr -> expr SHL . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 107
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 50

    (71) expr -> expr GREATER . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 108
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 51

    (72) expr -> expr LESS . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 109
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 52

    (73) expr -> expr OR . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 110
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 53

    (74) expr -> expr AND . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 111
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 54

    (75) expr -> expr GREATEREQ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 112
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 55

    (76) expr -> expr LESSEQ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 113
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 56

    (77) expr -> expr NOTEQ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 114
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 57

    (78) expr -> expr EQEQ . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 115
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 58

    (79) expr -> expr ? . expr : expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 116
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 59

    (6) statement -> var_assign SEP .
    LET             reduce using rule 6 (statement -> var_assign SEP .)
    {               reduce using rule 6 (statement -> var_assign SEP .)
    NIL             reduce using rule 6 (statement -> var_assign SEP .)
    FALSE           reduce using rule 6 (statement -> var_assign SEP .)
    TRUE            reduce using rule 6 (statement -> var_assign SEP .)
    STRING          reduce using rule 6 (statement -> var_assign SEP .)
    FLOAT           reduce using rule 6 (statement -> var_assign SEP .)
    INT             reduce using rule 6 (statement -> var_assign SEP .)
    (               reduce using rule 6 (statement -> var_assign SEP .)
    !               reduce using rule 6 (statement -> var_assign SEP .)
    +               reduce using rule 6 (statement -> var_assign SEP .)
    -               reduce using rule 6 (statement -> var_assign SEP .)
    ~               reduce using rule 6 (statement -> var_assign SEP .)
    ID              reduce using rule 6 (statement -> var_assign SEP .)
    DEC             reduce using rule 6 (statement -> var_assign SEP .)
    INC             reduce using rule 6 (statement -> var_assign SEP .)
    IN              reduce using rule 6 (statement -> var_assign SEP .)
    REPEAT          reduce using rule 6 (statement -> var_assign SEP .)
    STOP            reduce using rule 6 (statement -> var_assign SEP .)
    [               reduce using rule 6 (statement -> var_assign SEP .)
    BEHAVIOR        reduce using rule 6 (statement -> var_assign SEP .)
    $end            reduce using rule 6 (statement -> var_assign SEP .)
    }               reduce using rule 6 (statement -> var_assign SEP .)
    OTHERWISE       reduce using rule 6 (statement -> var_assign SEP .)


state 60

    (7) statement -> LET var . : var_type SEP
    (23) var_define -> LET var . ASSIGN expr
    (85) var -> var . [ expr ]
    :               shift and go to state 117
    ASSIGN          shift and go to state 118
    [               shift and go to state 119


state 61

    (22) var_define -> LET getter . ASSIGN expr
    (103) getter -> getter . . ID
    ASSIGN          shift and go to state 120
    .               shift and go to state 76


state 62

    (86) var -> ID .
    (102) getter -> ID .
  ! reduce/reduce conflict for ASSIGN resolved using rule 86 (var -> ID .)
    :               reduce using rule 86 (var -> ID .)
    ASSIGN          reduce using rule 86 (var -> ID .)
    [               reduce using rule 86 (var -> ID .)
    .               reduce using rule 102 (getter -> ID .)


state 63

    (49) expr -> var [ . expr ]
    (85) var -> var [ . expr ]
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 121
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 64

    (27) var_assign -> var SHRASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 122
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 65

    (28) var_assign -> var SHLASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 123
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 66

    (29) var_assign -> var XORASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 124
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 67

    (30) var_assign -> var ORASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 125
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 68

    (31) var_assign -> var ANDASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 126
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 69

    (32) var_assign -> var MODULOASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 127
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 70

    (33) var_assign -> var SLASHASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 128
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 71

    (34) var_assign -> var STARASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 129
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 72

    (35) var_assign -> var MINUSASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 130
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 73

    (36) var_assign -> var PLUSASGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 131
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 74

    (37) var_assign -> var ASSIGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 132
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 75

    (8) statement -> var_define SEP .
    LET             reduce using rule 8 (statement -> var_define SEP .)
    {               reduce using rule 8 (statement -> var_define SEP .)
    NIL             reduce using rule 8 (statement -> var_define SEP .)
    FALSE           reduce using rule 8 (statement -> var_define SEP .)
    TRUE            reduce using rule 8 (statement -> var_define SEP .)
    STRING          reduce using rule 8 (statement -> var_define SEP .)
    FLOAT           reduce using rule 8 (statement -> var_define SEP .)
    INT             reduce using rule 8 (statement -> var_define SEP .)
    (               reduce using rule 8 (statement -> var_define SEP .)
    !               reduce using rule 8 (statement -> var_define SEP .)
    +               reduce using rule 8 (statement -> var_define SEP .)
    -               reduce using rule 8 (statement -> var_define SEP .)
    ~               reduce using rule 8 (statement -> var_define SEP .)
    ID              reduce using rule 8 (statement -> var_define SEP .)
    DEC             reduce using rule 8 (statement -> var_define SEP .)
    INC             reduce using rule 8 (statement -> var_define SEP .)
    IN              reduce using rule 8 (statement -> var_define SEP .)
    REPEAT          reduce using rule 8 (statement -> var_define SEP .)
    STOP            reduce using rule 8 (statement -> var_define SEP .)
    [               reduce using rule 8 (statement -> var_define SEP .)
    BEHAVIOR        reduce using rule 8 (statement -> var_define SEP .)
    $end            reduce using rule 8 (statement -> var_define SEP .)
    }               reduce using rule 8 (statement -> var_define SEP .)
    OTHERWISE       reduce using rule 8 (statement -> var_define SEP .)


state 76

    (103) getter -> getter . . ID
    ID              shift and go to state 133


state 77

    (46) expr -> { member_list . }
    (98) member_list -> member_list . , member
    }               shift and go to state 134
    ,               shift and go to state 135


state 78

    (99) member_list -> member .
    }               reduce using rule 99 (member_list -> member .)
    ,               reduce using rule 99 (member_list -> member .)


state 79

    (100) member_list -> empty .
    }               reduce using rule 100 (member_list -> empty .)
    ,               reduce using rule 100 (member_list -> empty .)


state 80

    (101) member -> STRING . : expr
    :               shift and go to state 136


state 81

    (81) list_val -> [ exprs . ]
    (82) exprs -> exprs . , expr
    ]               shift and go to state 137
    ,               shift and go to state 138


state 82

    (83) exprs -> expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    ]               reduce using rule 83 (exprs -> expr .)
    ,               reduce using rule 83 (exprs -> expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 83

    (84) exprs -> empty .
    ]               reduce using rule 84 (exprs -> empty .)
    ,               reduce using rule 84 (exprs -> empty .)


state 84

    (48) expr -> var .
    (49) expr -> var . [ expr ]
    (85) var -> var . [ expr ]
  ! shift/reduce conflict for [ resolved as shift
    %               reduce using rule 48 (expr -> var .)
    /               reduce using rule 48 (expr -> var .)
    *               reduce using rule 48 (expr -> var .)
    -               reduce using rule 48 (expr -> var .)
    +               reduce using rule 48 (expr -> var .)
    |               reduce using rule 48 (expr -> var .)
    ^               reduce using rule 48 (expr -> var .)
    &               reduce using rule 48 (expr -> var .)
    SHR             reduce using rule 48 (expr -> var .)
    SHL             reduce using rule 48 (expr -> var .)
    GREATER         reduce using rule 48 (expr -> var .)
    LESS            reduce using rule 48 (expr -> var .)
    OR              reduce using rule 48 (expr -> var .)
    AND             reduce using rule 48 (expr -> var .)
    GREATEREQ       reduce using rule 48 (expr -> var .)
    LESSEQ          reduce using rule 48 (expr -> var .)
    NOTEQ           reduce using rule 48 (expr -> var .)
    EQEQ            reduce using rule 48 (expr -> var .)
    ?               reduce using rule 48 (expr -> var .)
    ]               reduce using rule 48 (expr -> var .)
    ,               reduce using rule 48 (expr -> var .)
    )               reduce using rule 48 (expr -> var .)
    SEP             reduce using rule 48 (expr -> var .)
    :               reduce using rule 48 (expr -> var .)
    {               reduce using rule 48 (expr -> var .)
    LET             reduce using rule 48 (expr -> var .)
    NIL             reduce using rule 48 (expr -> var .)
    FALSE           reduce using rule 48 (expr -> var .)
    TRUE            reduce using rule 48 (expr -> var .)
    STRING          reduce using rule 48 (expr -> var .)
    FLOAT           reduce using rule 48 (expr -> var .)
    INT             reduce using rule 48 (expr -> var .)
    (               reduce using rule 48 (expr -> var .)
    !               reduce using rule 48 (expr -> var .)
    ~               reduce using rule 48 (expr -> var .)
    ID              reduce using rule 48 (expr -> var .)
    DEC             reduce using rule 48 (expr -> var .)
    INC             reduce using rule 48 (expr -> var .)
    IN              reduce using rule 48 (expr -> var .)
    REPEAT          reduce using rule 48 (expr -> var .)
    STOP            reduce using rule 48 (expr -> var .)
    BEHAVIOR        reduce using rule 48 (expr -> var .)
    OTHERWISE       reduce using rule 48 (expr -> var .)
    $end            reduce using rule 48 (expr -> var .)
    }               reduce using rule 48 (expr -> var .)
    [               shift and go to state 63


state 85

    (56) expr -> ( expr . )
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    )               shift and go to state 139
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 86

    (64) expr -> - expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 64 (expr -> - expr .)
    %               reduce using rule 64 (expr -> - expr .)
    /               reduce using rule 64 (expr -> - expr .)
    *               reduce using rule 64 (expr -> - expr .)
    -               reduce using rule 64 (expr -> - expr .)
    +               reduce using rule 64 (expr -> - expr .)
    |               reduce using rule 64 (expr -> - expr .)
    ^               reduce using rule 64 (expr -> - expr .)
    &               reduce using rule 64 (expr -> - expr .)
    SHR             reduce using rule 64 (expr -> - expr .)
    SHL             reduce using rule 64 (expr -> - expr .)
    GREATER         reduce using rule 64 (expr -> - expr .)
    LESS            reduce using rule 64 (expr -> - expr .)
    OR              reduce using rule 64 (expr -> - expr .)
    AND             reduce using rule 64 (expr -> - expr .)
    GREATEREQ       reduce using rule 64 (expr -> - expr .)
    LESSEQ          reduce using rule 64 (expr -> - expr .)
    NOTEQ           reduce using rule 64 (expr -> - expr .)
    EQEQ            reduce using rule 64 (expr -> - expr .)
    ?               reduce using rule 64 (expr -> - expr .)
    ]               reduce using rule 64 (expr -> - expr .)
    ,               reduce using rule 64 (expr -> - expr .)
    )               reduce using rule 64 (expr -> - expr .)
    :               reduce using rule 64 (expr -> - expr .)
    {               reduce using rule 64 (expr -> - expr .)
    LET             reduce using rule 64 (expr -> - expr .)
    NIL             reduce using rule 64 (expr -> - expr .)
    FALSE           reduce using rule 64 (expr -> - expr .)
    TRUE            reduce using rule 64 (expr -> - expr .)
    STRING          reduce using rule 64 (expr -> - expr .)
    FLOAT           reduce using rule 64 (expr -> - expr .)
    INT             reduce using rule 64 (expr -> - expr .)
    (               reduce using rule 64 (expr -> - expr .)
    !               reduce using rule 64 (expr -> - expr .)
    ~               reduce using rule 64 (expr -> - expr .)
    ID              reduce using rule 64 (expr -> - expr .)
    DEC             reduce using rule 64 (expr -> - expr .)
    INC             reduce using rule 64 (expr -> - expr .)
    IN              reduce using rule 64 (expr -> - expr .)
    REPEAT          reduce using rule 64 (expr -> - expr .)
    STOP            reduce using rule 64 (expr -> - expr .)
    [               reduce using rule 64 (expr -> - expr .)
    BEHAVIOR        reduce using rule 64 (expr -> - expr .)
    OTHERWISE       reduce using rule 64 (expr -> - expr .)
    $end            reduce using rule 64 (expr -> - expr .)
    }               reduce using rule 64 (expr -> - expr .)


state 87

    (63) expr -> + expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 63 (expr -> + expr .)
    %               reduce using rule 63 (expr -> + expr .)
    /               reduce using rule 63 (expr -> + expr .)
    *               reduce using rule 63 (expr -> + expr .)
    -               reduce using rule 63 (expr -> + expr .)
    +               reduce using rule 63 (expr -> + expr .)
    |               reduce using rule 63 (expr -> + expr .)
    ^               reduce using rule 63 (expr -> + expr .)
    &               reduce using rule 63 (expr -> + expr .)
    SHR             reduce using rule 63 (expr -> + expr .)
    SHL             reduce using rule 63 (expr -> + expr .)
    GREATER         reduce using rule 63 (expr -> + expr .)
    LESS            reduce using rule 63 (expr -> + expr .)
    OR              reduce using rule 63 (expr -> + expr .)
    AND             reduce using rule 63 (expr -> + expr .)
    GREATEREQ       reduce using rule 63 (expr -> + expr .)
    LESSEQ          reduce using rule 63 (expr -> + expr .)
    NOTEQ           reduce using rule 63 (expr -> + expr .)
    EQEQ            reduce using rule 63 (expr -> + expr .)
    ?               reduce using rule 63 (expr -> + expr .)
    ]               reduce using rule 63 (expr -> + expr .)
    ,               reduce using rule 63 (expr -> + expr .)
    )               reduce using rule 63 (expr -> + expr .)
    :               reduce using rule 63 (expr -> + expr .)
    {               reduce using rule 63 (expr -> + expr .)
    LET             reduce using rule 63 (expr -> + expr .)
    NIL             reduce using rule 63 (expr -> + expr .)
    FALSE           reduce using rule 63 (expr -> + expr .)
    TRUE            reduce using rule 63 (expr -> + expr .)
    STRING          reduce using rule 63 (expr -> + expr .)
    FLOAT           reduce using rule 63 (expr -> + expr .)
    INT             reduce using rule 63 (expr -> + expr .)
    (               reduce using rule 63 (expr -> + expr .)
    !               reduce using rule 63 (expr -> + expr .)
    ~               reduce using rule 63 (expr -> + expr .)
    ID              reduce using rule 63 (expr -> + expr .)
    DEC             reduce using rule 63 (expr -> + expr .)
    INC             reduce using rule 63 (expr -> + expr .)
    IN              reduce using rule 63 (expr -> + expr .)
    REPEAT          reduce using rule 63 (expr -> + expr .)
    STOP            reduce using rule 63 (expr -> + expr .)
    [               reduce using rule 63 (expr -> + expr .)
    BEHAVIOR        reduce using rule 63 (expr -> + expr .)
    OTHERWISE       reduce using rule 63 (expr -> + expr .)
    $end            reduce using rule 63 (expr -> + expr .)
    }               reduce using rule 63 (expr -> + expr .)


state 88

    (62) expr -> ! expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 62 (expr -> ! expr .)
    %               reduce using rule 62 (expr -> ! expr .)
    /               reduce using rule 62 (expr -> ! expr .)
    *               reduce using rule 62 (expr -> ! expr .)
    -               reduce using rule 62 (expr -> ! expr .)
    +               reduce using rule 62 (expr -> ! expr .)
    |               reduce using rule 62 (expr -> ! expr .)
    ^               reduce using rule 62 (expr -> ! expr .)
    &               reduce using rule 62 (expr -> ! expr .)
    SHR             reduce using rule 62 (expr -> ! expr .)
    SHL             reduce using rule 62 (expr -> ! expr .)
    GREATER         reduce using rule 62 (expr -> ! expr .)
    LESS            reduce using rule 62 (expr -> ! expr .)
    OR              reduce using rule 62 (expr -> ! expr .)
    AND             reduce using rule 62 (expr -> ! expr .)
    GREATEREQ       reduce using rule 62 (expr -> ! expr .)
    LESSEQ          reduce using rule 62 (expr -> ! expr .)
    NOTEQ           reduce using rule 62 (expr -> ! expr .)
    EQEQ            reduce using rule 62 (expr -> ! expr .)
    ?               reduce using rule 62 (expr -> ! expr .)
    ]               reduce using rule 62 (expr -> ! expr .)
    ,               reduce using rule 62 (expr -> ! expr .)
    )               reduce using rule 62 (expr -> ! expr .)
    :               reduce using rule 62 (expr -> ! expr .)
    {               reduce using rule 62 (expr -> ! expr .)
    LET             reduce using rule 62 (expr -> ! expr .)
    NIL             reduce using rule 62 (expr -> ! expr .)
    FALSE           reduce using rule 62 (expr -> ! expr .)
    TRUE            reduce using rule 62 (expr -> ! expr .)
    STRING          reduce using rule 62 (expr -> ! expr .)
    FLOAT           reduce using rule 62 (expr -> ! expr .)
    INT             reduce using rule 62 (expr -> ! expr .)
    (               reduce using rule 62 (expr -> ! expr .)
    !               reduce using rule 62 (expr -> ! expr .)
    ~               reduce using rule 62 (expr -> ! expr .)
    ID              reduce using rule 62 (expr -> ! expr .)
    DEC             reduce using rule 62 (expr -> ! expr .)
    INC             reduce using rule 62 (expr -> ! expr .)
    IN              reduce using rule 62 (expr -> ! expr .)
    REPEAT          reduce using rule 62 (expr -> ! expr .)
    STOP            reduce using rule 62 (expr -> ! expr .)
    [               reduce using rule 62 (expr -> ! expr .)
    BEHAVIOR        reduce using rule 62 (expr -> ! expr .)
    OTHERWISE       reduce using rule 62 (expr -> ! expr .)
    $end            reduce using rule 62 (expr -> ! expr .)
    }               reduce using rule 62 (expr -> ! expr .)


state 89

    (65) expr -> ~ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 65 (expr -> ~ expr .)
    %               reduce using rule 65 (expr -> ~ expr .)
    /               reduce using rule 65 (expr -> ~ expr .)
    *               reduce using rule 65 (expr -> ~ expr .)
    -               reduce using rule 65 (expr -> ~ expr .)
    +               reduce using rule 65 (expr -> ~ expr .)
    |               reduce using rule 65 (expr -> ~ expr .)
    ^               reduce using rule 65 (expr -> ~ expr .)
    &               reduce using rule 65 (expr -> ~ expr .)
    SHR             reduce using rule 65 (expr -> ~ expr .)
    SHL             reduce using rule 65 (expr -> ~ expr .)
    GREATER         reduce using rule 65 (expr -> ~ expr .)
    LESS            reduce using rule 65 (expr -> ~ expr .)
    OR              reduce using rule 65 (expr -> ~ expr .)
    AND             reduce using rule 65 (expr -> ~ expr .)
    GREATEREQ       reduce using rule 65 (expr -> ~ expr .)
    LESSEQ          reduce using rule 65 (expr -> ~ expr .)
    NOTEQ           reduce using rule 65 (expr -> ~ expr .)
    EQEQ            reduce using rule 65 (expr -> ~ expr .)
    ?               reduce using rule 65 (expr -> ~ expr .)
    ]               reduce using rule 65 (expr -> ~ expr .)
    ,               reduce using rule 65 (expr -> ~ expr .)
    )               reduce using rule 65 (expr -> ~ expr .)
    :               reduce using rule 65 (expr -> ~ expr .)
    {               reduce using rule 65 (expr -> ~ expr .)
    LET             reduce using rule 65 (expr -> ~ expr .)
    NIL             reduce using rule 65 (expr -> ~ expr .)
    FALSE           reduce using rule 65 (expr -> ~ expr .)
    TRUE            reduce using rule 65 (expr -> ~ expr .)
    STRING          reduce using rule 65 (expr -> ~ expr .)
    FLOAT           reduce using rule 65 (expr -> ~ expr .)
    INT             reduce using rule 65 (expr -> ~ expr .)
    (               reduce using rule 65 (expr -> ~ expr .)
    !               reduce using rule 65 (expr -> ~ expr .)
    ~               reduce using rule 65 (expr -> ~ expr .)
    ID              reduce using rule 65 (expr -> ~ expr .)
    DEC             reduce using rule 65 (expr -> ~ expr .)
    INC             reduce using rule 65 (expr -> ~ expr .)
    IN              reduce using rule 65 (expr -> ~ expr .)
    REPEAT          reduce using rule 65 (expr -> ~ expr .)
    STOP            reduce using rule 65 (expr -> ~ expr .)
    [               reduce using rule 65 (expr -> ~ expr .)
    BEHAVIOR        reduce using rule 65 (expr -> ~ expr .)
    OTHERWISE       reduce using rule 65 (expr -> ~ expr .)
    $end            reduce using rule 65 (expr -> ~ expr .)
    }               reduce using rule 65 (expr -> ~ expr .)


state 90

    (80) expr -> ID ( . args )
    (94) args -> . empty
    (95) args -> . arg
    (96) args -> . args , arg
    (87) empty -> .
    (97) arg -> . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    )               reduce using rule 87 (empty -> .)
    ,               reduce using rule 87 (empty -> .)
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    args                           shift and go to state 140
    empty                          shift and go to state 141
    arg                            shift and go to state 142
    expr                           shift and go to state 143
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 91

    (25) var_assign -> DEC var .
    (85) var -> var . [ expr ]
    SEP             reduce using rule 25 (var_assign -> DEC var .)
    [               shift and go to state 119


state 92

    (86) var -> ID .
    [               reduce using rule 86 (var -> ID .)
    SEP             reduce using rule 86 (var -> ID .)


state 93

    (26) var_assign -> INC var .
    (85) var -> var . [ expr ]
    SEP             reduce using rule 26 (var_assign -> INC var .)
    [               shift and go to state 119


state 94

    (38) in_case_statement -> IN CASE . expr block
    (39) in_case_statement -> IN CASE . expr block in_other_case_statement
    (40) in_case_statement -> IN CASE . expr block OTHERWISE block
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 144
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 95

    (44) repeat_when_statement -> REPEAT WHEN . expr block
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 145
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 96

    (24) stop_statement -> STOP expr . SEP
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             shift and go to state 146
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 97

    (21) behavior_definition -> BEHAVIOR ID . ( params ) block
    (               shift and go to state 147


state 98

    (57) expr -> expr % expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 57 (expr -> expr % expr .)
    %               reduce using rule 57 (expr -> expr % expr .)
    /               reduce using rule 57 (expr -> expr % expr .)
    *               reduce using rule 57 (expr -> expr % expr .)
    -               reduce using rule 57 (expr -> expr % expr .)
    +               reduce using rule 57 (expr -> expr % expr .)
    |               reduce using rule 57 (expr -> expr % expr .)
    ^               reduce using rule 57 (expr -> expr % expr .)
    &               reduce using rule 57 (expr -> expr % expr .)
    SHR             reduce using rule 57 (expr -> expr % expr .)
    SHL             reduce using rule 57 (expr -> expr % expr .)
    GREATER         reduce using rule 57 (expr -> expr % expr .)
    LESS            reduce using rule 57 (expr -> expr % expr .)
    OR              reduce using rule 57 (expr -> expr % expr .)
    AND             reduce using rule 57 (expr -> expr % expr .)
    GREATEREQ       reduce using rule 57 (expr -> expr % expr .)
    LESSEQ          reduce using rule 57 (expr -> expr % expr .)
    NOTEQ           reduce using rule 57 (expr -> expr % expr .)
    EQEQ            reduce using rule 57 (expr -> expr % expr .)
    ?               reduce using rule 57 (expr -> expr % expr .)
    ]               reduce using rule 57 (expr -> expr % expr .)
    ,               reduce using rule 57 (expr -> expr % expr .)
    )               reduce using rule 57 (expr -> expr % expr .)
    :               reduce using rule 57 (expr -> expr % expr .)
    {               reduce using rule 57 (expr -> expr % expr .)
    LET             reduce using rule 57 (expr -> expr % expr .)
    NIL             reduce using rule 57 (expr -> expr % expr .)
    FALSE           reduce using rule 57 (expr -> expr % expr .)
    TRUE            reduce using rule 57 (expr -> expr % expr .)
    STRING          reduce using rule 57 (expr -> expr % expr .)
    FLOAT           reduce using rule 57 (expr -> expr % expr .)
    INT             reduce using rule 57 (expr -> expr % expr .)
    (               reduce using rule 57 (expr -> expr % expr .)
    !               reduce using rule 57 (expr -> expr % expr .)
    ~               reduce using rule 57 (expr -> expr % expr .)
    ID              reduce using rule 57 (expr -> expr % expr .)
    DEC             reduce using rule 57 (expr -> expr % expr .)
    INC             reduce using rule 57 (expr -> expr % expr .)
    IN              reduce using rule 57 (expr -> expr % expr .)
    REPEAT          reduce using rule 57 (expr -> expr % expr .)
    STOP            reduce using rule 57 (expr -> expr % expr .)
    [               reduce using rule 57 (expr -> expr % expr .)
    BEHAVIOR        reduce using rule 57 (expr -> expr % expr .)
    OTHERWISE       reduce using rule 57 (expr -> expr % expr .)
    $end            reduce using rule 57 (expr -> expr % expr .)
    }               reduce using rule 57 (expr -> expr % expr .)


state 99

    (58) expr -> expr / expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 58 (expr -> expr / expr .)
    %               reduce using rule 58 (expr -> expr / expr .)
    /               reduce using rule 58 (expr -> expr / expr .)
    *               reduce using rule 58 (expr -> expr / expr .)
    -               reduce using rule 58 (expr -> expr / expr .)
    +               reduce using rule 58 (expr -> expr / expr .)
    |               reduce using rule 58 (expr -> expr / expr .)
    ^               reduce using rule 58 (expr -> expr / expr .)
    &               reduce using rule 58 (expr -> expr / expr .)
    SHR             reduce using rule 58 (expr -> expr / expr .)
    SHL             reduce using rule 58 (expr -> expr / expr .)
    GREATER         reduce using rule 58 (expr -> expr / expr .)
    LESS            reduce using rule 58 (expr -> expr / expr .)
    OR              reduce using rule 58 (expr -> expr / expr .)
    AND             reduce using rule 58 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 58 (expr -> expr / expr .)
    LESSEQ          reduce using rule 58 (expr -> expr / expr .)
    NOTEQ           reduce using rule 58 (expr -> expr / expr .)
    EQEQ            reduce using rule 58 (expr -> expr / expr .)
    ?               reduce using rule 58 (expr -> expr / expr .)
    ]               reduce using rule 58 (expr -> expr / expr .)
    ,               reduce using rule 58 (expr -> expr / expr .)
    )               reduce using rule 58 (expr -> expr / expr .)
    :               reduce using rule 58 (expr -> expr / expr .)
    {               reduce using rule 58 (expr -> expr / expr .)
    LET             reduce using rule 58 (expr -> expr / expr .)
    NIL             reduce using rule 58 (expr -> expr / expr .)
    FALSE           reduce using rule 58 (expr -> expr / expr .)
    TRUE            reduce using rule 58 (expr -> expr / expr .)
    STRING          reduce using rule 58 (expr -> expr / expr .)
    FLOAT           reduce using rule 58 (expr -> expr / expr .)
    INT             reduce using rule 58 (expr -> expr / expr .)
    (               reduce using rule 58 (expr -> expr / expr .)
    !               reduce using rule 58 (expr -> expr / expr .)
    ~               reduce using rule 58 (expr -> expr / expr .)
    ID              reduce using rule 58 (expr -> expr / expr .)
    DEC             reduce using rule 58 (expr -> expr / expr .)
    INC             reduce using rule 58 (expr -> expr / expr .)
    IN              reduce using rule 58 (expr -> expr / expr .)
    REPEAT          reduce using rule 58 (expr -> expr / expr .)
    STOP            reduce using rule 58 (expr -> expr / expr .)
    [               reduce using rule 58 (expr -> expr / expr .)
    BEHAVIOR        reduce using rule 58 (expr -> expr / expr .)
    OTHERWISE       reduce using rule 58 (expr -> expr / expr .)
    $end            reduce using rule 58 (expr -> expr / expr .)
    }               reduce using rule 58 (expr -> expr / expr .)


state 100

    (59) expr -> expr * expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 59 (expr -> expr * expr .)
    %               reduce using rule 59 (expr -> expr * expr .)
    /               reduce using rule 59 (expr -> expr * expr .)
    *               reduce using rule 59 (expr -> expr * expr .)
    -               reduce using rule 59 (expr -> expr * expr .)
    +               reduce using rule 59 (expr -> expr * expr .)
    |               reduce using rule 59 (expr -> expr * expr .)
    ^               reduce using rule 59 (expr -> expr * expr .)
    &               reduce using rule 59 (expr -> expr * expr .)
    SHR             reduce using rule 59 (expr -> expr * expr .)
    SHL             reduce using rule 59 (expr -> expr * expr .)
    GREATER         reduce using rule 59 (expr -> expr * expr .)
    LESS            reduce using rule 59 (expr -> expr * expr .)
    OR              reduce using rule 59 (expr -> expr * expr .)
    AND             reduce using rule 59 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 59 (expr -> expr * expr .)
    LESSEQ          reduce using rule 59 (expr -> expr * expr .)
    NOTEQ           reduce using rule 59 (expr -> expr * expr .)
    EQEQ            reduce using rule 59 (expr -> expr * expr .)
    ?               reduce using rule 59 (expr -> expr * expr .)
    ]               reduce using rule 59 (expr -> expr * expr .)
    ,               reduce using rule 59 (expr -> expr * expr .)
    )               reduce using rule 59 (expr -> expr * expr .)
    :               reduce using rule 59 (expr -> expr * expr .)
    {               reduce using rule 59 (expr -> expr * expr .)
    LET             reduce using rule 59 (expr -> expr * expr .)
    NIL             reduce using rule 59 (expr -> expr * expr .)
    FALSE           reduce using rule 59 (expr -> expr * expr .)
    TRUE            reduce using rule 59 (expr -> expr * expr .)
    STRING          reduce using rule 59 (expr -> expr * expr .)
    FLOAT           reduce using rule 59 (expr -> expr * expr .)
    INT             reduce using rule 59 (expr -> expr * expr .)
    (               reduce using rule 59 (expr -> expr * expr .)
    !               reduce using rule 59 (expr -> expr * expr .)
    ~               reduce using rule 59 (expr -> expr * expr .)
    ID              reduce using rule 59 (expr -> expr * expr .)
    DEC             reduce using rule 59 (expr -> expr * expr .)
    INC             reduce using rule 59 (expr -> expr * expr .)
    IN              reduce using rule 59 (expr -> expr * expr .)
    REPEAT          reduce using rule 59 (expr -> expr * expr .)
    STOP            reduce using rule 59 (expr -> expr * expr .)
    [               reduce using rule 59 (expr -> expr * expr .)
    BEHAVIOR        reduce using rule 59 (expr -> expr * expr .)
    OTHERWISE       reduce using rule 59 (expr -> expr * expr .)
    $end            reduce using rule 59 (expr -> expr * expr .)
    }               reduce using rule 59 (expr -> expr * expr .)


state 101

    (60) expr -> expr - expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 60 (expr -> expr - expr .)
    -               reduce using rule 60 (expr -> expr - expr .)
    +               reduce using rule 60 (expr -> expr - expr .)
    |               reduce using rule 60 (expr -> expr - expr .)
    ^               reduce using rule 60 (expr -> expr - expr .)
    &               reduce using rule 60 (expr -> expr - expr .)
    SHR             reduce using rule 60 (expr -> expr - expr .)
    SHL             reduce using rule 60 (expr -> expr - expr .)
    GREATER         reduce using rule 60 (expr -> expr - expr .)
    LESS            reduce using rule 60 (expr -> expr - expr .)
    OR              reduce using rule 60 (expr -> expr - expr .)
    AND             reduce using rule 60 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 60 (expr -> expr - expr .)
    LESSEQ          reduce using rule 60 (expr -> expr - expr .)
    NOTEQ           reduce using rule 60 (expr -> expr - expr .)
    EQEQ            reduce using rule 60 (expr -> expr - expr .)
    ?               reduce using rule 60 (expr -> expr - expr .)
    ]               reduce using rule 60 (expr -> expr - expr .)
    ,               reduce using rule 60 (expr -> expr - expr .)
    )               reduce using rule 60 (expr -> expr - expr .)
    :               reduce using rule 60 (expr -> expr - expr .)
    {               reduce using rule 60 (expr -> expr - expr .)
    LET             reduce using rule 60 (expr -> expr - expr .)
    NIL             reduce using rule 60 (expr -> expr - expr .)
    FALSE           reduce using rule 60 (expr -> expr - expr .)
    TRUE            reduce using rule 60 (expr -> expr - expr .)
    STRING          reduce using rule 60 (expr -> expr - expr .)
    FLOAT           reduce using rule 60 (expr -> expr - expr .)
    INT             reduce using rule 60 (expr -> expr - expr .)
    (               reduce using rule 60 (expr -> expr - expr .)
    !               reduce using rule 60 (expr -> expr - expr .)
    ~               reduce using rule 60 (expr -> expr - expr .)
    ID              reduce using rule 60 (expr -> expr - expr .)
    DEC             reduce using rule 60 (expr -> expr - expr .)
    INC             reduce using rule 60 (expr -> expr - expr .)
    IN              reduce using rule 60 (expr -> expr - expr .)
    REPEAT          reduce using rule 60 (expr -> expr - expr .)
    STOP            reduce using rule 60 (expr -> expr - expr .)
    [               reduce using rule 60 (expr -> expr - expr .)
    BEHAVIOR        reduce using rule 60 (expr -> expr - expr .)
    OTHERWISE       reduce using rule 60 (expr -> expr - expr .)
    $end            reduce using rule 60 (expr -> expr - expr .)
    }               reduce using rule 60 (expr -> expr - expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42


state 102

    (61) expr -> expr + expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 61 (expr -> expr + expr .)
    -               reduce using rule 61 (expr -> expr + expr .)
    +               reduce using rule 61 (expr -> expr + expr .)
    |               reduce using rule 61 (expr -> expr + expr .)
    ^               reduce using rule 61 (expr -> expr + expr .)
    &               reduce using rule 61 (expr -> expr + expr .)
    SHR             reduce using rule 61 (expr -> expr + expr .)
    SHL             reduce using rule 61 (expr -> expr + expr .)
    GREATER         reduce using rule 61 (expr -> expr + expr .)
    LESS            reduce using rule 61 (expr -> expr + expr .)
    OR              reduce using rule 61 (expr -> expr + expr .)
    AND             reduce using rule 61 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr + expr .)
    LESSEQ          reduce using rule 61 (expr -> expr + expr .)
    NOTEQ           reduce using rule 61 (expr -> expr + expr .)
    EQEQ            reduce using rule 61 (expr -> expr + expr .)
    ?               reduce using rule 61 (expr -> expr + expr .)
    ]               reduce using rule 61 (expr -> expr + expr .)
    ,               reduce using rule 61 (expr -> expr + expr .)
    )               reduce using rule 61 (expr -> expr + expr .)
    :               reduce using rule 61 (expr -> expr + expr .)
    {               reduce using rule 61 (expr -> expr + expr .)
    LET             reduce using rule 61 (expr -> expr + expr .)
    NIL             reduce using rule 61 (expr -> expr + expr .)
    FALSE           reduce using rule 61 (expr -> expr + expr .)
    TRUE            reduce using rule 61 (expr -> expr + expr .)
    STRING          reduce using rule 61 (expr -> expr + expr .)
    FLOAT           reduce using rule 61 (expr -> expr + expr .)
    INT             reduce using rule 61 (expr -> expr + expr .)
    (               reduce using rule 61 (expr -> expr + expr .)
    !               reduce using rule 61 (expr -> expr + expr .)
    ~               reduce using rule 61 (expr -> expr + expr .)
    ID              reduce using rule 61 (expr -> expr + expr .)
    DEC             reduce using rule 61 (expr -> expr + expr .)
    INC             reduce using rule 61 (expr -> expr + expr .)
    IN              reduce using rule 61 (expr -> expr + expr .)
    REPEAT          reduce using rule 61 (expr -> expr + expr .)
    STOP            reduce using rule 61 (expr -> expr + expr .)
    [               reduce using rule 61 (expr -> expr + expr .)
    BEHAVIOR        reduce using rule 61 (expr -> expr + expr .)
    OTHERWISE       reduce using rule 61 (expr -> expr + expr .)
    $end            reduce using rule 61 (expr -> expr + expr .)
    }               reduce using rule 61 (expr -> expr + expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42


state 103

    (66) expr -> expr | expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 66 (expr -> expr | expr .)
    |               reduce using rule 66 (expr -> expr | expr .)
    OR              reduce using rule 66 (expr -> expr | expr .)
    AND             reduce using rule 66 (expr -> expr | expr .)
    ?               reduce using rule 66 (expr -> expr | expr .)
    ]               reduce using rule 66 (expr -> expr | expr .)
    ,               reduce using rule 66 (expr -> expr | expr .)
    )               reduce using rule 66 (expr -> expr | expr .)
    :               reduce using rule 66 (expr -> expr | expr .)
    {               reduce using rule 66 (expr -> expr | expr .)
    LET             reduce using rule 66 (expr -> expr | expr .)
    NIL             reduce using rule 66 (expr -> expr | expr .)
    FALSE           reduce using rule 66 (expr -> expr | expr .)
    TRUE            reduce using rule 66 (expr -> expr | expr .)
    STRING          reduce using rule 66 (expr -> expr | expr .)
    FLOAT           reduce using rule 66 (expr -> expr | expr .)
    INT             reduce using rule 66 (expr -> expr | expr .)
    (               reduce using rule 66 (expr -> expr | expr .)
    !               reduce using rule 66 (expr -> expr | expr .)
    ~               reduce using rule 66 (expr -> expr | expr .)
    ID              reduce using rule 66 (expr -> expr | expr .)
    DEC             reduce using rule 66 (expr -> expr | expr .)
    INC             reduce using rule 66 (expr -> expr | expr .)
    IN              reduce using rule 66 (expr -> expr | expr .)
    REPEAT          reduce using rule 66 (expr -> expr | expr .)
    STOP            reduce using rule 66 (expr -> expr | expr .)
    [               reduce using rule 66 (expr -> expr | expr .)
    BEHAVIOR        reduce using rule 66 (expr -> expr | expr .)
    OTHERWISE       reduce using rule 66 (expr -> expr | expr .)
    $end            reduce using rule 66 (expr -> expr | expr .)
    }               reduce using rule 66 (expr -> expr | expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57


state 104

    (67) expr -> expr ^ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 67 (expr -> expr ^ expr .)
    |               reduce using rule 67 (expr -> expr ^ expr .)
    ^               reduce using rule 67 (expr -> expr ^ expr .)
    OR              reduce using rule 67 (expr -> expr ^ expr .)
    AND             reduce using rule 67 (expr -> expr ^ expr .)
    ?               reduce using rule 67 (expr -> expr ^ expr .)
    ]               reduce using rule 67 (expr -> expr ^ expr .)
    ,               reduce using rule 67 (expr -> expr ^ expr .)
    )               reduce using rule 67 (expr -> expr ^ expr .)
    :               reduce using rule 67 (expr -> expr ^ expr .)
    {               reduce using rule 67 (expr -> expr ^ expr .)
    LET             reduce using rule 67 (expr -> expr ^ expr .)
    NIL             reduce using rule 67 (expr -> expr ^ expr .)
    FALSE           reduce using rule 67 (expr -> expr ^ expr .)
    TRUE            reduce using rule 67 (expr -> expr ^ expr .)
    STRING          reduce using rule 67 (expr -> expr ^ expr .)
    FLOAT           reduce using rule 67 (expr -> expr ^ expr .)
    INT             reduce using rule 67 (expr -> expr ^ expr .)
    (               reduce using rule 67 (expr -> expr ^ expr .)
    !               reduce using rule 67 (expr -> expr ^ expr .)
    ~               reduce using rule 67 (expr -> expr ^ expr .)
    ID              reduce using rule 67 (expr -> expr ^ expr .)
    DEC             reduce using rule 67 (expr -> expr ^ expr .)
    INC             reduce using rule 67 (expr -> expr ^ expr .)
    IN              reduce using rule 67 (expr -> expr ^ expr .)
    REPEAT          reduce using rule 67 (expr -> expr ^ expr .)
    STOP            reduce using rule 67 (expr -> expr ^ expr .)
    [               reduce using rule 67 (expr -> expr ^ expr .)
    BEHAVIOR        reduce using rule 67 (expr -> expr ^ expr .)
    OTHERWISE       reduce using rule 67 (expr -> expr ^ expr .)
    $end            reduce using rule 67 (expr -> expr ^ expr .)
    }               reduce using rule 67 (expr -> expr ^ expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57


state 105

    (68) expr -> expr & expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 68 (expr -> expr & expr .)
    |               reduce using rule 68 (expr -> expr & expr .)
    ^               reduce using rule 68 (expr -> expr & expr .)
    &               reduce using rule 68 (expr -> expr & expr .)
    OR              reduce using rule 68 (expr -> expr & expr .)
    AND             reduce using rule 68 (expr -> expr & expr .)
    ?               reduce using rule 68 (expr -> expr & expr .)
    ]               reduce using rule 68 (expr -> expr & expr .)
    ,               reduce using rule 68 (expr -> expr & expr .)
    )               reduce using rule 68 (expr -> expr & expr .)
    :               reduce using rule 68 (expr -> expr & expr .)
    {               reduce using rule 68 (expr -> expr & expr .)
    LET             reduce using rule 68 (expr -> expr & expr .)
    NIL             reduce using rule 68 (expr -> expr & expr .)
    FALSE           reduce using rule 68 (expr -> expr & expr .)
    TRUE            reduce using rule 68 (expr -> expr & expr .)
    STRING          reduce using rule 68 (expr -> expr & expr .)
    FLOAT           reduce using rule 68 (expr -> expr & expr .)
    INT             reduce using rule 68 (expr -> expr & expr .)
    (               reduce using rule 68 (expr -> expr & expr .)
    !               reduce using rule 68 (expr -> expr & expr .)
    ~               reduce using rule 68 (expr -> expr & expr .)
    ID              reduce using rule 68 (expr -> expr & expr .)
    DEC             reduce using rule 68 (expr -> expr & expr .)
    INC             reduce using rule 68 (expr -> expr & expr .)
    IN              reduce using rule 68 (expr -> expr & expr .)
    REPEAT          reduce using rule 68 (expr -> expr & expr .)
    STOP            reduce using rule 68 (expr -> expr & expr .)
    [               reduce using rule 68 (expr -> expr & expr .)
    BEHAVIOR        reduce using rule 68 (expr -> expr & expr .)
    OTHERWISE       reduce using rule 68 (expr -> expr & expr .)
    $end            reduce using rule 68 (expr -> expr & expr .)
    }               reduce using rule 68 (expr -> expr & expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57


state 106

    (69) expr -> expr SHR expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 69 (expr -> expr SHR expr .)
    |               reduce using rule 69 (expr -> expr SHR expr .)
    ^               reduce using rule 69 (expr -> expr SHR expr .)
    &               reduce using rule 69 (expr -> expr SHR expr .)
    SHR             reduce using rule 69 (expr -> expr SHR expr .)
    SHL             reduce using rule 69 (expr -> expr SHR expr .)
    GREATER         reduce using rule 69 (expr -> expr SHR expr .)
    LESS            reduce using rule 69 (expr -> expr SHR expr .)
    OR              reduce using rule 69 (expr -> expr SHR expr .)
    AND             reduce using rule 69 (expr -> expr SHR expr .)
    GREATEREQ       reduce using rule 69 (expr -> expr SHR expr .)
    LESSEQ          reduce using rule 69 (expr -> expr SHR expr .)
    NOTEQ           reduce using rule 69 (expr -> expr SHR expr .)
    EQEQ            reduce using rule 69 (expr -> expr SHR expr .)
    ?               reduce using rule 69 (expr -> expr SHR expr .)
    ]               reduce using rule 69 (expr -> expr SHR expr .)
    ,               reduce using rule 69 (expr -> expr SHR expr .)
    )               reduce using rule 69 (expr -> expr SHR expr .)
    :               reduce using rule 69 (expr -> expr SHR expr .)
    {               reduce using rule 69 (expr -> expr SHR expr .)
    LET             reduce using rule 69 (expr -> expr SHR expr .)
    NIL             reduce using rule 69 (expr -> expr SHR expr .)
    FALSE           reduce using rule 69 (expr -> expr SHR expr .)
    TRUE            reduce using rule 69 (expr -> expr SHR expr .)
    STRING          reduce using rule 69 (expr -> expr SHR expr .)
    FLOAT           reduce using rule 69 (expr -> expr SHR expr .)
    INT             reduce using rule 69 (expr -> expr SHR expr .)
    (               reduce using rule 69 (expr -> expr SHR expr .)
    !               reduce using rule 69 (expr -> expr SHR expr .)
    ~               reduce using rule 69 (expr -> expr SHR expr .)
    ID              reduce using rule 69 (expr -> expr SHR expr .)
    DEC             reduce using rule 69 (expr -> expr SHR expr .)
    INC             reduce using rule 69 (expr -> expr SHR expr .)
    IN              reduce using rule 69 (expr -> expr SHR expr .)
    REPEAT          reduce using rule 69 (expr -> expr SHR expr .)
    STOP            reduce using rule 69 (expr -> expr SHR expr .)
    [               reduce using rule 69 (expr -> expr SHR expr .)
    BEHAVIOR        reduce using rule 69 (expr -> expr SHR expr .)
    OTHERWISE       reduce using rule 69 (expr -> expr SHR expr .)
    $end            reduce using rule 69 (expr -> expr SHR expr .)
    }               reduce using rule 69 (expr -> expr SHR expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44


state 107

    (70) expr -> expr SHL expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 70 (expr -> expr SHL expr .)
    |               reduce using rule 70 (expr -> expr SHL expr .)
    ^               reduce using rule 70 (expr -> expr SHL expr .)
    &               reduce using rule 70 (expr -> expr SHL expr .)
    SHR             reduce using rule 70 (expr -> expr SHL expr .)
    SHL             reduce using rule 70 (expr -> expr SHL expr .)
    GREATER         reduce using rule 70 (expr -> expr SHL expr .)
    LESS            reduce using rule 70 (expr -> expr SHL expr .)
    OR              reduce using rule 70 (expr -> expr SHL expr .)
    AND             reduce using rule 70 (expr -> expr SHL expr .)
    GREATEREQ       reduce using rule 70 (expr -> expr SHL expr .)
    LESSEQ          reduce using rule 70 (expr -> expr SHL expr .)
    NOTEQ           reduce using rule 70 (expr -> expr SHL expr .)
    EQEQ            reduce using rule 70 (expr -> expr SHL expr .)
    ?               reduce using rule 70 (expr -> expr SHL expr .)
    ]               reduce using rule 70 (expr -> expr SHL expr .)
    ,               reduce using rule 70 (expr -> expr SHL expr .)
    )               reduce using rule 70 (expr -> expr SHL expr .)
    :               reduce using rule 70 (expr -> expr SHL expr .)
    {               reduce using rule 70 (expr -> expr SHL expr .)
    LET             reduce using rule 70 (expr -> expr SHL expr .)
    NIL             reduce using rule 70 (expr -> expr SHL expr .)
    FALSE           reduce using rule 70 (expr -> expr SHL expr .)
    TRUE            reduce using rule 70 (expr -> expr SHL expr .)
    STRING          reduce using rule 70 (expr -> expr SHL expr .)
    FLOAT           reduce using rule 70 (expr -> expr SHL expr .)
    INT             reduce using rule 70 (expr -> expr SHL expr .)
    (               reduce using rule 70 (expr -> expr SHL expr .)
    !               reduce using rule 70 (expr -> expr SHL expr .)
    ~               reduce using rule 70 (expr -> expr SHL expr .)
    ID              reduce using rule 70 (expr -> expr SHL expr .)
    DEC             reduce using rule 70 (expr -> expr SHL expr .)
    INC             reduce using rule 70 (expr -> expr SHL expr .)
    IN              reduce using rule 70 (expr -> expr SHL expr .)
    REPEAT          reduce using rule 70 (expr -> expr SHL expr .)
    STOP            reduce using rule 70 (expr -> expr SHL expr .)
    [               reduce using rule 70 (expr -> expr SHL expr .)
    BEHAVIOR        reduce using rule 70 (expr -> expr SHL expr .)
    OTHERWISE       reduce using rule 70 (expr -> expr SHL expr .)
    $end            reduce using rule 70 (expr -> expr SHL expr .)
    }               reduce using rule 70 (expr -> expr SHL expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44


state 108

    (71) expr -> expr GREATER expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 71 (expr -> expr GREATER expr .)
    |               reduce using rule 71 (expr -> expr GREATER expr .)
    ^               reduce using rule 71 (expr -> expr GREATER expr .)
    &               reduce using rule 71 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 71 (expr -> expr GREATER expr .)
    LESS            reduce using rule 71 (expr -> expr GREATER expr .)
    OR              reduce using rule 71 (expr -> expr GREATER expr .)
    AND             reduce using rule 71 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 71 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 71 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 71 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 71 (expr -> expr GREATER expr .)
    ?               reduce using rule 71 (expr -> expr GREATER expr .)
    ]               reduce using rule 71 (expr -> expr GREATER expr .)
    ,               reduce using rule 71 (expr -> expr GREATER expr .)
    )               reduce using rule 71 (expr -> expr GREATER expr .)
    :               reduce using rule 71 (expr -> expr GREATER expr .)
    {               reduce using rule 71 (expr -> expr GREATER expr .)
    LET             reduce using rule 71 (expr -> expr GREATER expr .)
    NIL             reduce using rule 71 (expr -> expr GREATER expr .)
    FALSE           reduce using rule 71 (expr -> expr GREATER expr .)
    TRUE            reduce using rule 71 (expr -> expr GREATER expr .)
    STRING          reduce using rule 71 (expr -> expr GREATER expr .)
    FLOAT           reduce using rule 71 (expr -> expr GREATER expr .)
    INT             reduce using rule 71 (expr -> expr GREATER expr .)
    (               reduce using rule 71 (expr -> expr GREATER expr .)
    !               reduce using rule 71 (expr -> expr GREATER expr .)
    ~               reduce using rule 71 (expr -> expr GREATER expr .)
    ID              reduce using rule 71 (expr -> expr GREATER expr .)
    DEC             reduce using rule 71 (expr -> expr GREATER expr .)
    INC             reduce using rule 71 (expr -> expr GREATER expr .)
    IN              reduce using rule 71 (expr -> expr GREATER expr .)
    REPEAT          reduce using rule 71 (expr -> expr GREATER expr .)
    STOP            reduce using rule 71 (expr -> expr GREATER expr .)
    [               reduce using rule 71 (expr -> expr GREATER expr .)
    BEHAVIOR        reduce using rule 71 (expr -> expr GREATER expr .)
    OTHERWISE       reduce using rule 71 (expr -> expr GREATER expr .)
    $end            reduce using rule 71 (expr -> expr GREATER expr .)
    }               reduce using rule 71 (expr -> expr GREATER expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49


state 109

    (72) expr -> expr LESS expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 72 (expr -> expr LESS expr .)
    |               reduce using rule 72 (expr -> expr LESS expr .)
    ^               reduce using rule 72 (expr -> expr LESS expr .)
    &               reduce using rule 72 (expr -> expr LESS expr .)
    GREATER         reduce using rule 72 (expr -> expr LESS expr .)
    LESS            reduce using rule 72 (expr -> expr LESS expr .)
    OR              reduce using rule 72 (expr -> expr LESS expr .)
    AND             reduce using rule 72 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 72 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 72 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 72 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 72 (expr -> expr LESS expr .)
    ?               reduce using rule 72 (expr -> expr LESS expr .)
    ]               reduce using rule 72 (expr -> expr LESS expr .)
    ,               reduce using rule 72 (expr -> expr LESS expr .)
    )               reduce using rule 72 (expr -> expr LESS expr .)
    :               reduce using rule 72 (expr -> expr LESS expr .)
    {               reduce using rule 72 (expr -> expr LESS expr .)
    LET             reduce using rule 72 (expr -> expr LESS expr .)
    NIL             reduce using rule 72 (expr -> expr LESS expr .)
    FALSE           reduce using rule 72 (expr -> expr LESS expr .)
    TRUE            reduce using rule 72 (expr -> expr LESS expr .)
    STRING          reduce using rule 72 (expr -> expr LESS expr .)
    FLOAT           reduce using rule 72 (expr -> expr LESS expr .)
    INT             reduce using rule 72 (expr -> expr LESS expr .)
    (               reduce using rule 72 (expr -> expr LESS expr .)
    !               reduce using rule 72 (expr -> expr LESS expr .)
    ~               reduce using rule 72 (expr -> expr LESS expr .)
    ID              reduce using rule 72 (expr -> expr LESS expr .)
    DEC             reduce using rule 72 (expr -> expr LESS expr .)
    INC             reduce using rule 72 (expr -> expr LESS expr .)
    IN              reduce using rule 72 (expr -> expr LESS expr .)
    REPEAT          reduce using rule 72 (expr -> expr LESS expr .)
    STOP            reduce using rule 72 (expr -> expr LESS expr .)
    [               reduce using rule 72 (expr -> expr LESS expr .)
    BEHAVIOR        reduce using rule 72 (expr -> expr LESS expr .)
    OTHERWISE       reduce using rule 72 (expr -> expr LESS expr .)
    $end            reduce using rule 72 (expr -> expr LESS expr .)
    }               reduce using rule 72 (expr -> expr LESS expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49


state 110

    (73) expr -> expr OR expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 73 (expr -> expr OR expr .)
    OR              reduce using rule 73 (expr -> expr OR expr .)
    ?               reduce using rule 73 (expr -> expr OR expr .)
    ]               reduce using rule 73 (expr -> expr OR expr .)
    ,               reduce using rule 73 (expr -> expr OR expr .)
    )               reduce using rule 73 (expr -> expr OR expr .)
    :               reduce using rule 73 (expr -> expr OR expr .)
    {               reduce using rule 73 (expr -> expr OR expr .)
    LET             reduce using rule 73 (expr -> expr OR expr .)
    NIL             reduce using rule 73 (expr -> expr OR expr .)
    FALSE           reduce using rule 73 (expr -> expr OR expr .)
    TRUE            reduce using rule 73 (expr -> expr OR expr .)
    STRING          reduce using rule 73 (expr -> expr OR expr .)
    FLOAT           reduce using rule 73 (expr -> expr OR expr .)
    INT             reduce using rule 73 (expr -> expr OR expr .)
    (               reduce using rule 73 (expr -> expr OR expr .)
    !               reduce using rule 73 (expr -> expr OR expr .)
    ~               reduce using rule 73 (expr -> expr OR expr .)
    ID              reduce using rule 73 (expr -> expr OR expr .)
    DEC             reduce using rule 73 (expr -> expr OR expr .)
    INC             reduce using rule 73 (expr -> expr OR expr .)
    IN              reduce using rule 73 (expr -> expr OR expr .)
    REPEAT          reduce using rule 73 (expr -> expr OR expr .)
    STOP            reduce using rule 73 (expr -> expr OR expr .)
    [               reduce using rule 73 (expr -> expr OR expr .)
    BEHAVIOR        reduce using rule 73 (expr -> expr OR expr .)
    OTHERWISE       reduce using rule 73 (expr -> expr OR expr .)
    $end            reduce using rule 73 (expr -> expr OR expr .)
    }               reduce using rule 73 (expr -> expr OR expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57


state 111

    (74) expr -> expr AND expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 74 (expr -> expr AND expr .)
    OR              reduce using rule 74 (expr -> expr AND expr .)
    AND             reduce using rule 74 (expr -> expr AND expr .)
    ?               reduce using rule 74 (expr -> expr AND expr .)
    ]               reduce using rule 74 (expr -> expr AND expr .)
    ,               reduce using rule 74 (expr -> expr AND expr .)
    )               reduce using rule 74 (expr -> expr AND expr .)
    :               reduce using rule 74 (expr -> expr AND expr .)
    {               reduce using rule 74 (expr -> expr AND expr .)
    LET             reduce using rule 74 (expr -> expr AND expr .)
    NIL             reduce using rule 74 (expr -> expr AND expr .)
    FALSE           reduce using rule 74 (expr -> expr AND expr .)
    TRUE            reduce using rule 74 (expr -> expr AND expr .)
    STRING          reduce using rule 74 (expr -> expr AND expr .)
    FLOAT           reduce using rule 74 (expr -> expr AND expr .)
    INT             reduce using rule 74 (expr -> expr AND expr .)
    (               reduce using rule 74 (expr -> expr AND expr .)
    !               reduce using rule 74 (expr -> expr AND expr .)
    ~               reduce using rule 74 (expr -> expr AND expr .)
    ID              reduce using rule 74 (expr -> expr AND expr .)
    DEC             reduce using rule 74 (expr -> expr AND expr .)
    INC             reduce using rule 74 (expr -> expr AND expr .)
    IN              reduce using rule 74 (expr -> expr AND expr .)
    REPEAT          reduce using rule 74 (expr -> expr AND expr .)
    STOP            reduce using rule 74 (expr -> expr AND expr .)
    [               reduce using rule 74 (expr -> expr AND expr .)
    BEHAVIOR        reduce using rule 74 (expr -> expr AND expr .)
    OTHERWISE       reduce using rule 74 (expr -> expr AND expr .)
    $end            reduce using rule 74 (expr -> expr AND expr .)
    }               reduce using rule 74 (expr -> expr AND expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57


state 112

    (75) expr -> expr GREATEREQ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    |               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ^               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    &               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 75 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 75 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 75 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 75 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 75 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 75 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ?               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ]               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    :               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    LET             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    NIL             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    FALSE           reduce using rule 75 (expr -> expr GREATEREQ expr .)
    TRUE            reduce using rule 75 (expr -> expr GREATEREQ expr .)
    STRING          reduce using rule 75 (expr -> expr GREATEREQ expr .)
    FLOAT           reduce using rule 75 (expr -> expr GREATEREQ expr .)
    INT             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    (               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    !               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ~               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    ID              reduce using rule 75 (expr -> expr GREATEREQ expr .)
    DEC             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    INC             reduce using rule 75 (expr -> expr GREATEREQ expr .)
    IN              reduce using rule 75 (expr -> expr GREATEREQ expr .)
    REPEAT          reduce using rule 75 (expr -> expr GREATEREQ expr .)
    STOP            reduce using rule 75 (expr -> expr GREATEREQ expr .)
    [               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    BEHAVIOR        reduce using rule 75 (expr -> expr GREATEREQ expr .)
    OTHERWISE       reduce using rule 75 (expr -> expr GREATEREQ expr .)
    $end            reduce using rule 75 (expr -> expr GREATEREQ expr .)
    }               reduce using rule 75 (expr -> expr GREATEREQ expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49


state 113

    (76) expr -> expr LESSEQ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 76 (expr -> expr LESSEQ expr .)
    |               reduce using rule 76 (expr -> expr LESSEQ expr .)
    ^               reduce using rule 76 (expr -> expr LESSEQ expr .)
    &               reduce using rule 76 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 76 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 76 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 76 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 76 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 76 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 76 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 76 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 76 (expr -> expr LESSEQ expr .)
    ?               reduce using rule 76 (expr -> expr LESSEQ expr .)
    ]               reduce using rule 76 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 76 (expr -> expr LESSEQ expr .)
    )               reduce using rule 76 (expr -> expr LESSEQ expr .)
    :               reduce using rule 76 (expr -> expr LESSEQ expr .)
    {               reduce using rule 76 (expr -> expr LESSEQ expr .)
    LET             reduce using rule 76 (expr -> expr LESSEQ expr .)
    NIL             reduce using rule 76 (expr -> expr LESSEQ expr .)
    FALSE           reduce using rule 76 (expr -> expr LESSEQ expr .)
    TRUE            reduce using rule 76 (expr -> expr LESSEQ expr .)
    STRING          reduce using rule 76 (expr -> expr LESSEQ expr .)
    FLOAT           reduce using rule 76 (expr -> expr LESSEQ expr .)
    INT             reduce using rule 76 (expr -> expr LESSEQ expr .)
    (               reduce using rule 76 (expr -> expr LESSEQ expr .)
    !               reduce using rule 76 (expr -> expr LESSEQ expr .)
    ~               reduce using rule 76 (expr -> expr LESSEQ expr .)
    ID              reduce using rule 76 (expr -> expr LESSEQ expr .)
    DEC             reduce using rule 76 (expr -> expr LESSEQ expr .)
    INC             reduce using rule 76 (expr -> expr LESSEQ expr .)
    IN              reduce using rule 76 (expr -> expr LESSEQ expr .)
    REPEAT          reduce using rule 76 (expr -> expr LESSEQ expr .)
    STOP            reduce using rule 76 (expr -> expr LESSEQ expr .)
    [               reduce using rule 76 (expr -> expr LESSEQ expr .)
    BEHAVIOR        reduce using rule 76 (expr -> expr LESSEQ expr .)
    OTHERWISE       reduce using rule 76 (expr -> expr LESSEQ expr .)
    $end            reduce using rule 76 (expr -> expr LESSEQ expr .)
    }               reduce using rule 76 (expr -> expr LESSEQ expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49


state 114

    (77) expr -> expr NOTEQ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 77 (expr -> expr NOTEQ expr .)
    |               reduce using rule 77 (expr -> expr NOTEQ expr .)
    ^               reduce using rule 77 (expr -> expr NOTEQ expr .)
    &               reduce using rule 77 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 77 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 77 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 77 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 77 (expr -> expr NOTEQ expr .)
    ?               reduce using rule 77 (expr -> expr NOTEQ expr .)
    ]               reduce using rule 77 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 77 (expr -> expr NOTEQ expr .)
    )               reduce using rule 77 (expr -> expr NOTEQ expr .)
    :               reduce using rule 77 (expr -> expr NOTEQ expr .)
    {               reduce using rule 77 (expr -> expr NOTEQ expr .)
    LET             reduce using rule 77 (expr -> expr NOTEQ expr .)
    NIL             reduce using rule 77 (expr -> expr NOTEQ expr .)
    FALSE           reduce using rule 77 (expr -> expr NOTEQ expr .)
    TRUE            reduce using rule 77 (expr -> expr NOTEQ expr .)
    STRING          reduce using rule 77 (expr -> expr NOTEQ expr .)
    FLOAT           reduce using rule 77 (expr -> expr NOTEQ expr .)
    INT             reduce using rule 77 (expr -> expr NOTEQ expr .)
    (               reduce using rule 77 (expr -> expr NOTEQ expr .)
    !               reduce using rule 77 (expr -> expr NOTEQ expr .)
    ~               reduce using rule 77 (expr -> expr NOTEQ expr .)
    ID              reduce using rule 77 (expr -> expr NOTEQ expr .)
    DEC             reduce using rule 77 (expr -> expr NOTEQ expr .)
    INC             reduce using rule 77 (expr -> expr NOTEQ expr .)
    IN              reduce using rule 77 (expr -> expr NOTEQ expr .)
    REPEAT          reduce using rule 77 (expr -> expr NOTEQ expr .)
    STOP            reduce using rule 77 (expr -> expr NOTEQ expr .)
    [               reduce using rule 77 (expr -> expr NOTEQ expr .)
    BEHAVIOR        reduce using rule 77 (expr -> expr NOTEQ expr .)
    OTHERWISE       reduce using rule 77 (expr -> expr NOTEQ expr .)
    $end            reduce using rule 77 (expr -> expr NOTEQ expr .)
    }               reduce using rule 77 (expr -> expr NOTEQ expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55


state 115

    (78) expr -> expr EQEQ expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 78 (expr -> expr EQEQ expr .)
    |               reduce using rule 78 (expr -> expr EQEQ expr .)
    ^               reduce using rule 78 (expr -> expr EQEQ expr .)
    &               reduce using rule 78 (expr -> expr EQEQ expr .)
    OR              reduce using rule 78 (expr -> expr EQEQ expr .)
    AND             reduce using rule 78 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 78 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 78 (expr -> expr EQEQ expr .)
    ?               reduce using rule 78 (expr -> expr EQEQ expr .)
    ]               reduce using rule 78 (expr -> expr EQEQ expr .)
    ,               reduce using rule 78 (expr -> expr EQEQ expr .)
    )               reduce using rule 78 (expr -> expr EQEQ expr .)
    :               reduce using rule 78 (expr -> expr EQEQ expr .)
    {               reduce using rule 78 (expr -> expr EQEQ expr .)
    LET             reduce using rule 78 (expr -> expr EQEQ expr .)
    NIL             reduce using rule 78 (expr -> expr EQEQ expr .)
    FALSE           reduce using rule 78 (expr -> expr EQEQ expr .)
    TRUE            reduce using rule 78 (expr -> expr EQEQ expr .)
    STRING          reduce using rule 78 (expr -> expr EQEQ expr .)
    FLOAT           reduce using rule 78 (expr -> expr EQEQ expr .)
    INT             reduce using rule 78 (expr -> expr EQEQ expr .)
    (               reduce using rule 78 (expr -> expr EQEQ expr .)
    !               reduce using rule 78 (expr -> expr EQEQ expr .)
    ~               reduce using rule 78 (expr -> expr EQEQ expr .)
    ID              reduce using rule 78 (expr -> expr EQEQ expr .)
    DEC             reduce using rule 78 (expr -> expr EQEQ expr .)
    INC             reduce using rule 78 (expr -> expr EQEQ expr .)
    IN              reduce using rule 78 (expr -> expr EQEQ expr .)
    REPEAT          reduce using rule 78 (expr -> expr EQEQ expr .)
    STOP            reduce using rule 78 (expr -> expr EQEQ expr .)
    [               reduce using rule 78 (expr -> expr EQEQ expr .)
    BEHAVIOR        reduce using rule 78 (expr -> expr EQEQ expr .)
    OTHERWISE       reduce using rule 78 (expr -> expr EQEQ expr .)
    $end            reduce using rule 78 (expr -> expr EQEQ expr .)
    }               reduce using rule 78 (expr -> expr EQEQ expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55


state 116

    (79) expr -> expr ? expr . : expr
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    :               shift and go to state 148
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 117

    (7) statement -> LET var : . var_type SEP
    (15) var_type -> . DICT_TYPE
    (16) var_type -> . LIST_TYPE
    (17) var_type -> . BOOL_TYPE
    (18) var_type -> . STRING_TYPE
    (19) var_type -> . FLOAT_TYPE
    (20) var_type -> . INT_TYPE
    DICT_TYPE       shift and go to state 150
    LIST_TYPE       shift and go to state 151
    BOOL_TYPE       shift and go to state 152
    STRING_TYPE     shift and go to state 153
    FLOAT_TYPE      shift and go to state 154
    INT_TYPE        shift and go to state 155

    var_type                       shift and go to state 149

state 118

    (23) var_define -> LET var ASSIGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 156
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 119

    (85) var -> var [ . expr ]
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    var                            shift and go to state 84
    expr                           shift and go to state 157
    getter                         shift and go to state 14
    list_val                       shift and go to state 18

state 120

    (22) var_define -> LET getter ASSIGN . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    getter                         shift and go to state 14
    expr                           shift and go to state 158
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 121

    (49) expr -> var [ expr . ]
    (85) var -> var [ expr . ]
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    ]               shift and go to state 159
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 122

    (27) var_assign -> var SHRASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 27 (var_assign -> var SHRASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 123

    (28) var_assign -> var SHLASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 28 (var_assign -> var SHLASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 124

    (29) var_assign -> var XORASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 29 (var_assign -> var XORASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 125

    (30) var_assign -> var ORASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 30 (var_assign -> var ORASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 126

    (31) var_assign -> var ANDASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 31 (var_assign -> var ANDASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 127

    (32) var_assign -> var MODULOASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 32 (var_assign -> var MODULOASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 128

    (33) var_assign -> var SLASHASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 33 (var_assign -> var SLASHASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 129

    (34) var_assign -> var STARASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 34 (var_assign -> var STARASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 130

    (35) var_assign -> var MINUSASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 35 (var_assign -> var MINUSASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 131

    (36) var_assign -> var PLUSASGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 36 (var_assign -> var PLUSASGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 132

    (37) var_assign -> var ASSIGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 37 (var_assign -> var ASSIGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 133

    (103) getter -> getter . ID .
    .               reduce using rule 103 (getter -> getter . ID .)
    SEP             reduce using rule 103 (getter -> getter . ID .)
    %               reduce using rule 103 (getter -> getter . ID .)
    /               reduce using rule 103 (getter -> getter . ID .)
    *               reduce using rule 103 (getter -> getter . ID .)
    -               reduce using rule 103 (getter -> getter . ID .)
    +               reduce using rule 103 (getter -> getter . ID .)
    |               reduce using rule 103 (getter -> getter . ID .)
    ^               reduce using rule 103 (getter -> getter . ID .)
    &               reduce using rule 103 (getter -> getter . ID .)
    SHR             reduce using rule 103 (getter -> getter . ID .)
    SHL             reduce using rule 103 (getter -> getter . ID .)
    GREATER         reduce using rule 103 (getter -> getter . ID .)
    LESS            reduce using rule 103 (getter -> getter . ID .)
    OR              reduce using rule 103 (getter -> getter . ID .)
    AND             reduce using rule 103 (getter -> getter . ID .)
    GREATEREQ       reduce using rule 103 (getter -> getter . ID .)
    LESSEQ          reduce using rule 103 (getter -> getter . ID .)
    NOTEQ           reduce using rule 103 (getter -> getter . ID .)
    EQEQ            reduce using rule 103 (getter -> getter . ID .)
    ?               reduce using rule 103 (getter -> getter . ID .)
    ASSIGN          reduce using rule 103 (getter -> getter . ID .)
    ]               reduce using rule 103 (getter -> getter . ID .)
    ,               reduce using rule 103 (getter -> getter . ID .)
    )               reduce using rule 103 (getter -> getter . ID .)
    :               reduce using rule 103 (getter -> getter . ID .)
    {               reduce using rule 103 (getter -> getter . ID .)
    LET             reduce using rule 103 (getter -> getter . ID .)
    NIL             reduce using rule 103 (getter -> getter . ID .)
    FALSE           reduce using rule 103 (getter -> getter . ID .)
    TRUE            reduce using rule 103 (getter -> getter . ID .)
    STRING          reduce using rule 103 (getter -> getter . ID .)
    FLOAT           reduce using rule 103 (getter -> getter . ID .)
    INT             reduce using rule 103 (getter -> getter . ID .)
    (               reduce using rule 103 (getter -> getter . ID .)
    !               reduce using rule 103 (getter -> getter . ID .)
    ~               reduce using rule 103 (getter -> getter . ID .)
    ID              reduce using rule 103 (getter -> getter . ID .)
    DEC             reduce using rule 103 (getter -> getter . ID .)
    INC             reduce using rule 103 (getter -> getter . ID .)
    IN              reduce using rule 103 (getter -> getter . ID .)
    REPEAT          reduce using rule 103 (getter -> getter . ID .)
    STOP            reduce using rule 103 (getter -> getter . ID .)
    [               reduce using rule 103 (getter -> getter . ID .)
    BEHAVIOR        reduce using rule 103 (getter -> getter . ID .)
    OTHERWISE       reduce using rule 103 (getter -> getter . ID .)
    $end            reduce using rule 103 (getter -> getter . ID .)
    }               reduce using rule 103 (getter -> getter . ID .)


state 134

    (46) expr -> { member_list } .
    SEP             reduce using rule 46 (expr -> { member_list } .)
    %               reduce using rule 46 (expr -> { member_list } .)
    /               reduce using rule 46 (expr -> { member_list } .)
    *               reduce using rule 46 (expr -> { member_list } .)
    -               reduce using rule 46 (expr -> { member_list } .)
    +               reduce using rule 46 (expr -> { member_list } .)
    |               reduce using rule 46 (expr -> { member_list } .)
    ^               reduce using rule 46 (expr -> { member_list } .)
    &               reduce using rule 46 (expr -> { member_list } .)
    SHR             reduce using rule 46 (expr -> { member_list } .)
    SHL             reduce using rule 46 (expr -> { member_list } .)
    GREATER         reduce using rule 46 (expr -> { member_list } .)
    LESS            reduce using rule 46 (expr -> { member_list } .)
    OR              reduce using rule 46 (expr -> { member_list } .)
    AND             reduce using rule 46 (expr -> { member_list } .)
    GREATEREQ       reduce using rule 46 (expr -> { member_list } .)
    LESSEQ          reduce using rule 46 (expr -> { member_list } .)
    NOTEQ           reduce using rule 46 (expr -> { member_list } .)
    EQEQ            reduce using rule 46 (expr -> { member_list } .)
    ?               reduce using rule 46 (expr -> { member_list } .)
    ]               reduce using rule 46 (expr -> { member_list } .)
    ,               reduce using rule 46 (expr -> { member_list } .)
    )               reduce using rule 46 (expr -> { member_list } .)
    :               reduce using rule 46 (expr -> { member_list } .)
    {               reduce using rule 46 (expr -> { member_list } .)
    LET             reduce using rule 46 (expr -> { member_list } .)
    NIL             reduce using rule 46 (expr -> { member_list } .)
    FALSE           reduce using rule 46 (expr -> { member_list } .)
    TRUE            reduce using rule 46 (expr -> { member_list } .)
    STRING          reduce using rule 46 (expr -> { member_list } .)
    FLOAT           reduce using rule 46 (expr -> { member_list } .)
    INT             reduce using rule 46 (expr -> { member_list } .)
    (               reduce using rule 46 (expr -> { member_list } .)
    !               reduce using rule 46 (expr -> { member_list } .)
    ~               reduce using rule 46 (expr -> { member_list } .)
    ID              reduce using rule 46 (expr -> { member_list } .)
    DEC             reduce using rule 46 (expr -> { member_list } .)
    INC             reduce using rule 46 (expr -> { member_list } .)
    IN              reduce using rule 46 (expr -> { member_list } .)
    REPEAT          reduce using rule 46 (expr -> { member_list } .)
    STOP            reduce using rule 46 (expr -> { member_list } .)
    [               reduce using rule 46 (expr -> { member_list } .)
    BEHAVIOR        reduce using rule 46 (expr -> { member_list } .)
    OTHERWISE       reduce using rule 46 (expr -> { member_list } .)
    $end            reduce using rule 46 (expr -> { member_list } .)
    }               reduce using rule 46 (expr -> { member_list } .)


state 135

    (98) member_list -> member_list , . member
    (101) member -> . STRING : expr
    STRING          shift and go to state 80

    member                         shift and go to state 160

state 136

    (101) member -> STRING : . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 161
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 137

    (81) list_val -> [ exprs ] .
    SEP             reduce using rule 81 (list_val -> [ exprs ] .)
    %               reduce using rule 81 (list_val -> [ exprs ] .)
    /               reduce using rule 81 (list_val -> [ exprs ] .)
    *               reduce using rule 81 (list_val -> [ exprs ] .)
    -               reduce using rule 81 (list_val -> [ exprs ] .)
    +               reduce using rule 81 (list_val -> [ exprs ] .)
    |               reduce using rule 81 (list_val -> [ exprs ] .)
    ^               reduce using rule 81 (list_val -> [ exprs ] .)
    &               reduce using rule 81 (list_val -> [ exprs ] .)
    SHR             reduce using rule 81 (list_val -> [ exprs ] .)
    SHL             reduce using rule 81 (list_val -> [ exprs ] .)
    GREATER         reduce using rule 81 (list_val -> [ exprs ] .)
    LESS            reduce using rule 81 (list_val -> [ exprs ] .)
    OR              reduce using rule 81 (list_val -> [ exprs ] .)
    AND             reduce using rule 81 (list_val -> [ exprs ] .)
    GREATEREQ       reduce using rule 81 (list_val -> [ exprs ] .)
    LESSEQ          reduce using rule 81 (list_val -> [ exprs ] .)
    NOTEQ           reduce using rule 81 (list_val -> [ exprs ] .)
    EQEQ            reduce using rule 81 (list_val -> [ exprs ] .)
    ?               reduce using rule 81 (list_val -> [ exprs ] .)
    ]               reduce using rule 81 (list_val -> [ exprs ] .)
    ,               reduce using rule 81 (list_val -> [ exprs ] .)
    )               reduce using rule 81 (list_val -> [ exprs ] .)
    :               reduce using rule 81 (list_val -> [ exprs ] .)
    {               reduce using rule 81 (list_val -> [ exprs ] .)
    LET             reduce using rule 81 (list_val -> [ exprs ] .)
    NIL             reduce using rule 81 (list_val -> [ exprs ] .)
    FALSE           reduce using rule 81 (list_val -> [ exprs ] .)
    TRUE            reduce using rule 81 (list_val -> [ exprs ] .)
    STRING          reduce using rule 81 (list_val -> [ exprs ] .)
    FLOAT           reduce using rule 81 (list_val -> [ exprs ] .)
    INT             reduce using rule 81 (list_val -> [ exprs ] .)
    (               reduce using rule 81 (list_val -> [ exprs ] .)
    !               reduce using rule 81 (list_val -> [ exprs ] .)
    ~               reduce using rule 81 (list_val -> [ exprs ] .)
    ID              reduce using rule 81 (list_val -> [ exprs ] .)
    DEC             reduce using rule 81 (list_val -> [ exprs ] .)
    INC             reduce using rule 81 (list_val -> [ exprs ] .)
    IN              reduce using rule 81 (list_val -> [ exprs ] .)
    REPEAT          reduce using rule 81 (list_val -> [ exprs ] .)
    STOP            reduce using rule 81 (list_val -> [ exprs ] .)
    [               reduce using rule 81 (list_val -> [ exprs ] .)
    BEHAVIOR        reduce using rule 81 (list_val -> [ exprs ] .)
    OTHERWISE       reduce using rule 81 (list_val -> [ exprs ] .)
    $end            reduce using rule 81 (list_val -> [ exprs ] .)
    }               reduce using rule 81 (list_val -> [ exprs ] .)


state 138

    (82) exprs -> exprs , . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 162
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 139

    (56) expr -> ( expr ) .
    SEP             reduce using rule 56 (expr -> ( expr ) .)
    %               reduce using rule 56 (expr -> ( expr ) .)
    /               reduce using rule 56 (expr -> ( expr ) .)
    *               reduce using rule 56 (expr -> ( expr ) .)
    -               reduce using rule 56 (expr -> ( expr ) .)
    +               reduce using rule 56 (expr -> ( expr ) .)
    |               reduce using rule 56 (expr -> ( expr ) .)
    ^               reduce using rule 56 (expr -> ( expr ) .)
    &               reduce using rule 56 (expr -> ( expr ) .)
    SHR             reduce using rule 56 (expr -> ( expr ) .)
    SHL             reduce using rule 56 (expr -> ( expr ) .)
    GREATER         reduce using rule 56 (expr -> ( expr ) .)
    LESS            reduce using rule 56 (expr -> ( expr ) .)
    OR              reduce using rule 56 (expr -> ( expr ) .)
    AND             reduce using rule 56 (expr -> ( expr ) .)
    GREATEREQ       reduce using rule 56 (expr -> ( expr ) .)
    LESSEQ          reduce using rule 56 (expr -> ( expr ) .)
    NOTEQ           reduce using rule 56 (expr -> ( expr ) .)
    EQEQ            reduce using rule 56 (expr -> ( expr ) .)
    ?               reduce using rule 56 (expr -> ( expr ) .)
    ]               reduce using rule 56 (expr -> ( expr ) .)
    ,               reduce using rule 56 (expr -> ( expr ) .)
    )               reduce using rule 56 (expr -> ( expr ) .)
    :               reduce using rule 56 (expr -> ( expr ) .)
    {               reduce using rule 56 (expr -> ( expr ) .)
    LET             reduce using rule 56 (expr -> ( expr ) .)
    NIL             reduce using rule 56 (expr -> ( expr ) .)
    FALSE           reduce using rule 56 (expr -> ( expr ) .)
    TRUE            reduce using rule 56 (expr -> ( expr ) .)
    STRING          reduce using rule 56 (expr -> ( expr ) .)
    FLOAT           reduce using rule 56 (expr -> ( expr ) .)
    INT             reduce using rule 56 (expr -> ( expr ) .)
    (               reduce using rule 56 (expr -> ( expr ) .)
    !               reduce using rule 56 (expr -> ( expr ) .)
    ~               reduce using rule 56 (expr -> ( expr ) .)
    ID              reduce using rule 56 (expr -> ( expr ) .)
    DEC             reduce using rule 56 (expr -> ( expr ) .)
    INC             reduce using rule 56 (expr -> ( expr ) .)
    IN              reduce using rule 56 (expr -> ( expr ) .)
    REPEAT          reduce using rule 56 (expr -> ( expr ) .)
    STOP            reduce using rule 56 (expr -> ( expr ) .)
    [               reduce using rule 56 (expr -> ( expr ) .)
    BEHAVIOR        reduce using rule 56 (expr -> ( expr ) .)
    OTHERWISE       reduce using rule 56 (expr -> ( expr ) .)
    $end            reduce using rule 56 (expr -> ( expr ) .)
    }               reduce using rule 56 (expr -> ( expr ) .)


state 140

    (80) expr -> ID ( args . )
    (96) args -> args . , arg
    )               shift and go to state 163
    ,               shift and go to state 164


state 141

    (94) args -> empty .
    )               reduce using rule 94 (args -> empty .)
    ,               reduce using rule 94 (args -> empty .)


state 142

    (95) args -> arg .
    )               reduce using rule 95 (args -> arg .)
    ,               reduce using rule 95 (args -> arg .)


state 143

    (97) arg -> expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    )               reduce using rule 97 (arg -> expr .)
    ,               reduce using rule 97 (arg -> expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 144

    (38) in_case_statement -> IN CASE expr . block
    (39) in_case_statement -> IN CASE expr . block in_other_case_statement
    (40) in_case_statement -> IN CASE expr . block OTHERWISE block
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 166
    +               shift and go to state 167
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    expr                           shift and go to state 5
    block                          shift and go to state 165
    statement                      shift and go to state 168
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 145

    (44) repeat_when_statement -> REPEAT WHEN expr . block
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 166
    +               shift and go to state 167
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    expr                           shift and go to state 5
    block                          shift and go to state 170
    statement                      shift and go to state 168
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 146

    (24) stop_statement -> STOP expr SEP .
    LET             reduce using rule 24 (stop_statement -> STOP expr SEP .)
    {               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    NIL             reduce using rule 24 (stop_statement -> STOP expr SEP .)
    FALSE           reduce using rule 24 (stop_statement -> STOP expr SEP .)
    TRUE            reduce using rule 24 (stop_statement -> STOP expr SEP .)
    STRING          reduce using rule 24 (stop_statement -> STOP expr SEP .)
    FLOAT           reduce using rule 24 (stop_statement -> STOP expr SEP .)
    INT             reduce using rule 24 (stop_statement -> STOP expr SEP .)
    (               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    !               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    +               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    -               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    ~               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    ID              reduce using rule 24 (stop_statement -> STOP expr SEP .)
    DEC             reduce using rule 24 (stop_statement -> STOP expr SEP .)
    INC             reduce using rule 24 (stop_statement -> STOP expr SEP .)
    IN              reduce using rule 24 (stop_statement -> STOP expr SEP .)
    REPEAT          reduce using rule 24 (stop_statement -> STOP expr SEP .)
    STOP            reduce using rule 24 (stop_statement -> STOP expr SEP .)
    [               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    BEHAVIOR        reduce using rule 24 (stop_statement -> STOP expr SEP .)
    $end            reduce using rule 24 (stop_statement -> STOP expr SEP .)
    }               reduce using rule 24 (stop_statement -> STOP expr SEP .)
    OTHERWISE       reduce using rule 24 (stop_statement -> STOP expr SEP .)


state 147

    (21) behavior_definition -> BEHAVIOR ID ( . params ) block
    (90) params -> . empty
    (91) params -> . param
    (92) params -> . params , param
    (87) empty -> .
    (93) param -> . ID : var_type
    )               reduce using rule 87 (empty -> .)
    ,               reduce using rule 87 (empty -> .)
    ID              shift and go to state 171

    params                         shift and go to state 172
    empty                          shift and go to state 173
    param                          shift and go to state 174

state 148

    (79) expr -> expr ? expr : . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 175
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 149

    (7) statement -> LET var : var_type . SEP
    SEP             shift and go to state 176


state 150

    (15) var_type -> DICT_TYPE .
    SEP             reduce using rule 15 (var_type -> DICT_TYPE .)
    )               reduce using rule 15 (var_type -> DICT_TYPE .)
    ,               reduce using rule 15 (var_type -> DICT_TYPE .)


state 151

    (16) var_type -> LIST_TYPE .
    SEP             reduce using rule 16 (var_type -> LIST_TYPE .)
    )               reduce using rule 16 (var_type -> LIST_TYPE .)
    ,               reduce using rule 16 (var_type -> LIST_TYPE .)


state 152

    (17) var_type -> BOOL_TYPE .
    SEP             reduce using rule 17 (var_type -> BOOL_TYPE .)
    )               reduce using rule 17 (var_type -> BOOL_TYPE .)
    ,               reduce using rule 17 (var_type -> BOOL_TYPE .)


state 153

    (18) var_type -> STRING_TYPE .
    SEP             reduce using rule 18 (var_type -> STRING_TYPE .)
    )               reduce using rule 18 (var_type -> STRING_TYPE .)
    ,               reduce using rule 18 (var_type -> STRING_TYPE .)


state 154

    (19) var_type -> FLOAT_TYPE .
    SEP             reduce using rule 19 (var_type -> FLOAT_TYPE .)
    )               reduce using rule 19 (var_type -> FLOAT_TYPE .)
    ,               reduce using rule 19 (var_type -> FLOAT_TYPE .)


state 155

    (20) var_type -> INT_TYPE .
    SEP             reduce using rule 20 (var_type -> INT_TYPE .)
    )               reduce using rule 20 (var_type -> INT_TYPE .)
    ,               reduce using rule 20 (var_type -> INT_TYPE .)


state 156

    (23) var_define -> LET var ASSIGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 23 (var_define -> LET var ASSIGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 157

    (85) var -> var [ expr . ]
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    ]               shift and go to state 177
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 158

    (22) var_define -> LET getter ASSIGN expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    SEP             reduce using rule 22 (var_define -> LET getter ASSIGN expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 159

    (49) expr -> var [ expr ] .
    (85) var -> var [ expr ] .
  ! reduce/reduce conflict for [ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for SEP resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for % resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for / resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for * resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for - resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for + resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for | resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ^ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for & resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for SHR resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for SHL resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for GREATER resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for LESS resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for OR resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for AND resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for EQEQ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ? resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ] resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for , resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ) resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for : resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for { resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for LET resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for NIL resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for FALSE resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for TRUE resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for STRING resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for FLOAT resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for INT resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ( resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ! resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ~ resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for ID resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for DEC resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for INC resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for IN resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for REPEAT resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for STOP resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for BEHAVIOR resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for OTHERWISE resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for $end resolved using rule 49 (expr -> var [ expr ] .)
  ! reduce/reduce conflict for } resolved using rule 49 (expr -> var [ expr ] .)
    SEP             reduce using rule 49 (expr -> var [ expr ] .)
    %               reduce using rule 49 (expr -> var [ expr ] .)
    /               reduce using rule 49 (expr -> var [ expr ] .)
    *               reduce using rule 49 (expr -> var [ expr ] .)
    -               reduce using rule 49 (expr -> var [ expr ] .)
    +               reduce using rule 49 (expr -> var [ expr ] .)
    |               reduce using rule 49 (expr -> var [ expr ] .)
    ^               reduce using rule 49 (expr -> var [ expr ] .)
    &               reduce using rule 49 (expr -> var [ expr ] .)
    SHR             reduce using rule 49 (expr -> var [ expr ] .)
    SHL             reduce using rule 49 (expr -> var [ expr ] .)
    GREATER         reduce using rule 49 (expr -> var [ expr ] .)
    LESS            reduce using rule 49 (expr -> var [ expr ] .)
    OR              reduce using rule 49 (expr -> var [ expr ] .)
    AND             reduce using rule 49 (expr -> var [ expr ] .)
    GREATEREQ       reduce using rule 49 (expr -> var [ expr ] .)
    LESSEQ          reduce using rule 49 (expr -> var [ expr ] .)
    NOTEQ           reduce using rule 49 (expr -> var [ expr ] .)
    EQEQ            reduce using rule 49 (expr -> var [ expr ] .)
    ?               reduce using rule 49 (expr -> var [ expr ] .)
    ]               reduce using rule 49 (expr -> var [ expr ] .)
    ,               reduce using rule 49 (expr -> var [ expr ] .)
    )               reduce using rule 49 (expr -> var [ expr ] .)
    :               reduce using rule 49 (expr -> var [ expr ] .)
    {               reduce using rule 49 (expr -> var [ expr ] .)
    LET             reduce using rule 49 (expr -> var [ expr ] .)
    NIL             reduce using rule 49 (expr -> var [ expr ] .)
    FALSE           reduce using rule 49 (expr -> var [ expr ] .)
    TRUE            reduce using rule 49 (expr -> var [ expr ] .)
    STRING          reduce using rule 49 (expr -> var [ expr ] .)
    FLOAT           reduce using rule 49 (expr -> var [ expr ] .)
    INT             reduce using rule 49 (expr -> var [ expr ] .)
    (               reduce using rule 49 (expr -> var [ expr ] .)
    !               reduce using rule 49 (expr -> var [ expr ] .)
    ~               reduce using rule 49 (expr -> var [ expr ] .)
    ID              reduce using rule 49 (expr -> var [ expr ] .)
    DEC             reduce using rule 49 (expr -> var [ expr ] .)
    INC             reduce using rule 49 (expr -> var [ expr ] .)
    IN              reduce using rule 49 (expr -> var [ expr ] .)
    REPEAT          reduce using rule 49 (expr -> var [ expr ] .)
    STOP            reduce using rule 49 (expr -> var [ expr ] .)
    [               reduce using rule 49 (expr -> var [ expr ] .)
    BEHAVIOR        reduce using rule 49 (expr -> var [ expr ] .)
    OTHERWISE       reduce using rule 49 (expr -> var [ expr ] .)
    $end            reduce using rule 49 (expr -> var [ expr ] .)
    }               reduce using rule 49 (expr -> var [ expr ] .)
    SHRASGN         reduce using rule 85 (var -> var [ expr ] .)
    SHLASGN         reduce using rule 85 (var -> var [ expr ] .)
    XORASGN         reduce using rule 85 (var -> var [ expr ] .)
    ORASGN          reduce using rule 85 (var -> var [ expr ] .)
    ANDASGN         reduce using rule 85 (var -> var [ expr ] .)
    MODULOASGN      reduce using rule 85 (var -> var [ expr ] .)
    SLASHASGN       reduce using rule 85 (var -> var [ expr ] .)
    STARASGN        reduce using rule 85 (var -> var [ expr ] .)
    MINUSASGN       reduce using rule 85 (var -> var [ expr ] .)
    PLUSASGN        reduce using rule 85 (var -> var [ expr ] .)
    ASSIGN          reduce using rule 85 (var -> var [ expr ] .)


state 160

    (98) member_list -> member_list , member .
    }               reduce using rule 98 (member_list -> member_list , member .)
    ,               reduce using rule 98 (member_list -> member_list , member .)


state 161

    (101) member -> STRING : expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    }               reduce using rule 101 (member -> STRING : expr .)
    ,               reduce using rule 101 (member -> STRING : expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 162

    (82) exprs -> exprs , expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    ]               reduce using rule 82 (exprs -> exprs , expr .)
    ,               reduce using rule 82 (exprs -> exprs , expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 163

    (80) expr -> ID ( args ) .
    SEP             reduce using rule 80 (expr -> ID ( args ) .)
    %               reduce using rule 80 (expr -> ID ( args ) .)
    /               reduce using rule 80 (expr -> ID ( args ) .)
    *               reduce using rule 80 (expr -> ID ( args ) .)
    -               reduce using rule 80 (expr -> ID ( args ) .)
    +               reduce using rule 80 (expr -> ID ( args ) .)
    |               reduce using rule 80 (expr -> ID ( args ) .)
    ^               reduce using rule 80 (expr -> ID ( args ) .)
    &               reduce using rule 80 (expr -> ID ( args ) .)
    SHR             reduce using rule 80 (expr -> ID ( args ) .)
    SHL             reduce using rule 80 (expr -> ID ( args ) .)
    GREATER         reduce using rule 80 (expr -> ID ( args ) .)
    LESS            reduce using rule 80 (expr -> ID ( args ) .)
    OR              reduce using rule 80 (expr -> ID ( args ) .)
    AND             reduce using rule 80 (expr -> ID ( args ) .)
    GREATEREQ       reduce using rule 80 (expr -> ID ( args ) .)
    LESSEQ          reduce using rule 80 (expr -> ID ( args ) .)
    NOTEQ           reduce using rule 80 (expr -> ID ( args ) .)
    EQEQ            reduce using rule 80 (expr -> ID ( args ) .)
    ?               reduce using rule 80 (expr -> ID ( args ) .)
    ]               reduce using rule 80 (expr -> ID ( args ) .)
    ,               reduce using rule 80 (expr -> ID ( args ) .)
    )               reduce using rule 80 (expr -> ID ( args ) .)
    :               reduce using rule 80 (expr -> ID ( args ) .)
    {               reduce using rule 80 (expr -> ID ( args ) .)
    LET             reduce using rule 80 (expr -> ID ( args ) .)
    NIL             reduce using rule 80 (expr -> ID ( args ) .)
    FALSE           reduce using rule 80 (expr -> ID ( args ) .)
    TRUE            reduce using rule 80 (expr -> ID ( args ) .)
    STRING          reduce using rule 80 (expr -> ID ( args ) .)
    FLOAT           reduce using rule 80 (expr -> ID ( args ) .)
    INT             reduce using rule 80 (expr -> ID ( args ) .)
    (               reduce using rule 80 (expr -> ID ( args ) .)
    !               reduce using rule 80 (expr -> ID ( args ) .)
    ~               reduce using rule 80 (expr -> ID ( args ) .)
    ID              reduce using rule 80 (expr -> ID ( args ) .)
    DEC             reduce using rule 80 (expr -> ID ( args ) .)
    INC             reduce using rule 80 (expr -> ID ( args ) .)
    IN              reduce using rule 80 (expr -> ID ( args ) .)
    REPEAT          reduce using rule 80 (expr -> ID ( args ) .)
    STOP            reduce using rule 80 (expr -> ID ( args ) .)
    [               reduce using rule 80 (expr -> ID ( args ) .)
    BEHAVIOR        reduce using rule 80 (expr -> ID ( args ) .)
    OTHERWISE       reduce using rule 80 (expr -> ID ( args ) .)
    $end            reduce using rule 80 (expr -> ID ( args ) .)
    }               reduce using rule 80 (expr -> ID ( args ) .)


state 164

    (96) args -> args , . arg
    (97) arg -> . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    arg                            shift and go to state 178
    expr                           shift and go to state 143
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 165

    (38) in_case_statement -> IN CASE expr block .
    (39) in_case_statement -> IN CASE expr block . in_other_case_statement
    (40) in_case_statement -> IN CASE expr block . OTHERWISE block
    (41) in_other_case_statement -> . IN OTHER CASE expr block
    (42) in_other_case_statement -> . IN OTHER CASE expr block OTHERWISE block
    (43) in_other_case_statement -> . IN OTHER CASE expr block in_other_case_statement
  ! shift/reduce conflict for OTHERWISE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    LET             reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    {               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    NIL             reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    FALSE           reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    TRUE            reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    STRING          reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    FLOAT           reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    INT             reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    (               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    !               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    +               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    -               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    ~               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    ID              reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    DEC             reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    INC             reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    REPEAT          reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    STOP            reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    [               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    BEHAVIOR        reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    $end            reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    }               reduce using rule 38 (in_case_statement -> IN CASE expr block .)
    OTHERWISE       shift and go to state 181
    IN              shift and go to state 179

    in_other_case_statement        shift and go to state 180

state 166

    (60) expr -> expr - . expr
    (64) expr -> - . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 182
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 167

    (61) expr -> expr + . expr
    (63) expr -> + . expr
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 183
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 168

    (88) block -> statement .
    OTHERWISE       reduce using rule 88 (block -> statement .)
    IN              reduce using rule 88 (block -> statement .)
    LET             reduce using rule 88 (block -> statement .)
    {               reduce using rule 88 (block -> statement .)
    NIL             reduce using rule 88 (block -> statement .)
    FALSE           reduce using rule 88 (block -> statement .)
    TRUE            reduce using rule 88 (block -> statement .)
    STRING          reduce using rule 88 (block -> statement .)
    FLOAT           reduce using rule 88 (block -> statement .)
    INT             reduce using rule 88 (block -> statement .)
    (               reduce using rule 88 (block -> statement .)
    !               reduce using rule 88 (block -> statement .)
    +               reduce using rule 88 (block -> statement .)
    -               reduce using rule 88 (block -> statement .)
    ~               reduce using rule 88 (block -> statement .)
    ID              reduce using rule 88 (block -> statement .)
    DEC             reduce using rule 88 (block -> statement .)
    INC             reduce using rule 88 (block -> statement .)
    REPEAT          reduce using rule 88 (block -> statement .)
    STOP            reduce using rule 88 (block -> statement .)
    [               reduce using rule 88 (block -> statement .)
    BEHAVIOR        reduce using rule 88 (block -> statement .)
    $end            reduce using rule 88 (block -> statement .)
    }               reduce using rule 88 (block -> statement .)


state 169

    (89) block -> { . program }
    (46) expr -> { . member_list }
    (1) program -> . empty
    (2) program -> . statements
    (98) member_list -> . member_list , member
    (99) member_list -> . member
    (100) member_list -> . empty
    (87) empty -> .
    (3) statements -> . statements statement
    (4) statements -> . statement
    (101) member -> . STRING : expr
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    }               reduce using rule 87 (empty -> .)
    ,               reduce using rule 87 (empty -> .)
    STRING          shift and go to state 186
    LET             shift and go to state 7
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36

    program                        shift and go to state 184
    member_list                    shift and go to state 77
    empty                          shift and go to state 185
    statements                     shift and go to state 3
    member                         shift and go to state 78
    statement                      shift and go to state 4
    expr                           shift and go to state 5
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35

state 170

    (44) repeat_when_statement -> REPEAT WHEN expr block .
    LET             reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    {               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    NIL             reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    FALSE           reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    TRUE            reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    STRING          reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    FLOAT           reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    INT             reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    (               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    !               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    +               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    -               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    ~               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    ID              reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    DEC             reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    INC             reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    IN              reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    REPEAT          reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    STOP            reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    [               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    BEHAVIOR        reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    $end            reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    }               reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)
    OTHERWISE       reduce using rule 44 (repeat_when_statement -> REPEAT WHEN expr block .)


state 171

    (93) param -> ID . : var_type
    :               shift and go to state 187


state 172

    (21) behavior_definition -> BEHAVIOR ID ( params . ) block
    (92) params -> params . , param
    )               shift and go to state 188
    ,               shift and go to state 189


state 173

    (90) params -> empty .
    )               reduce using rule 90 (params -> empty .)
    ,               reduce using rule 90 (params -> empty .)


state 174

    (91) params -> param .
    )               reduce using rule 91 (params -> param .)
    ,               reduce using rule 91 (params -> param .)


state 175

    (79) expr -> expr ? expr : expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for ^ resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for SHR resolved as shift
  ! shift/reduce conflict for SHL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for ? resolved as shift
    SEP             reduce using rule 79 (expr -> expr ? expr : expr .)
    ]               reduce using rule 79 (expr -> expr ? expr : expr .)
    ,               reduce using rule 79 (expr -> expr ? expr : expr .)
    )               reduce using rule 79 (expr -> expr ? expr : expr .)
    :               reduce using rule 79 (expr -> expr ? expr : expr .)
    {               reduce using rule 79 (expr -> expr ? expr : expr .)
    LET             reduce using rule 79 (expr -> expr ? expr : expr .)
    NIL             reduce using rule 79 (expr -> expr ? expr : expr .)
    FALSE           reduce using rule 79 (expr -> expr ? expr : expr .)
    TRUE            reduce using rule 79 (expr -> expr ? expr : expr .)
    STRING          reduce using rule 79 (expr -> expr ? expr : expr .)
    FLOAT           reduce using rule 79 (expr -> expr ? expr : expr .)
    INT             reduce using rule 79 (expr -> expr ? expr : expr .)
    (               reduce using rule 79 (expr -> expr ? expr : expr .)
    !               reduce using rule 79 (expr -> expr ? expr : expr .)
    ~               reduce using rule 79 (expr -> expr ? expr : expr .)
    ID              reduce using rule 79 (expr -> expr ? expr : expr .)
    DEC             reduce using rule 79 (expr -> expr ? expr : expr .)
    INC             reduce using rule 79 (expr -> expr ? expr : expr .)
    IN              reduce using rule 79 (expr -> expr ? expr : expr .)
    REPEAT          reduce using rule 79 (expr -> expr ? expr : expr .)
    STOP            reduce using rule 79 (expr -> expr ? expr : expr .)
    [               reduce using rule 79 (expr -> expr ? expr : expr .)
    BEHAVIOR        reduce using rule 79 (expr -> expr ? expr : expr .)
    OTHERWISE       reduce using rule 79 (expr -> expr ? expr : expr .)
    $end            reduce using rule 79 (expr -> expr ? expr : expr .)
    }               reduce using rule 79 (expr -> expr ? expr : expr .)
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 43
    +               shift and go to state 44
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58


state 176

    (7) statement -> LET var : var_type SEP .
    LET             reduce using rule 7 (statement -> LET var : var_type SEP .)
    {               reduce using rule 7 (statement -> LET var : var_type SEP .)
    NIL             reduce using rule 7 (statement -> LET var : var_type SEP .)
    FALSE           reduce using rule 7 (statement -> LET var : var_type SEP .)
    TRUE            reduce using rule 7 (statement -> LET var : var_type SEP .)
    STRING          reduce using rule 7 (statement -> LET var : var_type SEP .)
    FLOAT           reduce using rule 7 (statement -> LET var : var_type SEP .)
    INT             reduce using rule 7 (statement -> LET var : var_type SEP .)
    (               reduce using rule 7 (statement -> LET var : var_type SEP .)
    !               reduce using rule 7 (statement -> LET var : var_type SEP .)
    +               reduce using rule 7 (statement -> LET var : var_type SEP .)
    -               reduce using rule 7 (statement -> LET var : var_type SEP .)
    ~               reduce using rule 7 (statement -> LET var : var_type SEP .)
    ID              reduce using rule 7 (statement -> LET var : var_type SEP .)
    DEC             reduce using rule 7 (statement -> LET var : var_type SEP .)
    INC             reduce using rule 7 (statement -> LET var : var_type SEP .)
    IN              reduce using rule 7 (statement -> LET var : var_type SEP .)
    REPEAT          reduce using rule 7 (statement -> LET var : var_type SEP .)
    STOP            reduce using rule 7 (statement -> LET var : var_type SEP .)
    [               reduce using rule 7 (statement -> LET var : var_type SEP .)
    BEHAVIOR        reduce using rule 7 (statement -> LET var : var_type SEP .)
    $end            reduce using rule 7 (statement -> LET var : var_type SEP .)
    }               reduce using rule 7 (statement -> LET var : var_type SEP .)
    OTHERWISE       reduce using rule 7 (statement -> LET var : var_type SEP .)


state 177

    (85) var -> var [ expr ] .
    :               reduce using rule 85 (var -> var [ expr ] .)
    ASSIGN          reduce using rule 85 (var -> var [ expr ] .)
    [               reduce using rule 85 (var -> var [ expr ] .)
    SEP             reduce using rule 85 (var -> var [ expr ] .)


state 178

    (96) args -> args , arg .
    )               reduce using rule 96 (args -> args , arg .)
    ,               reduce using rule 96 (args -> args , arg .)


state 179

    (41) in_other_case_statement -> IN . OTHER CASE expr block
    (42) in_other_case_statement -> IN . OTHER CASE expr block OTHERWISE block
    (43) in_other_case_statement -> IN . OTHER CASE expr block in_other_case_statement
    OTHER           shift and go to state 190


state 180

    (39) in_case_statement -> IN CASE expr block in_other_case_statement .
    LET             reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    {               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    NIL             reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    FALSE           reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    TRUE            reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    STRING          reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    FLOAT           reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    INT             reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    (               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    !               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    +               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    -               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    ~               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    ID              reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    DEC             reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    INC             reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    IN              reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    REPEAT          reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    STOP            reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    [               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    BEHAVIOR        reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    $end            reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    }               reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)
    OTHERWISE       reduce using rule 39 (in_case_statement -> IN CASE expr block in_other_case_statement .)


state 181

    (40) in_case_statement -> IN CASE expr block OTHERWISE . block
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    expr                           shift and go to state 5
    block                          shift and go to state 191
    statement                      shift and go to state 168
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 182

    (60) expr -> expr - expr .
    (64) expr -> - expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
  ! reduce/reduce conflict for % resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for / resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for * resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for - resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for + resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for | resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for ^ resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for & resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for SHR resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for SHL resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for GREATER resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for LESS resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for OR resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for AND resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for EQEQ resolved using rule 64 (expr -> - expr .)
  ! reduce/reduce conflict for ? resolved using rule 64 (expr -> - expr .)
    {               reduce using rule 60 (expr -> expr - expr .)
    LET             reduce using rule 60 (expr -> expr - expr .)
    NIL             reduce using rule 60 (expr -> expr - expr .)
    FALSE           reduce using rule 60 (expr -> expr - expr .)
    TRUE            reduce using rule 60 (expr -> expr - expr .)
    STRING          reduce using rule 60 (expr -> expr - expr .)
    FLOAT           reduce using rule 60 (expr -> expr - expr .)
    INT             reduce using rule 60 (expr -> expr - expr .)
    (               reduce using rule 60 (expr -> expr - expr .)
    !               reduce using rule 60 (expr -> expr - expr .)
    ~               reduce using rule 60 (expr -> expr - expr .)
    ID              reduce using rule 60 (expr -> expr - expr .)
    DEC             reduce using rule 60 (expr -> expr - expr .)
    INC             reduce using rule 60 (expr -> expr - expr .)
    IN              reduce using rule 60 (expr -> expr - expr .)
    REPEAT          reduce using rule 60 (expr -> expr - expr .)
    STOP            reduce using rule 60 (expr -> expr - expr .)
    [               reduce using rule 60 (expr -> expr - expr .)
    BEHAVIOR        reduce using rule 60 (expr -> expr - expr .)
    OTHERWISE       reduce using rule 60 (expr -> expr - expr .)
    $end            reduce using rule 60 (expr -> expr - expr .)
    }               reduce using rule 60 (expr -> expr - expr .)
    SEP             reduce using rule 64 (expr -> - expr .)
    %               reduce using rule 64 (expr -> - expr .)
    /               reduce using rule 64 (expr -> - expr .)
    *               reduce using rule 64 (expr -> - expr .)
    -               reduce using rule 64 (expr -> - expr .)
    +               reduce using rule 64 (expr -> - expr .)
    |               reduce using rule 64 (expr -> - expr .)
    ^               reduce using rule 64 (expr -> - expr .)
    &               reduce using rule 64 (expr -> - expr .)
    SHR             reduce using rule 64 (expr -> - expr .)
    SHL             reduce using rule 64 (expr -> - expr .)
    GREATER         reduce using rule 64 (expr -> - expr .)
    LESS            reduce using rule 64 (expr -> - expr .)
    OR              reduce using rule 64 (expr -> - expr .)
    AND             reduce using rule 64 (expr -> - expr .)
    GREATEREQ       reduce using rule 64 (expr -> - expr .)
    LESSEQ          reduce using rule 64 (expr -> - expr .)
    NOTEQ           reduce using rule 64 (expr -> - expr .)
    EQEQ            reduce using rule 64 (expr -> - expr .)
    ?               reduce using rule 64 (expr -> - expr .)


state 183

    (61) expr -> expr + expr .
    (63) expr -> + expr .
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
  ! reduce/reduce conflict for % resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for / resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for * resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for - resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for + resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for | resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for ^ resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for & resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for SHR resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for SHL resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for GREATER resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for LESS resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for OR resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for AND resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for GREATEREQ resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for LESSEQ resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for NOTEQ resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for EQEQ resolved using rule 63 (expr -> + expr .)
  ! reduce/reduce conflict for ? resolved using rule 63 (expr -> + expr .)
    {               reduce using rule 61 (expr -> expr + expr .)
    LET             reduce using rule 61 (expr -> expr + expr .)
    NIL             reduce using rule 61 (expr -> expr + expr .)
    FALSE           reduce using rule 61 (expr -> expr + expr .)
    TRUE            reduce using rule 61 (expr -> expr + expr .)
    STRING          reduce using rule 61 (expr -> expr + expr .)
    FLOAT           reduce using rule 61 (expr -> expr + expr .)
    INT             reduce using rule 61 (expr -> expr + expr .)
    (               reduce using rule 61 (expr -> expr + expr .)
    !               reduce using rule 61 (expr -> expr + expr .)
    ~               reduce using rule 61 (expr -> expr + expr .)
    ID              reduce using rule 61 (expr -> expr + expr .)
    DEC             reduce using rule 61 (expr -> expr + expr .)
    INC             reduce using rule 61 (expr -> expr + expr .)
    IN              reduce using rule 61 (expr -> expr + expr .)
    REPEAT          reduce using rule 61 (expr -> expr + expr .)
    STOP            reduce using rule 61 (expr -> expr + expr .)
    [               reduce using rule 61 (expr -> expr + expr .)
    BEHAVIOR        reduce using rule 61 (expr -> expr + expr .)
    OTHERWISE       reduce using rule 61 (expr -> expr + expr .)
    $end            reduce using rule 61 (expr -> expr + expr .)
    }               reduce using rule 61 (expr -> expr + expr .)
    SEP             reduce using rule 63 (expr -> + expr .)
    %               reduce using rule 63 (expr -> + expr .)
    /               reduce using rule 63 (expr -> + expr .)
    *               reduce using rule 63 (expr -> + expr .)
    -               reduce using rule 63 (expr -> + expr .)
    +               reduce using rule 63 (expr -> + expr .)
    |               reduce using rule 63 (expr -> + expr .)
    ^               reduce using rule 63 (expr -> + expr .)
    &               reduce using rule 63 (expr -> + expr .)
    SHR             reduce using rule 63 (expr -> + expr .)
    SHL             reduce using rule 63 (expr -> + expr .)
    GREATER         reduce using rule 63 (expr -> + expr .)
    LESS            reduce using rule 63 (expr -> + expr .)
    OR              reduce using rule 63 (expr -> + expr .)
    AND             reduce using rule 63 (expr -> + expr .)
    GREATEREQ       reduce using rule 63 (expr -> + expr .)
    LESSEQ          reduce using rule 63 (expr -> + expr .)
    NOTEQ           reduce using rule 63 (expr -> + expr .)
    EQEQ            reduce using rule 63 (expr -> + expr .)
    ?               reduce using rule 63 (expr -> + expr .)


state 184

    (89) block -> { program . }
    }               shift and go to state 192


state 185

    (1) program -> empty .
    (100) member_list -> empty .
    (14) behavior_statement -> empty .
  ! reduce/reduce conflict for } resolved using rule 1 (program -> empty .)
  ! reduce/reduce conflict for } resolved using rule 1 (program -> empty .)
    }               reduce using rule 1 (program -> empty .)
    ,               reduce using rule 100 (member_list -> empty .)
    LET             reduce using rule 14 (behavior_statement -> empty .)
    {               reduce using rule 14 (behavior_statement -> empty .)
    NIL             reduce using rule 14 (behavior_statement -> empty .)
    FALSE           reduce using rule 14 (behavior_statement -> empty .)
    TRUE            reduce using rule 14 (behavior_statement -> empty .)
    STRING          reduce using rule 14 (behavior_statement -> empty .)
    FLOAT           reduce using rule 14 (behavior_statement -> empty .)
    INT             reduce using rule 14 (behavior_statement -> empty .)
    (               reduce using rule 14 (behavior_statement -> empty .)
    !               reduce using rule 14 (behavior_statement -> empty .)
    +               reduce using rule 14 (behavior_statement -> empty .)
    -               reduce using rule 14 (behavior_statement -> empty .)
    ~               reduce using rule 14 (behavior_statement -> empty .)
    ID              reduce using rule 14 (behavior_statement -> empty .)
    DEC             reduce using rule 14 (behavior_statement -> empty .)
    INC             reduce using rule 14 (behavior_statement -> empty .)
    IN              reduce using rule 14 (behavior_statement -> empty .)
    REPEAT          reduce using rule 14 (behavior_statement -> empty .)
    STOP            reduce using rule 14 (behavior_statement -> empty .)
    [               reduce using rule 14 (behavior_statement -> empty .)
    BEHAVIOR        reduce using rule 14 (behavior_statement -> empty .)


state 186

    (101) member -> STRING . : expr
    (53) expr -> STRING .
    :               shift and go to state 136
    SEP             reduce using rule 53 (expr -> STRING .)
    %               reduce using rule 53 (expr -> STRING .)
    /               reduce using rule 53 (expr -> STRING .)
    *               reduce using rule 53 (expr -> STRING .)
    -               reduce using rule 53 (expr -> STRING .)
    +               reduce using rule 53 (expr -> STRING .)
    |               reduce using rule 53 (expr -> STRING .)
    ^               reduce using rule 53 (expr -> STRING .)
    &               reduce using rule 53 (expr -> STRING .)
    SHR             reduce using rule 53 (expr -> STRING .)
    SHL             reduce using rule 53 (expr -> STRING .)
    GREATER         reduce using rule 53 (expr -> STRING .)
    LESS            reduce using rule 53 (expr -> STRING .)
    OR              reduce using rule 53 (expr -> STRING .)
    AND             reduce using rule 53 (expr -> STRING .)
    GREATEREQ       reduce using rule 53 (expr -> STRING .)
    LESSEQ          reduce using rule 53 (expr -> STRING .)
    NOTEQ           reduce using rule 53 (expr -> STRING .)
    EQEQ            reduce using rule 53 (expr -> STRING .)
    ?               reduce using rule 53 (expr -> STRING .)


state 187

    (93) param -> ID : . var_type
    (15) var_type -> . DICT_TYPE
    (16) var_type -> . LIST_TYPE
    (17) var_type -> . BOOL_TYPE
    (18) var_type -> . STRING_TYPE
    (19) var_type -> . FLOAT_TYPE
    (20) var_type -> . INT_TYPE
    DICT_TYPE       shift and go to state 150
    LIST_TYPE       shift and go to state 151
    BOOL_TYPE       shift and go to state 152
    STRING_TYPE     shift and go to state 153
    FLOAT_TYPE      shift and go to state 154
    INT_TYPE        shift and go to state 155

    var_type                       shift and go to state 193

state 188

    (21) behavior_definition -> BEHAVIOR ID ( params ) . block
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    block                          shift and go to state 194
    statement                      shift and go to state 168
    expr                           shift and go to state 5
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 189

    (92) params -> params , . param
    (93) param -> . ID : var_type
    ID              shift and go to state 171

    param                          shift and go to state 195

state 190

    (41) in_other_case_statement -> IN OTHER . CASE expr block
    (42) in_other_case_statement -> IN OTHER . CASE expr block OTHERWISE block
    (43) in_other_case_statement -> IN OTHER . CASE expr block in_other_case_statement
    CASE            shift and go to state 196


state 191

    (40) in_case_statement -> IN CASE expr block OTHERWISE block .
    LET             reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    {               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    NIL             reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    FALSE           reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    TRUE            reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    STRING          reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    FLOAT           reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    INT             reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    (               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    !               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    +               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    -               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    ~               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    ID              reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    DEC             reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    INC             reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    IN              reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    REPEAT          reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    STOP            reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    [               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    BEHAVIOR        reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    $end            reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    }               reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)
    OTHERWISE       reduce using rule 40 (in_case_statement -> IN CASE expr block OTHERWISE block .)


state 192

    (89) block -> { program } .
    OTHERWISE       reduce using rule 89 (block -> { program } .)
    IN              reduce using rule 89 (block -> { program } .)
    LET             reduce using rule 89 (block -> { program } .)
    {               reduce using rule 89 (block -> { program } .)
    NIL             reduce using rule 89 (block -> { program } .)
    FALSE           reduce using rule 89 (block -> { program } .)
    TRUE            reduce using rule 89 (block -> { program } .)
    STRING          reduce using rule 89 (block -> { program } .)
    FLOAT           reduce using rule 89 (block -> { program } .)
    INT             reduce using rule 89 (block -> { program } .)
    (               reduce using rule 89 (block -> { program } .)
    !               reduce using rule 89 (block -> { program } .)
    +               reduce using rule 89 (block -> { program } .)
    -               reduce using rule 89 (block -> { program } .)
    ~               reduce using rule 89 (block -> { program } .)
    ID              reduce using rule 89 (block -> { program } .)
    DEC             reduce using rule 89 (block -> { program } .)
    INC             reduce using rule 89 (block -> { program } .)
    REPEAT          reduce using rule 89 (block -> { program } .)
    STOP            reduce using rule 89 (block -> { program } .)
    [               reduce using rule 89 (block -> { program } .)
    BEHAVIOR        reduce using rule 89 (block -> { program } .)
    $end            reduce using rule 89 (block -> { program } .)
    }               reduce using rule 89 (block -> { program } .)


state 193

    (93) param -> ID : var_type .
    )               reduce using rule 93 (param -> ID : var_type .)
    ,               reduce using rule 93 (param -> ID : var_type .)


state 194

    (21) behavior_definition -> BEHAVIOR ID ( params ) block .
    LET             reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    {               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    NIL             reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    FALSE           reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    TRUE            reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    STRING          reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    FLOAT           reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    INT             reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    (               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    !               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    +               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    -               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    ~               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    ID              reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    DEC             reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    INC             reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    IN              reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    REPEAT          reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    STOP            reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    [               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    BEHAVIOR        reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    $end            reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    }               reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)
    OTHERWISE       reduce using rule 21 (behavior_definition -> BEHAVIOR ID ( params ) block .)


state 195

    (92) params -> params , param .
    )               reduce using rule 92 (params -> params , param .)
    ,               reduce using rule 92 (params -> params , param .)


state 196

    (41) in_other_case_statement -> IN OTHER CASE . expr block
    (42) in_other_case_statement -> IN OTHER CASE . expr block OTHERWISE block
    (43) in_other_case_statement -> IN OTHER CASE . expr block in_other_case_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    {               shift and go to state 15
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    [               shift and go to state 17

    expr                           shift and go to state 197
    getter                         shift and go to state 14
    var                            shift and go to state 84
    list_val                       shift and go to state 18

state 197

    (41) in_other_case_statement -> IN OTHER CASE expr . block
    (42) in_other_case_statement -> IN OTHER CASE expr . block OTHERWISE block
    (43) in_other_case_statement -> IN OTHER CASE expr . block in_other_case_statement
    (57) expr -> expr . % expr
    (58) expr -> expr . / expr
    (59) expr -> expr . * expr
    (60) expr -> expr . - expr
    (61) expr -> expr . + expr
    (66) expr -> expr . | expr
    (67) expr -> expr . ^ expr
    (68) expr -> expr . & expr
    (69) expr -> expr . SHR expr
    (70) expr -> expr . SHL expr
    (71) expr -> expr . GREATER expr
    (72) expr -> expr . LESS expr
    (73) expr -> expr . OR expr
    (74) expr -> expr . AND expr
    (75) expr -> expr . GREATEREQ expr
    (76) expr -> expr . LESSEQ expr
    (77) expr -> expr . NOTEQ expr
    (78) expr -> expr . EQEQ expr
    (79) expr -> expr . ? expr : expr
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    %               shift and go to state 40
    /               shift and go to state 41
    *               shift and go to state 42
    -               shift and go to state 166
    +               shift and go to state 167
    |               shift and go to state 45
    ^               shift and go to state 46
    &               shift and go to state 47
    SHR             shift and go to state 48
    SHL             shift and go to state 49
    GREATER         shift and go to state 50
    LESS            shift and go to state 51
    OR              shift and go to state 52
    AND             shift and go to state 53
    GREATEREQ       shift and go to state 54
    LESSEQ          shift and go to state 55
    NOTEQ           shift and go to state 56
    EQEQ            shift and go to state 57
    ?               shift and go to state 58
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    expr                           shift and go to state 5
    block                          shift and go to state 198
    statement                      shift and go to state 168
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 198

    (41) in_other_case_statement -> IN OTHER CASE expr block .
    (42) in_other_case_statement -> IN OTHER CASE expr block . OTHERWISE block
    (43) in_other_case_statement -> IN OTHER CASE expr block . in_other_case_statement
    (41) in_other_case_statement -> . IN OTHER CASE expr block
    (42) in_other_case_statement -> . IN OTHER CASE expr block OTHERWISE block
    (43) in_other_case_statement -> . IN OTHER CASE expr block in_other_case_statement
  ! shift/reduce conflict for OTHERWISE resolved as shift
  ! shift/reduce conflict for IN resolved as shift
    LET             reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    {               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    NIL             reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    FALSE           reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    TRUE            reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    STRING          reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    FLOAT           reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    INT             reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    (               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    !               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    +               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    -               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    ~               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    ID              reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    DEC             reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    INC             reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    REPEAT          reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    STOP            reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    [               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    BEHAVIOR        reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    $end            reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    }               reduce using rule 41 (in_other_case_statement -> IN OTHER CASE expr block .)
    OTHERWISE       shift and go to state 199
    IN              shift and go to state 179

    in_other_case_statement        shift and go to state 200

state 199

    (42) in_other_case_statement -> IN OTHER CASE expr block OTHERWISE . block
    (88) block -> . statement
    (89) block -> . { program }
    (5) statement -> . expr SEP
    (6) statement -> . var_assign SEP
    (7) statement -> . LET var : var_type SEP
    (8) statement -> . var_define SEP
    (9) statement -> . in_case_statement
    (10) statement -> . repeat_when_statement
    (11) statement -> . stop_statement
    (12) statement -> . behavior_statement
    (45) expr -> . getter
    (46) expr -> . { member_list }
    (47) expr -> . NIL
    (48) expr -> . var
    (49) expr -> . var [ expr ]
    (50) expr -> . list_val
    (51) expr -> . FALSE
    (52) expr -> . TRUE
    (53) expr -> . STRING
    (54) expr -> . FLOAT
    (55) expr -> . INT
    (56) expr -> . ( expr )
    (57) expr -> . expr % expr
    (58) expr -> . expr / expr
    (59) expr -> . expr * expr
    (60) expr -> . expr - expr
    (61) expr -> . expr + expr
    (62) expr -> . ! expr
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ~ expr
    (66) expr -> . expr | expr
    (67) expr -> . expr ^ expr
    (68) expr -> . expr & expr
    (69) expr -> . expr SHR expr
    (70) expr -> . expr SHL expr
    (71) expr -> . expr GREATER expr
    (72) expr -> . expr LESS expr
    (73) expr -> . expr OR expr
    (74) expr -> . expr AND expr
    (75) expr -> . expr GREATEREQ expr
    (76) expr -> . expr LESSEQ expr
    (77) expr -> . expr NOTEQ expr
    (78) expr -> . expr EQEQ expr
    (79) expr -> . expr ? expr : expr
    (80) expr -> . ID ( args )
    (25) var_assign -> . DEC var
    (26) var_assign -> . INC var
    (27) var_assign -> . var SHRASGN expr
    (28) var_assign -> . var SHLASGN expr
    (29) var_assign -> . var XORASGN expr
    (30) var_assign -> . var ORASGN expr
    (31) var_assign -> . var ANDASGN expr
    (32) var_assign -> . var MODULOASGN expr
    (33) var_assign -> . var SLASHASGN expr
    (34) var_assign -> . var STARASGN expr
    (35) var_assign -> . var MINUSASGN expr
    (36) var_assign -> . var PLUSASGN expr
    (37) var_assign -> . var ASSIGN expr
    (22) var_define -> . LET getter ASSIGN expr
    (23) var_define -> . LET var ASSIGN expr
    (38) in_case_statement -> . IN CASE expr block
    (39) in_case_statement -> . IN CASE expr block in_other_case_statement
    (40) in_case_statement -> . IN CASE expr block OTHERWISE block
    (44) repeat_when_statement -> . REPEAT WHEN expr block
    (24) stop_statement -> . STOP expr SEP
    (13) behavior_statement -> . behavior_definition
    (14) behavior_statement -> . empty
    (102) getter -> . ID
    (103) getter -> . getter . ID
    (85) var -> . var [ expr ]
    (86) var -> . ID
    (81) list_val -> . [ exprs ]
    (21) behavior_definition -> . BEHAVIOR ID ( params ) block
    (87) empty -> .
  ! shift/reduce conflict for IN resolved as shift
  ! shift/reduce conflict for LET resolved as shift
  ! shift/reduce conflict for { resolved as shift
  ! shift/reduce conflict for NIL resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for ! resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ~ resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for DEC resolved as shift
  ! shift/reduce conflict for INC resolved as shift
  ! shift/reduce conflict for REPEAT resolved as shift
  ! shift/reduce conflict for STOP resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for BEHAVIOR resolved as shift
    {               shift and go to state 169
    LET             shift and go to state 7
    NIL             shift and go to state 16
    FALSE           shift and go to state 19
    TRUE            shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INT             shift and go to state 23
    (               shift and go to state 24
    !               shift and go to state 27
    +               shift and go to state 26
    -               shift and go to state 25
    ~               shift and go to state 28
    ID              shift and go to state 29
    DEC             shift and go to state 30
    INC             shift and go to state 31
    IN              shift and go to state 32
    REPEAT          shift and go to state 33
    STOP            shift and go to state 34
    [               shift and go to state 17
    BEHAVIOR        shift and go to state 36
    OTHERWISE       reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    }               reduce using rule 87 (empty -> .)

    expr                           shift and go to state 5
    block                          shift and go to state 201
    statement                      shift and go to state 168
    var_assign                     shift and go to state 6
    var                            shift and go to state 8
    var_define                     shift and go to state 9
    in_case_statement              shift and go to state 10
    repeat_when_statement          shift and go to state 11
    stop_statement                 shift and go to state 12
    behavior_statement             shift and go to state 13
    getter                         shift and go to state 14
    list_val                       shift and go to state 18
    behavior_definition            shift and go to state 35
    empty                          shift and go to state 38

state 200

    (43) in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .
    OTHERWISE       reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    IN              reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    LET             reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    {               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    NIL             reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    FALSE           reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    TRUE            reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    STRING          reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    FLOAT           reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    INT             reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    (               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    !               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    +               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    -               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    ~               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    ID              reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    DEC             reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    INC             reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    REPEAT          reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    STOP            reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    [               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    BEHAVIOR        reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    $end            reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)
    }               reduce using rule 43 (in_other_case_statement -> IN OTHER CASE expr block in_other_case_statement .)


state 201

    (42) in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .
    OTHERWISE       reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    IN              reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    LET             reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    {               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    NIL             reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    FALSE           reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    TRUE            reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    STRING          reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    FLOAT           reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    INT             reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    (               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    !               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    +               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    -               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    ~               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    ID              reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    DEC             reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    INC             reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    REPEAT          reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    STOP            reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    [               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    BEHAVIOR        reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    $end            reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)
    }               reduce using rule 42 (in_other_case_statement -> IN OTHER CASE expr block OTHERWISE block .)


Conflicts:

shift/reduce conflict for LET in state 0 resolved as shift
shift/reduce conflict for { in state 0 resolved as shift
shift/reduce conflict for NIL in state 0 resolved as shift
shift/reduce conflict for FALSE in state 0 resolved as shift
shift/reduce conflict for TRUE in state 0 resolved as shift
shift/reduce conflict for STRING in state 0 resolved as shift
shift/reduce conflict for FLOAT in state 0 resolved as shift
shift/reduce conflict for INT in state 0 resolved as shift
shift/reduce conflict for ( in state 0 resolved as shift
shift/reduce conflict for ! in state 0 resolved as shift
shift/reduce conflict for + in state 0 resolved as shift
shift/reduce conflict for - in state 0 resolved as shift
shift/reduce conflict for ~ in state 0 resolved as shift
shift/reduce conflict for ID in state 0 resolved as shift
shift/reduce conflict for DEC in state 0 resolved as shift
shift/reduce conflict for INC in state 0 resolved as shift
shift/reduce conflict for IN in state 0 resolved as shift
shift/reduce conflict for REPEAT in state 0 resolved as shift
shift/reduce conflict for STOP in state 0 resolved as shift
shift/reduce conflict for [ in state 0 resolved as shift
shift/reduce conflict for BEHAVIOR in state 0 resolved as shift
shift/reduce conflict for LET in state 3 resolved as shift
shift/reduce conflict for { in state 3 resolved as shift
shift/reduce conflict for NIL in state 3 resolved as shift
shift/reduce conflict for FALSE in state 3 resolved as shift
shift/reduce conflict for TRUE in state 3 resolved as shift
shift/reduce conflict for STRING in state 3 resolved as shift
shift/reduce conflict for FLOAT in state 3 resolved as shift
shift/reduce conflict for INT in state 3 resolved as shift
shift/reduce conflict for ( in state 3 resolved as shift
shift/reduce conflict for ! in state 3 resolved as shift
shift/reduce conflict for + in state 3 resolved as shift
shift/reduce conflict for - in state 3 resolved as shift
shift/reduce conflict for ~ in state 3 resolved as shift
shift/reduce conflict for ID in state 3 resolved as shift
shift/reduce conflict for DEC in state 3 resolved as shift
shift/reduce conflict for INC in state 3 resolved as shift
shift/reduce conflict for IN in state 3 resolved as shift
shift/reduce conflict for REPEAT in state 3 resolved as shift
shift/reduce conflict for STOP in state 3 resolved as shift
shift/reduce conflict for [ in state 3 resolved as shift
shift/reduce conflict for BEHAVIOR in state 3 resolved as shift
shift/reduce conflict for ( in state 29 resolved as shift
shift/reduce conflict for ( in state 29 resolved as shift
shift/reduce conflict for [ in state 84 resolved as shift
shift/reduce conflict for IN in state 144 resolved as shift
shift/reduce conflict for LET in state 144 resolved as shift
shift/reduce conflict for { in state 144 resolved as shift
shift/reduce conflict for NIL in state 144 resolved as shift
shift/reduce conflict for FALSE in state 144 resolved as shift
shift/reduce conflict for TRUE in state 144 resolved as shift
shift/reduce conflict for STRING in state 144 resolved as shift
shift/reduce conflict for FLOAT in state 144 resolved as shift
shift/reduce conflict for INT in state 144 resolved as shift
shift/reduce conflict for ( in state 144 resolved as shift
shift/reduce conflict for ! in state 144 resolved as shift
shift/reduce conflict for + in state 144 resolved as shift
shift/reduce conflict for - in state 144 resolved as shift
shift/reduce conflict for ~ in state 144 resolved as shift
shift/reduce conflict for ID in state 144 resolved as shift
shift/reduce conflict for DEC in state 144 resolved as shift
shift/reduce conflict for INC in state 144 resolved as shift
shift/reduce conflict for REPEAT in state 144 resolved as shift
shift/reduce conflict for STOP in state 144 resolved as shift
shift/reduce conflict for [ in state 144 resolved as shift
shift/reduce conflict for BEHAVIOR in state 144 resolved as shift
shift/reduce conflict for IN in state 145 resolved as shift
shift/reduce conflict for LET in state 145 resolved as shift
shift/reduce conflict for { in state 145 resolved as shift
shift/reduce conflict for NIL in state 145 resolved as shift
shift/reduce conflict for FALSE in state 145 resolved as shift
shift/reduce conflict for TRUE in state 145 resolved as shift
shift/reduce conflict for STRING in state 145 resolved as shift
shift/reduce conflict for FLOAT in state 145 resolved as shift
shift/reduce conflict for INT in state 145 resolved as shift
shift/reduce conflict for ( in state 145 resolved as shift
shift/reduce conflict for ! in state 145 resolved as shift
shift/reduce conflict for + in state 145 resolved as shift
shift/reduce conflict for - in state 145 resolved as shift
shift/reduce conflict for ~ in state 145 resolved as shift
shift/reduce conflict for ID in state 145 resolved as shift
shift/reduce conflict for DEC in state 145 resolved as shift
shift/reduce conflict for INC in state 145 resolved as shift
shift/reduce conflict for REPEAT in state 145 resolved as shift
shift/reduce conflict for STOP in state 145 resolved as shift
shift/reduce conflict for [ in state 145 resolved as shift
shift/reduce conflict for BEHAVIOR in state 145 resolved as shift
shift/reduce conflict for OTHERWISE in state 165 resolved as shift
shift/reduce conflict for IN in state 165 resolved as shift
shift/reduce conflict for STRING in state 169 resolved as shift
shift/reduce conflict for LET in state 169 resolved as shift
shift/reduce conflict for { in state 169 resolved as shift
shift/reduce conflict for NIL in state 169 resolved as shift
shift/reduce conflict for FALSE in state 169 resolved as shift
shift/reduce conflict for TRUE in state 169 resolved as shift
shift/reduce conflict for FLOAT in state 169 resolved as shift
shift/reduce conflict for INT in state 169 resolved as shift
shift/reduce conflict for ( in state 169 resolved as shift
shift/reduce conflict for ! in state 169 resolved as shift
shift/reduce conflict for + in state 169 resolved as shift
shift/reduce conflict for - in state 169 resolved as shift
shift/reduce conflict for ~ in state 169 resolved as shift
shift/reduce conflict for ID in state 169 resolved as shift
shift/reduce conflict for DEC in state 169 resolved as shift
shift/reduce conflict for INC in state 169 resolved as shift
shift/reduce conflict for IN in state 169 resolved as shift
shift/reduce conflict for REPEAT in state 169 resolved as shift
shift/reduce conflict for STOP in state 169 resolved as shift
shift/reduce conflict for [ in state 169 resolved as shift
shift/reduce conflict for BEHAVIOR in state 169 resolved as shift
shift/reduce conflict for % in state 175 resolved as shift
shift/reduce conflict for / in state 175 resolved as shift
shift/reduce conflict for * in state 175 resolved as shift
shift/reduce conflict for - in state 175 resolved as shift
shift/reduce conflict for + in state 175 resolved as shift
shift/reduce conflict for | in state 175 resolved as shift
shift/reduce conflict for ^ in state 175 resolved as shift
shift/reduce conflict for & in state 175 resolved as shift
shift/reduce conflict for SHR in state 175 resolved as shift
shift/reduce conflict for SHL in state 175 resolved as shift
shift/reduce conflict for GREATER in state 175 resolved as shift
shift/reduce conflict for LESS in state 175 resolved as shift
shift/reduce conflict for OR in state 175 resolved as shift
shift/reduce conflict for AND in state 175 resolved as shift
shift/reduce conflict for GREATEREQ in state 175 resolved as shift
shift/reduce conflict for LESSEQ in state 175 resolved as shift
shift/reduce conflict for NOTEQ in state 175 resolved as shift
shift/reduce conflict for EQEQ in state 175 resolved as shift
shift/reduce conflict for ? in state 175 resolved as shift
shift/reduce conflict for IN in state 181 resolved as shift
shift/reduce conflict for LET in state 181 resolved as shift
shift/reduce conflict for { in state 181 resolved as shift
shift/reduce conflict for NIL in state 181 resolved as shift
shift/reduce conflict for FALSE in state 181 resolved as shift
shift/reduce conflict for TRUE in state 181 resolved as shift
shift/reduce conflict for STRING in state 181 resolved as shift
shift/reduce conflict for FLOAT in state 181 resolved as shift
shift/reduce conflict for INT in state 181 resolved as shift
shift/reduce conflict for ( in state 181 resolved as shift
shift/reduce conflict for ! in state 181 resolved as shift
shift/reduce conflict for + in state 181 resolved as shift
shift/reduce conflict for - in state 181 resolved as shift
shift/reduce conflict for ~ in state 181 resolved as shift
shift/reduce conflict for ID in state 181 resolved as shift
shift/reduce conflict for DEC in state 181 resolved as shift
shift/reduce conflict for INC in state 181 resolved as shift
shift/reduce conflict for REPEAT in state 181 resolved as shift
shift/reduce conflict for STOP in state 181 resolved as shift
shift/reduce conflict for [ in state 181 resolved as shift
shift/reduce conflict for BEHAVIOR in state 181 resolved as shift
shift/reduce conflict for IN in state 188 resolved as shift
shift/reduce conflict for LET in state 188 resolved as shift
shift/reduce conflict for { in state 188 resolved as shift
shift/reduce conflict for NIL in state 188 resolved as shift
shift/reduce conflict for FALSE in state 188 resolved as shift
shift/reduce conflict for TRUE in state 188 resolved as shift
shift/reduce conflict for STRING in state 188 resolved as shift
shift/reduce conflict for FLOAT in state 188 resolved as shift
shift/reduce conflict for INT in state 188 resolved as shift
shift/reduce conflict for ( in state 188 resolved as shift
shift/reduce conflict for ! in state 188 resolved as shift
shift/reduce conflict for + in state 188 resolved as shift
shift/reduce conflict for - in state 188 resolved as shift
shift/reduce conflict for ~ in state 188 resolved as shift
shift/reduce conflict for ID in state 188 resolved as shift
shift/reduce conflict for DEC in state 188 resolved as shift
shift/reduce conflict for INC in state 188 resolved as shift
shift/reduce conflict for REPEAT in state 188 resolved as shift
shift/reduce conflict for STOP in state 188 resolved as shift
shift/reduce conflict for [ in state 188 resolved as shift
shift/reduce conflict for BEHAVIOR in state 188 resolved as shift
shift/reduce conflict for IN in state 197 resolved as shift
shift/reduce conflict for LET in state 197 resolved as shift
shift/reduce conflict for { in state 197 resolved as shift
shift/reduce conflict for NIL in state 197 resolved as shift
shift/reduce conflict for FALSE in state 197 resolved as shift
shift/reduce conflict for TRUE in state 197 resolved as shift
shift/reduce conflict for STRING in state 197 resolved as shift
shift/reduce conflict for FLOAT in state 197 resolved as shift
shift/reduce conflict for INT in state 197 resolved as shift
shift/reduce conflict for ( in state 197 resolved as shift
shift/reduce conflict for ! in state 197 resolved as shift
shift/reduce conflict for + in state 197 resolved as shift
shift/reduce conflict for - in state 197 resolved as shift
shift/reduce conflict for ~ in state 197 resolved as shift
shift/reduce conflict for ID in state 197 resolved as shift
shift/reduce conflict for DEC in state 197 resolved as shift
shift/reduce conflict for INC in state 197 resolved as shift
shift/reduce conflict for REPEAT in state 197 resolved as shift
shift/reduce conflict for STOP in state 197 resolved as shift
shift/reduce conflict for [ in state 197 resolved as shift
shift/reduce conflict for BEHAVIOR in state 197 resolved as shift
shift/reduce conflict for OTHERWISE in state 198 resolved as shift
shift/reduce conflict for IN in state 198 resolved as shift
shift/reduce conflict for IN in state 199 resolved as shift
shift/reduce conflict for LET in state 199 resolved as shift
shift/reduce conflict for { in state 199 resolved as shift
shift/reduce conflict for NIL in state 199 resolved as shift
shift/reduce conflict for FALSE in state 199 resolved as shift
shift/reduce conflict for TRUE in state 199 resolved as shift
shift/reduce conflict for STRING in state 199 resolved as shift
shift/reduce conflict for FLOAT in state 199 resolved as shift
shift/reduce conflict for INT in state 199 resolved as shift
shift/reduce conflict for ( in state 199 resolved as shift
shift/reduce conflict for ! in state 199 resolved as shift
shift/reduce conflict for + in state 199 resolved as shift
shift/reduce conflict for - in state 199 resolved as shift
shift/reduce conflict for ~ in state 199 resolved as shift
shift/reduce conflict for ID in state 199 resolved as shift
shift/reduce conflict for DEC in state 199 resolved as shift
shift/reduce conflict for INC in state 199 resolved as shift
shift/reduce conflict for REPEAT in state 199 resolved as shift
shift/reduce conflict for STOP in state 199 resolved as shift
shift/reduce conflict for [ in state 199 resolved as shift
shift/reduce conflict for BEHAVIOR in state 199 resolved as shift
reduce/reduce conflict in state 2 resolved using rule program -> empty
rejected rule (behavior_statement -> empty) in state 2
reduce/reduce conflict in state 3 resolved using rule program -> statements
rejected rule (empty -> <empty>) in state 3
reduce/reduce conflict in state 29 resolved using rule var -> ID
rejected rule (getter -> ID) in state 29
reduce/reduce conflict in state 62 resolved using rule var -> ID
rejected rule (getter -> ID) in state 62
reduce/reduce conflict in state 159 resolved using rule expr -> var [ expr ]
rejected rule (var -> var [ expr ]) in state 159
reduce/reduce conflict in state 182 resolved using rule expr -> - expr  [precedence=right, level=12]
rejected rule (expr -> expr - expr  [precedence=left, level=10]) in state 182
reduce/reduce conflict in state 183 resolved using rule expr -> + expr  [precedence=right, level=12]
rejected rule (expr -> expr + expr  [precedence=left, level=10]) in state 183
reduce/reduce conflict in state 185 resolved using rule program -> empty
rejected rule (member_list -> empty) in state 185
reduce/reduce conflict in state 185 resolved using rule program -> empty
rejected rule (behavior_statement -> empty) in state 185