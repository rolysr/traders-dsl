Grammar:

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> empty
Rule 3     declarationList -> declaration declarationList
Rule 4     declaration -> envFunc
Rule 5     declaration -> varAssign
Rule 6     declaration -> varDecl
Rule 7     declaration -> behaveDecl
Rule 8     declaration -> agentDecl
Rule 9     declaration -> envDecl
Rule 10    envDecl -> ENV ID { envBody }
Rule 11    agentDecl -> AGENT ID { agentBody }
Rule 12    behaveDecl -> BEHAVE ID { behaveBody }
Rule 13    varDecl -> LET ID : type ASSIGN expr SEP
Rule 14    varDecl -> LET ID : type SEP
Rule 15    varAssign -> getter ASSIGN expr SEP
Rule 16    envFunc -> PUT ID IN ID AT expr , expr SEP
Rule 17    envFunc -> RUN ID WITH expr ITERATIONS SEP
Rule 18    envFunc -> RESET ID SEP
Rule 19    envBody -> varList
Rule 20    agentBody -> varList
Rule 21    behaveBody -> statementList
Rule 22    varList -> empty
Rule 23    varList -> varAssign varList
Rule 24    varList -> varDecl varList
Rule 25    statementList -> empty
Rule 26    statementList -> statement statementList
Rule 27    statement -> primFuncStmt
Rule 28    statement -> incaseStmt
Rule 29    statement -> foreachStmt
Rule 30    statement -> repeatStmt
Rule 31    statement -> varAssign
Rule 32    statement -> varDecl
Rule 33    repeatStmt -> REPEAT WHEN expr { statementList }
Rule 34    foreachStmt -> FOREACH ID IN expr { statementList }
Rule 35    incaseStmt -> IN CASE expr { statementList } inothercaseStmt
Rule 36    inothercaseStmt -> empty
Rule 37    inothercaseStmt -> OTHERWISE { statementList }
Rule 38    inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt
Rule 39    primFuncStmt -> getter . listVoidFunc SEP
Rule 40    primFuncStmt -> PUT expr , expr SEP
Rule 41    primFuncStmt -> PICK expr SEP
Rule 42    primFuncStmt -> STOP SEP
Rule 43    primFuncStmt -> RESTART BEHAVE SEP
Rule 44    primFuncStmt -> SELL expr , expr , expr SEP
Rule 45    primFuncStmt -> buyStmt SEP
Rule 46    primFuncStmt -> moveStmt SEP
Rule 47    primFuncStmt -> TALK expr SEP
Rule 48    listVoidFunc -> REVERSE
Rule 49    listVoidFunc -> POP
Rule 50    listVoidFunc -> PUSH expr
Rule 51    moveStmt -> MOVE RIGHT
Rule 52    moveStmt -> MOVE LEFT
Rule 53    moveStmt -> MOVE DOWN
Rule 54    moveStmt -> MOVE UP
Rule 55    moveStmt -> MOVE expr , expr
Rule 56    buyStmt -> BUY expr
Rule 57    buyStmt -> BUY expr , expr , expr
Rule 58    expr -> call
Rule 59    expr -> - expr  [precedence=right, level=9]
Rule 60    expr -> ! expr  [precedence=right, level=10]
Rule 61    expr -> expr / expr  [precedence=left, level=8]
Rule 62    expr -> expr * expr  [precedence=left, level=8]
Rule 63    expr -> expr - expr  [precedence=left, level=7]
Rule 64    expr -> expr + expr  [precedence=left, level=7]
Rule 65    expr -> expr GREATER expr  [precedence=left, level=5]
Rule 66    expr -> expr GREATEREQ expr  [precedence=left, level=5]
Rule 67    expr -> expr LESSEQ expr  [precedence=left, level=5]
Rule 68    expr -> expr LESS expr  [precedence=left, level=5]
Rule 69    expr -> expr EQEQ expr  [precedence=left, level=4]
Rule 70    expr -> expr NOTEQ expr  [precedence=left, level=4]
Rule 71    expr -> expr AND expr  [precedence=left, level=3]
Rule 72    expr -> expr OR expr  [precedence=left, level=2]
Rule 73    call -> ID dotTail
Rule 74    call -> primitiveValue
Rule 75    call -> primary
Rule 76    getter -> ID dotTail
Rule 77    dotTail -> empty
Rule 78    dotTail -> . idTail dotTail
Rule 79    idTail -> listValueFunc
Rule 80    idTail -> ID
Rule 81    listValueFunc -> SIZE
Rule 82    listValueFunc -> GET expr
Rule 83    primitiveValue -> FIND PEERS
Rule 84    primitiveValue -> FIND OBJECTS
Rule 85    primitiveValue -> RANDOM FROM expr TO expr
Rule 86    primary -> ( expr )
Rule 87    primary -> { bookItems }
Rule 88    primary -> [ listItems ]
Rule 89    primary -> STRING
Rule 90    primary -> NUMBER
Rule 91    primary -> FALSE
Rule 92    primary -> TRUE
Rule 93    listItems -> empty
Rule 94    listItems -> expr , listItems
Rule 95    bookItems -> empty
Rule 96    bookItems -> STRING : ( listItems ) , bookItems
Rule 97    type -> BOOK_TYPE
Rule 98    type -> LIST_TYPE
Rule 99    type -> STRING_TYPE
Rule 100   type -> BOOL_TYPE
Rule 101   type -> NUMBER_TYPE
Rule 102   empty -> <empty>

Unused terminals:

    DEC
    SHRASGN
    SLASHASGN
    ANDASGN
    SHR
    MINUSASGN
    SHLASGN
    PLUSASGN
    MODULOASGN
    ORASGN
    XORASGN
    INC
    SHL
    STARASGN

Terminals, with rules where they appear:

!                    : 60
(                    : 86 96
)                    : 86 96
*                    : 62
+                    : 64
,                    : 16 40 44 44 55 57 57 94 96
-                    : 59 63
.                    : 39 78
/                    : 61
:                    : 13 14 96
AGENT                : 11
AND                  : 71
ANDASGN              : 
ASSIGN               : 13 15
AT                   : 16
BEHAVE               : 12 43
BOOK_TYPE            : 97
BOOL_TYPE            : 100
BUY                  : 56 57
CASE                 : 35 38
DEC                  : 
DOWN                 : 53
ENV                  : 10
EQEQ                 : 69
FALSE                : 91
FIND                 : 83 84
FOREACH              : 34
FROM                 : 85
GET                  : 82
GREATER              : 65
GREATEREQ            : 66
ID                   : 10 11 12 13 14 16 16 17 18 34 73 76 80
IN                   : 16 34 35 38
INC                  : 
ITERATIONS           : 17
LEFT                 : 52
LESS                 : 68
LESSEQ               : 67
LET                  : 13 14
LIST_TYPE            : 98
MINUSASGN            : 
MODULOASGN           : 
MOVE                 : 51 52 53 54 55
NOTEQ                : 70
NUMBER               : 90
NUMBER_TYPE          : 101
OBJECTS              : 84
OR                   : 72
ORASGN               : 
OTHER                : 38
OTHERWISE            : 37
PEERS                : 83
PICK                 : 41
PLUSASGN             : 
POP                  : 49
PUSH                 : 50
PUT                  : 16 40
RANDOM               : 85
REPEAT               : 33
RESET                : 18
RESTART              : 43
REVERSE              : 48
RIGHT                : 51
RUN                  : 17
SELL                 : 44
SEP                  : 13 14 15 16 17 18 39 40 41 42 43 44 45 46 47
SHL                  : 
SHLASGN              : 
SHR                  : 
SHRASGN              : 
SIZE                 : 81
SLASHASGN            : 
STARASGN             : 
STOP                 : 42
STRING               : 89 96
STRING_TYPE          : 99
TALK                 : 47
TO                   : 85
TRUE                 : 92
UP                   : 54
WHEN                 : 33
WITH                 : 17
XORASGN              : 
[                    : 88
]                    : 88
error                : 
{                    : 10 11 12 33 34 35 37 38 87
}                    : 10 11 12 33 34 35 37 38 87

Nonterminals, with rules where they appear:

agentBody            : 11
agentDecl            : 8
behaveBody           : 12
behaveDecl           : 7
bookItems            : 87 96
buyStmt              : 45
call                 : 58
declaration          : 3
declarationList      : 1 3
dotTail              : 73 76 78
empty                : 2 22 25 36 77 93 95
envBody              : 10
envDecl              : 9
envFunc              : 4
expr                 : 13 15 16 16 17 33 34 35 38 40 40 41 44 44 44 47 50 55 55 56 57 57 57 59 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 82 85 85 86 94
foreachStmt          : 29
getter               : 15 39
idTail               : 78
incaseStmt           : 28
inothercaseStmt      : 35 38
listItems            : 88 94 96
listValueFunc        : 79
listVoidFunc         : 39
moveStmt             : 46
primFuncStmt         : 27
primary              : 75
primitiveValue       : 74
program              : 0
repeatStmt           : 30
statement            : 26
statementList        : 21 26 33 34 35 37 38
type                 : 13 14
varAssign            : 5 23 31
varDecl              : 6 24 32
varList              : 19 20 23 24


state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (102) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT ID IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (76) getter -> . ID dotTail
    $end            reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    program                        shift and go to state 1
    declarationList                shift and go to state 2
    empty                          shift and go to state 3
    declaration                    shift and go to state 4
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 1

    (0) S' -> program .


state 2

    (1) program -> declarationList .
    $end            reduce using rule 1 (program -> declarationList .)


state 3

    (2) declarationList -> empty .
    $end            reduce using rule 2 (declarationList -> empty .)


state 4

    (3) declarationList -> declaration . declarationList
    (2) declarationList -> . empty
    (3) declarationList -> . declaration declarationList
    (102) empty -> .
    (4) declaration -> . envFunc
    (5) declaration -> . varAssign
    (6) declaration -> . varDecl
    (7) declaration -> . behaveDecl
    (8) declaration -> . agentDecl
    (9) declaration -> . envDecl
    (16) envFunc -> . PUT ID IN ID AT expr , expr SEP
    (17) envFunc -> . RUN ID WITH expr ITERATIONS SEP
    (18) envFunc -> . RESET ID SEP
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (12) behaveDecl -> . BEHAVE ID { behaveBody }
    (11) agentDecl -> . AGENT ID { agentBody }
    (10) envDecl -> . ENV ID { envBody }
    (76) getter -> . ID dotTail
    $end            reduce using rule 102 (empty -> .)
    PUT             shift and go to state 11
    RUN             shift and go to state 13
    RESET           shift and go to state 14
    LET             shift and go to state 16
    BEHAVE          shift and go to state 17
    AGENT           shift and go to state 18
    ENV             shift and go to state 19
    ID              shift and go to state 12

    declaration                    shift and go to state 4
    declarationList                shift and go to state 20
    empty                          shift and go to state 3
    envFunc                        shift and go to state 5
    varAssign                      shift and go to state 6
    varDecl                        shift and go to state 7
    behaveDecl                     shift and go to state 8
    agentDecl                      shift and go to state 9
    envDecl                        shift and go to state 10
    getter                         shift and go to state 15

state 5

    (4) declaration -> envFunc .
    PUT             reduce using rule 4 (declaration -> envFunc .)
    RUN             reduce using rule 4 (declaration -> envFunc .)
    RESET           reduce using rule 4 (declaration -> envFunc .)
    LET             reduce using rule 4 (declaration -> envFunc .)
    BEHAVE          reduce using rule 4 (declaration -> envFunc .)
    AGENT           reduce using rule 4 (declaration -> envFunc .)
    ENV             reduce using rule 4 (declaration -> envFunc .)
    ID              reduce using rule 4 (declaration -> envFunc .)
    $end            reduce using rule 4 (declaration -> envFunc .)


state 6

    (5) declaration -> varAssign .
    PUT             reduce using rule 5 (declaration -> varAssign .)
    RUN             reduce using rule 5 (declaration -> varAssign .)
    RESET           reduce using rule 5 (declaration -> varAssign .)
    LET             reduce using rule 5 (declaration -> varAssign .)
    BEHAVE          reduce using rule 5 (declaration -> varAssign .)
    AGENT           reduce using rule 5 (declaration -> varAssign .)
    ENV             reduce using rule 5 (declaration -> varAssign .)
    ID              reduce using rule 5 (declaration -> varAssign .)
    $end            reduce using rule 5 (declaration -> varAssign .)


state 7

    (6) declaration -> varDecl .
    PUT             reduce using rule 6 (declaration -> varDecl .)
    RUN             reduce using rule 6 (declaration -> varDecl .)
    RESET           reduce using rule 6 (declaration -> varDecl .)
    LET             reduce using rule 6 (declaration -> varDecl .)
    BEHAVE          reduce using rule 6 (declaration -> varDecl .)
    AGENT           reduce using rule 6 (declaration -> varDecl .)
    ENV             reduce using rule 6 (declaration -> varDecl .)
    ID              reduce using rule 6 (declaration -> varDecl .)
    $end            reduce using rule 6 (declaration -> varDecl .)


state 8

    (7) declaration -> behaveDecl .
    PUT             reduce using rule 7 (declaration -> behaveDecl .)
    RUN             reduce using rule 7 (declaration -> behaveDecl .)
    RESET           reduce using rule 7 (declaration -> behaveDecl .)
    LET             reduce using rule 7 (declaration -> behaveDecl .)
    BEHAVE          reduce using rule 7 (declaration -> behaveDecl .)
    AGENT           reduce using rule 7 (declaration -> behaveDecl .)
    ENV             reduce using rule 7 (declaration -> behaveDecl .)
    ID              reduce using rule 7 (declaration -> behaveDecl .)
    $end            reduce using rule 7 (declaration -> behaveDecl .)


state 9

    (8) declaration -> agentDecl .
    PUT             reduce using rule 8 (declaration -> agentDecl .)
    RUN             reduce using rule 8 (declaration -> agentDecl .)
    RESET           reduce using rule 8 (declaration -> agentDecl .)
    LET             reduce using rule 8 (declaration -> agentDecl .)
    BEHAVE          reduce using rule 8 (declaration -> agentDecl .)
    AGENT           reduce using rule 8 (declaration -> agentDecl .)
    ENV             reduce using rule 8 (declaration -> agentDecl .)
    ID              reduce using rule 8 (declaration -> agentDecl .)
    $end            reduce using rule 8 (declaration -> agentDecl .)


state 10

    (9) declaration -> envDecl .
    PUT             reduce using rule 9 (declaration -> envDecl .)
    RUN             reduce using rule 9 (declaration -> envDecl .)
    RESET           reduce using rule 9 (declaration -> envDecl .)
    LET             reduce using rule 9 (declaration -> envDecl .)
    BEHAVE          reduce using rule 9 (declaration -> envDecl .)
    AGENT           reduce using rule 9 (declaration -> envDecl .)
    ENV             reduce using rule 9 (declaration -> envDecl .)
    ID              reduce using rule 9 (declaration -> envDecl .)
    $end            reduce using rule 9 (declaration -> envDecl .)


state 11

    (16) envFunc -> PUT . ID IN ID AT expr , expr SEP
    ID              shift and go to state 21


state 12

    (76) getter -> ID . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 24
    ASSIGN          reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 22
    empty                          shift and go to state 23

state 13

    (17) envFunc -> RUN . ID WITH expr ITERATIONS SEP
    ID              shift and go to state 25


state 14

    (18) envFunc -> RESET . ID SEP
    ID              shift and go to state 26


state 15

    (15) varAssign -> getter . ASSIGN expr SEP
    ASSIGN          shift and go to state 27


state 16

    (13) varDecl -> LET . ID : type ASSIGN expr SEP
    (14) varDecl -> LET . ID : type SEP
    ID              shift and go to state 28


state 17

    (12) behaveDecl -> BEHAVE . ID { behaveBody }
    ID              shift and go to state 29


state 18

    (11) agentDecl -> AGENT . ID { agentBody }
    ID              shift and go to state 30


state 19

    (10) envDecl -> ENV . ID { envBody }
    ID              shift and go to state 31


state 20

    (3) declarationList -> declaration declarationList .
    $end            reduce using rule 3 (declarationList -> declaration declarationList .)


state 21

    (16) envFunc -> PUT ID . IN ID AT expr , expr SEP
    IN              shift and go to state 32


state 22

    (76) getter -> ID dotTail .
    ASSIGN          reduce using rule 76 (getter -> ID dotTail .)
    .               reduce using rule 76 (getter -> ID dotTail .)


state 23

    (77) dotTail -> empty .
    ASSIGN          reduce using rule 77 (dotTail -> empty .)
    .               reduce using rule 77 (dotTail -> empty .)
    SEP             reduce using rule 77 (dotTail -> empty .)
    /               reduce using rule 77 (dotTail -> empty .)
    *               reduce using rule 77 (dotTail -> empty .)
    -               reduce using rule 77 (dotTail -> empty .)
    +               reduce using rule 77 (dotTail -> empty .)
    GREATER         reduce using rule 77 (dotTail -> empty .)
    GREATEREQ       reduce using rule 77 (dotTail -> empty .)
    LESSEQ          reduce using rule 77 (dotTail -> empty .)
    LESS            reduce using rule 77 (dotTail -> empty .)
    EQEQ            reduce using rule 77 (dotTail -> empty .)
    NOTEQ           reduce using rule 77 (dotTail -> empty .)
    AND             reduce using rule 77 (dotTail -> empty .)
    OR              reduce using rule 77 (dotTail -> empty .)
    ITERATIONS      reduce using rule 77 (dotTail -> empty .)
    )               reduce using rule 77 (dotTail -> empty .)
    ,               reduce using rule 77 (dotTail -> empty .)
    TO              reduce using rule 77 (dotTail -> empty .)
    {               reduce using rule 77 (dotTail -> empty .)


state 24

    (78) dotTail -> . . idTail dotTail
    (79) idTail -> . listValueFunc
    (80) idTail -> . ID
    (81) listValueFunc -> . SIZE
    (82) listValueFunc -> . GET expr
    ID              shift and go to state 35
    SIZE            shift and go to state 36
    GET             shift and go to state 37

    idTail                         shift and go to state 33
    listValueFunc                  shift and go to state 34

state 25

    (17) envFunc -> RUN ID . WITH expr ITERATIONS SEP
    WITH            shift and go to state 38


state 26

    (18) envFunc -> RESET ID . SEP
    SEP             shift and go to state 39


state 27

    (15) varAssign -> getter ASSIGN . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 40
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 28

    (13) varDecl -> LET ID . : type ASSIGN expr SEP
    (14) varDecl -> LET ID . : type SEP
    :               shift and go to state 56


state 29

    (12) behaveDecl -> BEHAVE ID . { behaveBody }
    {               shift and go to state 57


state 30

    (11) agentDecl -> AGENT ID . { agentBody }
    {               shift and go to state 58


state 31

    (10) envDecl -> ENV ID . { envBody }
    {               shift and go to state 59


state 32

    (16) envFunc -> PUT ID IN . ID AT expr , expr SEP
    ID              shift and go to state 60


state 33

    (78) dotTail -> . idTail . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 24
    ASSIGN          reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    ITERATIONS      reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 61
    empty                          shift and go to state 23

state 34

    (79) idTail -> listValueFunc .
    .               reduce using rule 79 (idTail -> listValueFunc .)
    ASSIGN          reduce using rule 79 (idTail -> listValueFunc .)
    SEP             reduce using rule 79 (idTail -> listValueFunc .)
    /               reduce using rule 79 (idTail -> listValueFunc .)
    *               reduce using rule 79 (idTail -> listValueFunc .)
    -               reduce using rule 79 (idTail -> listValueFunc .)
    +               reduce using rule 79 (idTail -> listValueFunc .)
    GREATER         reduce using rule 79 (idTail -> listValueFunc .)
    GREATEREQ       reduce using rule 79 (idTail -> listValueFunc .)
    LESSEQ          reduce using rule 79 (idTail -> listValueFunc .)
    LESS            reduce using rule 79 (idTail -> listValueFunc .)
    EQEQ            reduce using rule 79 (idTail -> listValueFunc .)
    NOTEQ           reduce using rule 79 (idTail -> listValueFunc .)
    AND             reduce using rule 79 (idTail -> listValueFunc .)
    OR              reduce using rule 79 (idTail -> listValueFunc .)
    ITERATIONS      reduce using rule 79 (idTail -> listValueFunc .)
    )               reduce using rule 79 (idTail -> listValueFunc .)
    ,               reduce using rule 79 (idTail -> listValueFunc .)
    TO              reduce using rule 79 (idTail -> listValueFunc .)
    {               reduce using rule 79 (idTail -> listValueFunc .)


state 35

    (80) idTail -> ID .
    .               reduce using rule 80 (idTail -> ID .)
    ASSIGN          reduce using rule 80 (idTail -> ID .)
    SEP             reduce using rule 80 (idTail -> ID .)
    /               reduce using rule 80 (idTail -> ID .)
    *               reduce using rule 80 (idTail -> ID .)
    -               reduce using rule 80 (idTail -> ID .)
    +               reduce using rule 80 (idTail -> ID .)
    GREATER         reduce using rule 80 (idTail -> ID .)
    GREATEREQ       reduce using rule 80 (idTail -> ID .)
    LESSEQ          reduce using rule 80 (idTail -> ID .)
    LESS            reduce using rule 80 (idTail -> ID .)
    EQEQ            reduce using rule 80 (idTail -> ID .)
    NOTEQ           reduce using rule 80 (idTail -> ID .)
    AND             reduce using rule 80 (idTail -> ID .)
    OR              reduce using rule 80 (idTail -> ID .)
    ITERATIONS      reduce using rule 80 (idTail -> ID .)
    )               reduce using rule 80 (idTail -> ID .)
    ,               reduce using rule 80 (idTail -> ID .)
    TO              reduce using rule 80 (idTail -> ID .)
    {               reduce using rule 80 (idTail -> ID .)


state 36

    (81) listValueFunc -> SIZE .
    .               reduce using rule 81 (listValueFunc -> SIZE .)
    ASSIGN          reduce using rule 81 (listValueFunc -> SIZE .)
    SEP             reduce using rule 81 (listValueFunc -> SIZE .)
    /               reduce using rule 81 (listValueFunc -> SIZE .)
    *               reduce using rule 81 (listValueFunc -> SIZE .)
    -               reduce using rule 81 (listValueFunc -> SIZE .)
    +               reduce using rule 81 (listValueFunc -> SIZE .)
    GREATER         reduce using rule 81 (listValueFunc -> SIZE .)
    GREATEREQ       reduce using rule 81 (listValueFunc -> SIZE .)
    LESSEQ          reduce using rule 81 (listValueFunc -> SIZE .)
    LESS            reduce using rule 81 (listValueFunc -> SIZE .)
    EQEQ            reduce using rule 81 (listValueFunc -> SIZE .)
    NOTEQ           reduce using rule 81 (listValueFunc -> SIZE .)
    AND             reduce using rule 81 (listValueFunc -> SIZE .)
    OR              reduce using rule 81 (listValueFunc -> SIZE .)
    ITERATIONS      reduce using rule 81 (listValueFunc -> SIZE .)
    )               reduce using rule 81 (listValueFunc -> SIZE .)
    ,               reduce using rule 81 (listValueFunc -> SIZE .)
    TO              reduce using rule 81 (listValueFunc -> SIZE .)
    {               reduce using rule 81 (listValueFunc -> SIZE .)


state 37

    (82) listValueFunc -> GET . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 62
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 38

    (17) envFunc -> RUN ID WITH . expr ITERATIONS SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 63
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 39

    (18) envFunc -> RESET ID SEP .
    PUT             reduce using rule 18 (envFunc -> RESET ID SEP .)
    RUN             reduce using rule 18 (envFunc -> RESET ID SEP .)
    RESET           reduce using rule 18 (envFunc -> RESET ID SEP .)
    LET             reduce using rule 18 (envFunc -> RESET ID SEP .)
    BEHAVE          reduce using rule 18 (envFunc -> RESET ID SEP .)
    AGENT           reduce using rule 18 (envFunc -> RESET ID SEP .)
    ENV             reduce using rule 18 (envFunc -> RESET ID SEP .)
    ID              reduce using rule 18 (envFunc -> RESET ID SEP .)
    $end            reduce using rule 18 (envFunc -> RESET ID SEP .)


state 40

    (15) varAssign -> getter ASSIGN expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 64
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 41

    (58) expr -> call .
    SEP             reduce using rule 58 (expr -> call .)
    /               reduce using rule 58 (expr -> call .)
    *               reduce using rule 58 (expr -> call .)
    -               reduce using rule 58 (expr -> call .)
    +               reduce using rule 58 (expr -> call .)
    GREATER         reduce using rule 58 (expr -> call .)
    GREATEREQ       reduce using rule 58 (expr -> call .)
    LESSEQ          reduce using rule 58 (expr -> call .)
    LESS            reduce using rule 58 (expr -> call .)
    EQEQ            reduce using rule 58 (expr -> call .)
    NOTEQ           reduce using rule 58 (expr -> call .)
    AND             reduce using rule 58 (expr -> call .)
    OR              reduce using rule 58 (expr -> call .)
    .               reduce using rule 58 (expr -> call .)
    ASSIGN          reduce using rule 58 (expr -> call .)
    ITERATIONS      reduce using rule 58 (expr -> call .)
    )               reduce using rule 58 (expr -> call .)
    ,               reduce using rule 58 (expr -> call .)
    TO              reduce using rule 58 (expr -> call .)
    {               reduce using rule 58 (expr -> call .)


state 42

    (59) expr -> - . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 77
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 43

    (60) expr -> ! . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 78
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 44

    (73) call -> ID . dotTail
    (77) dotTail -> . empty
    (78) dotTail -> . . idTail dotTail
    (102) empty -> .
  ! shift/reduce conflict for . resolved as shift
    .               shift and go to state 24
    ASSIGN          reduce using rule 102 (empty -> .)
    SEP             reduce using rule 102 (empty -> .)
    /               reduce using rule 102 (empty -> .)
    *               reduce using rule 102 (empty -> .)
    -               reduce using rule 102 (empty -> .)
    +               reduce using rule 102 (empty -> .)
    GREATER         reduce using rule 102 (empty -> .)
    GREATEREQ       reduce using rule 102 (empty -> .)
    LESSEQ          reduce using rule 102 (empty -> .)
    LESS            reduce using rule 102 (empty -> .)
    EQEQ            reduce using rule 102 (empty -> .)
    NOTEQ           reduce using rule 102 (empty -> .)
    AND             reduce using rule 102 (empty -> .)
    OR              reduce using rule 102 (empty -> .)
    ITERATIONS      reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    ,               reduce using rule 102 (empty -> .)
    TO              reduce using rule 102 (empty -> .)
    {               reduce using rule 102 (empty -> .)

    dotTail                        shift and go to state 79
    empty                          shift and go to state 23

state 45

    (74) call -> primitiveValue .
    SEP             reduce using rule 74 (call -> primitiveValue .)
    /               reduce using rule 74 (call -> primitiveValue .)
    *               reduce using rule 74 (call -> primitiveValue .)
    -               reduce using rule 74 (call -> primitiveValue .)
    +               reduce using rule 74 (call -> primitiveValue .)
    GREATER         reduce using rule 74 (call -> primitiveValue .)
    GREATEREQ       reduce using rule 74 (call -> primitiveValue .)
    LESSEQ          reduce using rule 74 (call -> primitiveValue .)
    LESS            reduce using rule 74 (call -> primitiveValue .)
    EQEQ            reduce using rule 74 (call -> primitiveValue .)
    NOTEQ           reduce using rule 74 (call -> primitiveValue .)
    AND             reduce using rule 74 (call -> primitiveValue .)
    OR              reduce using rule 74 (call -> primitiveValue .)
    .               reduce using rule 74 (call -> primitiveValue .)
    ASSIGN          reduce using rule 74 (call -> primitiveValue .)
    ITERATIONS      reduce using rule 74 (call -> primitiveValue .)
    )               reduce using rule 74 (call -> primitiveValue .)
    ,               reduce using rule 74 (call -> primitiveValue .)
    TO              reduce using rule 74 (call -> primitiveValue .)
    {               reduce using rule 74 (call -> primitiveValue .)


state 46

    (75) call -> primary .
    SEP             reduce using rule 75 (call -> primary .)
    /               reduce using rule 75 (call -> primary .)
    *               reduce using rule 75 (call -> primary .)
    -               reduce using rule 75 (call -> primary .)
    +               reduce using rule 75 (call -> primary .)
    GREATER         reduce using rule 75 (call -> primary .)
    GREATEREQ       reduce using rule 75 (call -> primary .)
    LESSEQ          reduce using rule 75 (call -> primary .)
    LESS            reduce using rule 75 (call -> primary .)
    EQEQ            reduce using rule 75 (call -> primary .)
    NOTEQ           reduce using rule 75 (call -> primary .)
    AND             reduce using rule 75 (call -> primary .)
    OR              reduce using rule 75 (call -> primary .)
    .               reduce using rule 75 (call -> primary .)
    ASSIGN          reduce using rule 75 (call -> primary .)
    ITERATIONS      reduce using rule 75 (call -> primary .)
    )               reduce using rule 75 (call -> primary .)
    ,               reduce using rule 75 (call -> primary .)
    TO              reduce using rule 75 (call -> primary .)
    {               reduce using rule 75 (call -> primary .)


state 47

    (83) primitiveValue -> FIND . PEERS
    (84) primitiveValue -> FIND . OBJECTS
    PEERS           shift and go to state 80
    OBJECTS         shift and go to state 81


state 48

    (85) primitiveValue -> RANDOM . FROM expr TO expr
    FROM            shift and go to state 82


state 49

    (86) primary -> ( . expr )
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 83
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 50

    (87) primary -> { . bookItems }
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 86
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 84
    empty                          shift and go to state 85

state 51

    (88) primary -> [ . listItems ]
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    listItems                      shift and go to state 87
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 52

    (89) primary -> STRING .
    SEP             reduce using rule 89 (primary -> STRING .)
    /               reduce using rule 89 (primary -> STRING .)
    *               reduce using rule 89 (primary -> STRING .)
    -               reduce using rule 89 (primary -> STRING .)
    +               reduce using rule 89 (primary -> STRING .)
    GREATER         reduce using rule 89 (primary -> STRING .)
    GREATEREQ       reduce using rule 89 (primary -> STRING .)
    LESSEQ          reduce using rule 89 (primary -> STRING .)
    LESS            reduce using rule 89 (primary -> STRING .)
    EQEQ            reduce using rule 89 (primary -> STRING .)
    NOTEQ           reduce using rule 89 (primary -> STRING .)
    AND             reduce using rule 89 (primary -> STRING .)
    OR              reduce using rule 89 (primary -> STRING .)
    .               reduce using rule 89 (primary -> STRING .)
    ASSIGN          reduce using rule 89 (primary -> STRING .)
    ITERATIONS      reduce using rule 89 (primary -> STRING .)
    )               reduce using rule 89 (primary -> STRING .)
    ,               reduce using rule 89 (primary -> STRING .)
    TO              reduce using rule 89 (primary -> STRING .)
    {               reduce using rule 89 (primary -> STRING .)


state 53

    (90) primary -> NUMBER .
    SEP             reduce using rule 90 (primary -> NUMBER .)
    /               reduce using rule 90 (primary -> NUMBER .)
    *               reduce using rule 90 (primary -> NUMBER .)
    -               reduce using rule 90 (primary -> NUMBER .)
    +               reduce using rule 90 (primary -> NUMBER .)
    GREATER         reduce using rule 90 (primary -> NUMBER .)
    GREATEREQ       reduce using rule 90 (primary -> NUMBER .)
    LESSEQ          reduce using rule 90 (primary -> NUMBER .)
    LESS            reduce using rule 90 (primary -> NUMBER .)
    EQEQ            reduce using rule 90 (primary -> NUMBER .)
    NOTEQ           reduce using rule 90 (primary -> NUMBER .)
    AND             reduce using rule 90 (primary -> NUMBER .)
    OR              reduce using rule 90 (primary -> NUMBER .)
    .               reduce using rule 90 (primary -> NUMBER .)
    ASSIGN          reduce using rule 90 (primary -> NUMBER .)
    ITERATIONS      reduce using rule 90 (primary -> NUMBER .)
    )               reduce using rule 90 (primary -> NUMBER .)
    ,               reduce using rule 90 (primary -> NUMBER .)
    TO              reduce using rule 90 (primary -> NUMBER .)
    {               reduce using rule 90 (primary -> NUMBER .)


state 54

    (91) primary -> FALSE .
    SEP             reduce using rule 91 (primary -> FALSE .)
    /               reduce using rule 91 (primary -> FALSE .)
    *               reduce using rule 91 (primary -> FALSE .)
    -               reduce using rule 91 (primary -> FALSE .)
    +               reduce using rule 91 (primary -> FALSE .)
    GREATER         reduce using rule 91 (primary -> FALSE .)
    GREATEREQ       reduce using rule 91 (primary -> FALSE .)
    LESSEQ          reduce using rule 91 (primary -> FALSE .)
    LESS            reduce using rule 91 (primary -> FALSE .)
    EQEQ            reduce using rule 91 (primary -> FALSE .)
    NOTEQ           reduce using rule 91 (primary -> FALSE .)
    AND             reduce using rule 91 (primary -> FALSE .)
    OR              reduce using rule 91 (primary -> FALSE .)
    .               reduce using rule 91 (primary -> FALSE .)
    ASSIGN          reduce using rule 91 (primary -> FALSE .)
    ITERATIONS      reduce using rule 91 (primary -> FALSE .)
    )               reduce using rule 91 (primary -> FALSE .)
    ,               reduce using rule 91 (primary -> FALSE .)
    TO              reduce using rule 91 (primary -> FALSE .)
    {               reduce using rule 91 (primary -> FALSE .)


state 55

    (92) primary -> TRUE .
    SEP             reduce using rule 92 (primary -> TRUE .)
    /               reduce using rule 92 (primary -> TRUE .)
    *               reduce using rule 92 (primary -> TRUE .)
    -               reduce using rule 92 (primary -> TRUE .)
    +               reduce using rule 92 (primary -> TRUE .)
    GREATER         reduce using rule 92 (primary -> TRUE .)
    GREATEREQ       reduce using rule 92 (primary -> TRUE .)
    LESSEQ          reduce using rule 92 (primary -> TRUE .)
    LESS            reduce using rule 92 (primary -> TRUE .)
    EQEQ            reduce using rule 92 (primary -> TRUE .)
    NOTEQ           reduce using rule 92 (primary -> TRUE .)
    AND             reduce using rule 92 (primary -> TRUE .)
    OR              reduce using rule 92 (primary -> TRUE .)
    .               reduce using rule 92 (primary -> TRUE .)
    ASSIGN          reduce using rule 92 (primary -> TRUE .)
    ITERATIONS      reduce using rule 92 (primary -> TRUE .)
    )               reduce using rule 92 (primary -> TRUE .)
    ,               reduce using rule 92 (primary -> TRUE .)
    TO              reduce using rule 92 (primary -> TRUE .)
    {               reduce using rule 92 (primary -> TRUE .)


state 56

    (13) varDecl -> LET ID : . type ASSIGN expr SEP
    (14) varDecl -> LET ID : . type SEP
    (97) type -> . BOOK_TYPE
    (98) type -> . LIST_TYPE
    (99) type -> . STRING_TYPE
    (100) type -> . BOOL_TYPE
    (101) type -> . NUMBER_TYPE
    BOOK_TYPE       shift and go to state 91
    LIST_TYPE       shift and go to state 92
    STRING_TYPE     shift and go to state 93
    BOOL_TYPE       shift and go to state 94
    NUMBER_TYPE     shift and go to state 95

    type                           shift and go to state 90

state 57

    (12) behaveDecl -> BEHAVE ID { . behaveBody }
    (21) behaveBody -> . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    behaveBody                     shift and go to state 96
    statementList                  shift and go to state 97
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 58

    (11) agentDecl -> AGENT ID { . agentBody }
    (20) agentBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    agentBody                      shift and go to state 120
    varList                        shift and go to state 121
    empty                          shift and go to state 122
    varAssign                      shift and go to state 123
    varDecl                        shift and go to state 124
    getter                         shift and go to state 15

state 59

    (10) envDecl -> ENV ID { . envBody }
    (19) envBody -> . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    envBody                        shift and go to state 125
    varList                        shift and go to state 126
    empty                          shift and go to state 122
    varAssign                      shift and go to state 123
    varDecl                        shift and go to state 124
    getter                         shift and go to state 15

state 60

    (16) envFunc -> PUT ID IN ID . AT expr , expr SEP
    AT              shift and go to state 127


state 61

    (78) dotTail -> . idTail dotTail .
    ASSIGN          reduce using rule 78 (dotTail -> . idTail dotTail .)
    .               reduce using rule 78 (dotTail -> . idTail dotTail .)
    SEP             reduce using rule 78 (dotTail -> . idTail dotTail .)
    /               reduce using rule 78 (dotTail -> . idTail dotTail .)
    *               reduce using rule 78 (dotTail -> . idTail dotTail .)
    -               reduce using rule 78 (dotTail -> . idTail dotTail .)
    +               reduce using rule 78 (dotTail -> . idTail dotTail .)
    GREATER         reduce using rule 78 (dotTail -> . idTail dotTail .)
    GREATEREQ       reduce using rule 78 (dotTail -> . idTail dotTail .)
    LESSEQ          reduce using rule 78 (dotTail -> . idTail dotTail .)
    LESS            reduce using rule 78 (dotTail -> . idTail dotTail .)
    EQEQ            reduce using rule 78 (dotTail -> . idTail dotTail .)
    NOTEQ           reduce using rule 78 (dotTail -> . idTail dotTail .)
    AND             reduce using rule 78 (dotTail -> . idTail dotTail .)
    OR              reduce using rule 78 (dotTail -> . idTail dotTail .)
    ITERATIONS      reduce using rule 78 (dotTail -> . idTail dotTail .)
    )               reduce using rule 78 (dotTail -> . idTail dotTail .)
    ,               reduce using rule 78 (dotTail -> . idTail dotTail .)
    TO              reduce using rule 78 (dotTail -> . idTail dotTail .)
    {               reduce using rule 78 (dotTail -> . idTail dotTail .)


state 62

    (82) listValueFunc -> GET expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    .               reduce using rule 82 (listValueFunc -> GET expr .)
    ASSIGN          reduce using rule 82 (listValueFunc -> GET expr .)
    SEP             reduce using rule 82 (listValueFunc -> GET expr .)
    ITERATIONS      reduce using rule 82 (listValueFunc -> GET expr .)
    )               reduce using rule 82 (listValueFunc -> GET expr .)
    ,               reduce using rule 82 (listValueFunc -> GET expr .)
    TO              reduce using rule 82 (listValueFunc -> GET expr .)
    {               reduce using rule 82 (listValueFunc -> GET expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 63

    (17) envFunc -> RUN ID WITH expr . ITERATIONS SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ITERATIONS      shift and go to state 128
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 64

    (15) varAssign -> getter ASSIGN expr SEP .
    PUT             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RUN             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESET           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    LET             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BEHAVE          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    AGENT           reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ENV             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    ID              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    $end            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    PICK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    STOP            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    RESTART         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    SELL            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    TALK            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    IN              reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    FOREACH         reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    REPEAT          reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    BUY             reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    MOVE            reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)
    }               reduce using rule 15 (varAssign -> getter ASSIGN expr SEP .)


state 65

    (61) expr -> expr / . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 129
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 66

    (62) expr -> expr * . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 130
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 67

    (63) expr -> expr - . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 131
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 68

    (64) expr -> expr + . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 132
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 69

    (65) expr -> expr GREATER . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 133
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 70

    (66) expr -> expr GREATEREQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 134
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 71

    (67) expr -> expr LESSEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 135
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 72

    (68) expr -> expr LESS . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 136
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 73

    (69) expr -> expr EQEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 137
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 74

    (70) expr -> expr NOTEQ . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 138
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 75

    (71) expr -> expr AND . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 139
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 76

    (72) expr -> expr OR . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 140
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 77

    (59) expr -> - expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 59 (expr -> - expr .)
    /               reduce using rule 59 (expr -> - expr .)
    *               reduce using rule 59 (expr -> - expr .)
    -               reduce using rule 59 (expr -> - expr .)
    +               reduce using rule 59 (expr -> - expr .)
    GREATER         reduce using rule 59 (expr -> - expr .)
    GREATEREQ       reduce using rule 59 (expr -> - expr .)
    LESSEQ          reduce using rule 59 (expr -> - expr .)
    LESS            reduce using rule 59 (expr -> - expr .)
    EQEQ            reduce using rule 59 (expr -> - expr .)
    NOTEQ           reduce using rule 59 (expr -> - expr .)
    AND             reduce using rule 59 (expr -> - expr .)
    OR              reduce using rule 59 (expr -> - expr .)
    .               reduce using rule 59 (expr -> - expr .)
    ASSIGN          reduce using rule 59 (expr -> - expr .)
    ITERATIONS      reduce using rule 59 (expr -> - expr .)
    )               reduce using rule 59 (expr -> - expr .)
    ,               reduce using rule 59 (expr -> - expr .)
    TO              reduce using rule 59 (expr -> - expr .)
    {               reduce using rule 59 (expr -> - expr .)


state 78

    (60) expr -> ! expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 60 (expr -> ! expr .)
    /               reduce using rule 60 (expr -> ! expr .)
    *               reduce using rule 60 (expr -> ! expr .)
    -               reduce using rule 60 (expr -> ! expr .)
    +               reduce using rule 60 (expr -> ! expr .)
    GREATER         reduce using rule 60 (expr -> ! expr .)
    GREATEREQ       reduce using rule 60 (expr -> ! expr .)
    LESSEQ          reduce using rule 60 (expr -> ! expr .)
    LESS            reduce using rule 60 (expr -> ! expr .)
    EQEQ            reduce using rule 60 (expr -> ! expr .)
    NOTEQ           reduce using rule 60 (expr -> ! expr .)
    AND             reduce using rule 60 (expr -> ! expr .)
    OR              reduce using rule 60 (expr -> ! expr .)
    .               reduce using rule 60 (expr -> ! expr .)
    ASSIGN          reduce using rule 60 (expr -> ! expr .)
    ITERATIONS      reduce using rule 60 (expr -> ! expr .)
    )               reduce using rule 60 (expr -> ! expr .)
    ,               reduce using rule 60 (expr -> ! expr .)
    TO              reduce using rule 60 (expr -> ! expr .)
    {               reduce using rule 60 (expr -> ! expr .)


state 79

    (73) call -> ID dotTail .
    SEP             reduce using rule 73 (call -> ID dotTail .)
    /               reduce using rule 73 (call -> ID dotTail .)
    *               reduce using rule 73 (call -> ID dotTail .)
    -               reduce using rule 73 (call -> ID dotTail .)
    +               reduce using rule 73 (call -> ID dotTail .)
    GREATER         reduce using rule 73 (call -> ID dotTail .)
    GREATEREQ       reduce using rule 73 (call -> ID dotTail .)
    LESSEQ          reduce using rule 73 (call -> ID dotTail .)
    LESS            reduce using rule 73 (call -> ID dotTail .)
    EQEQ            reduce using rule 73 (call -> ID dotTail .)
    NOTEQ           reduce using rule 73 (call -> ID dotTail .)
    AND             reduce using rule 73 (call -> ID dotTail .)
    OR              reduce using rule 73 (call -> ID dotTail .)
    .               reduce using rule 73 (call -> ID dotTail .)
    ASSIGN          reduce using rule 73 (call -> ID dotTail .)
    ITERATIONS      reduce using rule 73 (call -> ID dotTail .)
    )               reduce using rule 73 (call -> ID dotTail .)
    ,               reduce using rule 73 (call -> ID dotTail .)
    TO              reduce using rule 73 (call -> ID dotTail .)
    {               reduce using rule 73 (call -> ID dotTail .)


state 80

    (83) primitiveValue -> FIND PEERS .
    SEP             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    /               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    *               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    -               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    +               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATER         reduce using rule 83 (primitiveValue -> FIND PEERS .)
    GREATEREQ       reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESSEQ          reduce using rule 83 (primitiveValue -> FIND PEERS .)
    LESS            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    EQEQ            reduce using rule 83 (primitiveValue -> FIND PEERS .)
    NOTEQ           reduce using rule 83 (primitiveValue -> FIND PEERS .)
    AND             reduce using rule 83 (primitiveValue -> FIND PEERS .)
    OR              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    .               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ASSIGN          reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ITERATIONS      reduce using rule 83 (primitiveValue -> FIND PEERS .)
    )               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    ,               reduce using rule 83 (primitiveValue -> FIND PEERS .)
    TO              reduce using rule 83 (primitiveValue -> FIND PEERS .)
    {               reduce using rule 83 (primitiveValue -> FIND PEERS .)


state 81

    (84) primitiveValue -> FIND OBJECTS .
    SEP             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    /               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    *               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    -               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    +               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATER         reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    GREATEREQ       reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESSEQ          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    LESS            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    EQEQ            reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    NOTEQ           reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    AND             reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    OR              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    .               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ASSIGN          reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ITERATIONS      reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    )               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    ,               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    TO              reduce using rule 84 (primitiveValue -> FIND OBJECTS .)
    {               reduce using rule 84 (primitiveValue -> FIND OBJECTS .)


state 82

    (85) primitiveValue -> RANDOM FROM . expr TO expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 141
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 83

    (86) primary -> ( expr . )
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    )               shift and go to state 142
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 84

    (87) primary -> { bookItems . }
    }               shift and go to state 143


state 85

    (95) bookItems -> empty .
    }               reduce using rule 95 (bookItems -> empty .)


state 86

    (96) bookItems -> STRING . : ( listItems ) , bookItems
    :               shift and go to state 144


state 87

    (88) primary -> [ listItems . ]
    ]               shift and go to state 145


state 88

    (93) listItems -> empty .
    ]               reduce using rule 93 (listItems -> empty .)
    )               reduce using rule 93 (listItems -> empty .)


state 89

    (94) listItems -> expr . , listItems
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 146
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 90

    (13) varDecl -> LET ID : type . ASSIGN expr SEP
    (14) varDecl -> LET ID : type . SEP
    ASSIGN          shift and go to state 147
    SEP             shift and go to state 148


state 91

    (97) type -> BOOK_TYPE .
    ASSIGN          reduce using rule 97 (type -> BOOK_TYPE .)
    SEP             reduce using rule 97 (type -> BOOK_TYPE .)


state 92

    (98) type -> LIST_TYPE .
    ASSIGN          reduce using rule 98 (type -> LIST_TYPE .)
    SEP             reduce using rule 98 (type -> LIST_TYPE .)


state 93

    (99) type -> STRING_TYPE .
    ASSIGN          reduce using rule 99 (type -> STRING_TYPE .)
    SEP             reduce using rule 99 (type -> STRING_TYPE .)


state 94

    (100) type -> BOOL_TYPE .
    ASSIGN          reduce using rule 100 (type -> BOOL_TYPE .)
    SEP             reduce using rule 100 (type -> BOOL_TYPE .)


state 95

    (101) type -> NUMBER_TYPE .
    ASSIGN          reduce using rule 101 (type -> NUMBER_TYPE .)
    SEP             reduce using rule 101 (type -> NUMBER_TYPE .)


state 96

    (12) behaveDecl -> BEHAVE ID { behaveBody . }
    }               shift and go to state 149


state 97

    (21) behaveBody -> statementList .
    }               reduce using rule 21 (behaveBody -> statementList .)


state 98

    (25) statementList -> empty .
    }               reduce using rule 25 (statementList -> empty .)


state 99

    (26) statementList -> statement . statementList
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statement                      shift and go to state 99
    statementList                  shift and go to state 150
    empty                          shift and go to state 98
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 100

    (27) statement -> primFuncStmt .
    PUT             reduce using rule 27 (statement -> primFuncStmt .)
    PICK            reduce using rule 27 (statement -> primFuncStmt .)
    STOP            reduce using rule 27 (statement -> primFuncStmt .)
    RESTART         reduce using rule 27 (statement -> primFuncStmt .)
    SELL            reduce using rule 27 (statement -> primFuncStmt .)
    TALK            reduce using rule 27 (statement -> primFuncStmt .)
    IN              reduce using rule 27 (statement -> primFuncStmt .)
    FOREACH         reduce using rule 27 (statement -> primFuncStmt .)
    REPEAT          reduce using rule 27 (statement -> primFuncStmt .)
    LET             reduce using rule 27 (statement -> primFuncStmt .)
    ID              reduce using rule 27 (statement -> primFuncStmt .)
    BUY             reduce using rule 27 (statement -> primFuncStmt .)
    MOVE            reduce using rule 27 (statement -> primFuncStmt .)
    }               reduce using rule 27 (statement -> primFuncStmt .)


state 101

    (28) statement -> incaseStmt .
    PUT             reduce using rule 28 (statement -> incaseStmt .)
    PICK            reduce using rule 28 (statement -> incaseStmt .)
    STOP            reduce using rule 28 (statement -> incaseStmt .)
    RESTART         reduce using rule 28 (statement -> incaseStmt .)
    SELL            reduce using rule 28 (statement -> incaseStmt .)
    TALK            reduce using rule 28 (statement -> incaseStmt .)
    IN              reduce using rule 28 (statement -> incaseStmt .)
    FOREACH         reduce using rule 28 (statement -> incaseStmt .)
    REPEAT          reduce using rule 28 (statement -> incaseStmt .)
    LET             reduce using rule 28 (statement -> incaseStmt .)
    ID              reduce using rule 28 (statement -> incaseStmt .)
    BUY             reduce using rule 28 (statement -> incaseStmt .)
    MOVE            reduce using rule 28 (statement -> incaseStmt .)
    }               reduce using rule 28 (statement -> incaseStmt .)


state 102

    (29) statement -> foreachStmt .
    PUT             reduce using rule 29 (statement -> foreachStmt .)
    PICK            reduce using rule 29 (statement -> foreachStmt .)
    STOP            reduce using rule 29 (statement -> foreachStmt .)
    RESTART         reduce using rule 29 (statement -> foreachStmt .)
    SELL            reduce using rule 29 (statement -> foreachStmt .)
    TALK            reduce using rule 29 (statement -> foreachStmt .)
    IN              reduce using rule 29 (statement -> foreachStmt .)
    FOREACH         reduce using rule 29 (statement -> foreachStmt .)
    REPEAT          reduce using rule 29 (statement -> foreachStmt .)
    LET             reduce using rule 29 (statement -> foreachStmt .)
    ID              reduce using rule 29 (statement -> foreachStmt .)
    BUY             reduce using rule 29 (statement -> foreachStmt .)
    MOVE            reduce using rule 29 (statement -> foreachStmt .)
    }               reduce using rule 29 (statement -> foreachStmt .)


state 103

    (30) statement -> repeatStmt .
    PUT             reduce using rule 30 (statement -> repeatStmt .)
    PICK            reduce using rule 30 (statement -> repeatStmt .)
    STOP            reduce using rule 30 (statement -> repeatStmt .)
    RESTART         reduce using rule 30 (statement -> repeatStmt .)
    SELL            reduce using rule 30 (statement -> repeatStmt .)
    TALK            reduce using rule 30 (statement -> repeatStmt .)
    IN              reduce using rule 30 (statement -> repeatStmt .)
    FOREACH         reduce using rule 30 (statement -> repeatStmt .)
    REPEAT          reduce using rule 30 (statement -> repeatStmt .)
    LET             reduce using rule 30 (statement -> repeatStmt .)
    ID              reduce using rule 30 (statement -> repeatStmt .)
    BUY             reduce using rule 30 (statement -> repeatStmt .)
    MOVE            reduce using rule 30 (statement -> repeatStmt .)
    }               reduce using rule 30 (statement -> repeatStmt .)


state 104

    (31) statement -> varAssign .
    PUT             reduce using rule 31 (statement -> varAssign .)
    PICK            reduce using rule 31 (statement -> varAssign .)
    STOP            reduce using rule 31 (statement -> varAssign .)
    RESTART         reduce using rule 31 (statement -> varAssign .)
    SELL            reduce using rule 31 (statement -> varAssign .)
    TALK            reduce using rule 31 (statement -> varAssign .)
    IN              reduce using rule 31 (statement -> varAssign .)
    FOREACH         reduce using rule 31 (statement -> varAssign .)
    REPEAT          reduce using rule 31 (statement -> varAssign .)
    LET             reduce using rule 31 (statement -> varAssign .)
    ID              reduce using rule 31 (statement -> varAssign .)
    BUY             reduce using rule 31 (statement -> varAssign .)
    MOVE            reduce using rule 31 (statement -> varAssign .)
    }               reduce using rule 31 (statement -> varAssign .)


state 105

    (32) statement -> varDecl .
    PUT             reduce using rule 32 (statement -> varDecl .)
    PICK            reduce using rule 32 (statement -> varDecl .)
    STOP            reduce using rule 32 (statement -> varDecl .)
    RESTART         reduce using rule 32 (statement -> varDecl .)
    SELL            reduce using rule 32 (statement -> varDecl .)
    TALK            reduce using rule 32 (statement -> varDecl .)
    IN              reduce using rule 32 (statement -> varDecl .)
    FOREACH         reduce using rule 32 (statement -> varDecl .)
    REPEAT          reduce using rule 32 (statement -> varDecl .)
    LET             reduce using rule 32 (statement -> varDecl .)
    ID              reduce using rule 32 (statement -> varDecl .)
    BUY             reduce using rule 32 (statement -> varDecl .)
    MOVE            reduce using rule 32 (statement -> varDecl .)
    }               reduce using rule 32 (statement -> varDecl .)


state 106

    (39) primFuncStmt -> getter . . listVoidFunc SEP
    (15) varAssign -> getter . ASSIGN expr SEP
    .               shift and go to state 151
    ASSIGN          shift and go to state 27


state 107

    (40) primFuncStmt -> PUT . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 152
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 108

    (41) primFuncStmt -> PICK . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 153
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 109

    (42) primFuncStmt -> STOP . SEP
    SEP             shift and go to state 154


state 110

    (43) primFuncStmt -> RESTART . BEHAVE SEP
    BEHAVE          shift and go to state 155


state 111

    (44) primFuncStmt -> SELL . expr , expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 156
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 112

    (45) primFuncStmt -> buyStmt . SEP
    SEP             shift and go to state 157


state 113

    (46) primFuncStmt -> moveStmt . SEP
    SEP             shift and go to state 158


state 114

    (47) primFuncStmt -> TALK . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 159
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 115

    (35) incaseStmt -> IN . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 160


state 116

    (34) foreachStmt -> FOREACH . ID IN expr { statementList }
    ID              shift and go to state 161


state 117

    (33) repeatStmt -> REPEAT . WHEN expr { statementList }
    WHEN            shift and go to state 162


state 118

    (56) buyStmt -> BUY . expr
    (57) buyStmt -> BUY . expr , expr , expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 163
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 119

    (51) moveStmt -> MOVE . RIGHT
    (52) moveStmt -> MOVE . LEFT
    (53) moveStmt -> MOVE . DOWN
    (54) moveStmt -> MOVE . UP
    (55) moveStmt -> MOVE . expr , expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    RIGHT           shift and go to state 164
    LEFT            shift and go to state 165
    DOWN            shift and go to state 166
    UP              shift and go to state 167
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 168
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 120

    (11) agentDecl -> AGENT ID { agentBody . }
    }               shift and go to state 169


state 121

    (20) agentBody -> varList .
    }               reduce using rule 20 (agentBody -> varList .)


state 122

    (22) varList -> empty .
    }               reduce using rule 22 (varList -> empty .)


state 123

    (23) varList -> varAssign . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varAssign                      shift and go to state 123
    varList                        shift and go to state 170
    empty                          shift and go to state 122
    varDecl                        shift and go to state 124
    getter                         shift and go to state 15

state 124

    (24) varList -> varDecl . varList
    (22) varList -> . empty
    (23) varList -> . varAssign varList
    (24) varList -> . varDecl varList
    (102) empty -> .
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    }               reduce using rule 102 (empty -> .)
    LET             shift and go to state 16
    ID              shift and go to state 12

    varDecl                        shift and go to state 124
    varList                        shift and go to state 171
    empty                          shift and go to state 122
    varAssign                      shift and go to state 123
    getter                         shift and go to state 15

state 125

    (10) envDecl -> ENV ID { envBody . }
    }               shift and go to state 172


state 126

    (19) envBody -> varList .
    }               reduce using rule 19 (envBody -> varList .)


state 127

    (16) envFunc -> PUT ID IN ID AT . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 173
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 128

    (17) envFunc -> RUN ID WITH expr ITERATIONS . SEP
    SEP             shift and go to state 174


state 129

    (61) expr -> expr / expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 61 (expr -> expr / expr .)
    /               reduce using rule 61 (expr -> expr / expr .)
    *               reduce using rule 61 (expr -> expr / expr .)
    -               reduce using rule 61 (expr -> expr / expr .)
    +               reduce using rule 61 (expr -> expr / expr .)
    GREATER         reduce using rule 61 (expr -> expr / expr .)
    GREATEREQ       reduce using rule 61 (expr -> expr / expr .)
    LESSEQ          reduce using rule 61 (expr -> expr / expr .)
    LESS            reduce using rule 61 (expr -> expr / expr .)
    EQEQ            reduce using rule 61 (expr -> expr / expr .)
    NOTEQ           reduce using rule 61 (expr -> expr / expr .)
    AND             reduce using rule 61 (expr -> expr / expr .)
    OR              reduce using rule 61 (expr -> expr / expr .)
    .               reduce using rule 61 (expr -> expr / expr .)
    ASSIGN          reduce using rule 61 (expr -> expr / expr .)
    ITERATIONS      reduce using rule 61 (expr -> expr / expr .)
    )               reduce using rule 61 (expr -> expr / expr .)
    ,               reduce using rule 61 (expr -> expr / expr .)
    TO              reduce using rule 61 (expr -> expr / expr .)
    {               reduce using rule 61 (expr -> expr / expr .)


state 130

    (62) expr -> expr * expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 62 (expr -> expr * expr .)
    /               reduce using rule 62 (expr -> expr * expr .)
    *               reduce using rule 62 (expr -> expr * expr .)
    -               reduce using rule 62 (expr -> expr * expr .)
    +               reduce using rule 62 (expr -> expr * expr .)
    GREATER         reduce using rule 62 (expr -> expr * expr .)
    GREATEREQ       reduce using rule 62 (expr -> expr * expr .)
    LESSEQ          reduce using rule 62 (expr -> expr * expr .)
    LESS            reduce using rule 62 (expr -> expr * expr .)
    EQEQ            reduce using rule 62 (expr -> expr * expr .)
    NOTEQ           reduce using rule 62 (expr -> expr * expr .)
    AND             reduce using rule 62 (expr -> expr * expr .)
    OR              reduce using rule 62 (expr -> expr * expr .)
    .               reduce using rule 62 (expr -> expr * expr .)
    ASSIGN          reduce using rule 62 (expr -> expr * expr .)
    ITERATIONS      reduce using rule 62 (expr -> expr * expr .)
    )               reduce using rule 62 (expr -> expr * expr .)
    ,               reduce using rule 62 (expr -> expr * expr .)
    TO              reduce using rule 62 (expr -> expr * expr .)
    {               reduce using rule 62 (expr -> expr * expr .)


state 131

    (63) expr -> expr - expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 63 (expr -> expr - expr .)
    -               reduce using rule 63 (expr -> expr - expr .)
    +               reduce using rule 63 (expr -> expr - expr .)
    GREATER         reduce using rule 63 (expr -> expr - expr .)
    GREATEREQ       reduce using rule 63 (expr -> expr - expr .)
    LESSEQ          reduce using rule 63 (expr -> expr - expr .)
    LESS            reduce using rule 63 (expr -> expr - expr .)
    EQEQ            reduce using rule 63 (expr -> expr - expr .)
    NOTEQ           reduce using rule 63 (expr -> expr - expr .)
    AND             reduce using rule 63 (expr -> expr - expr .)
    OR              reduce using rule 63 (expr -> expr - expr .)
    .               reduce using rule 63 (expr -> expr - expr .)
    ASSIGN          reduce using rule 63 (expr -> expr - expr .)
    ITERATIONS      reduce using rule 63 (expr -> expr - expr .)
    )               reduce using rule 63 (expr -> expr - expr .)
    ,               reduce using rule 63 (expr -> expr - expr .)
    TO              reduce using rule 63 (expr -> expr - expr .)
    {               reduce using rule 63 (expr -> expr - expr .)
    /               shift and go to state 65
    *               shift and go to state 66


state 132

    (64) expr -> expr + expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 64 (expr -> expr + expr .)
    -               reduce using rule 64 (expr -> expr + expr .)
    +               reduce using rule 64 (expr -> expr + expr .)
    GREATER         reduce using rule 64 (expr -> expr + expr .)
    GREATEREQ       reduce using rule 64 (expr -> expr + expr .)
    LESSEQ          reduce using rule 64 (expr -> expr + expr .)
    LESS            reduce using rule 64 (expr -> expr + expr .)
    EQEQ            reduce using rule 64 (expr -> expr + expr .)
    NOTEQ           reduce using rule 64 (expr -> expr + expr .)
    AND             reduce using rule 64 (expr -> expr + expr .)
    OR              reduce using rule 64 (expr -> expr + expr .)
    .               reduce using rule 64 (expr -> expr + expr .)
    ASSIGN          reduce using rule 64 (expr -> expr + expr .)
    ITERATIONS      reduce using rule 64 (expr -> expr + expr .)
    )               reduce using rule 64 (expr -> expr + expr .)
    ,               reduce using rule 64 (expr -> expr + expr .)
    TO              reduce using rule 64 (expr -> expr + expr .)
    {               reduce using rule 64 (expr -> expr + expr .)
    /               shift and go to state 65
    *               shift and go to state 66


state 133

    (65) expr -> expr GREATER expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 65 (expr -> expr GREATER expr .)
    GREATER         reduce using rule 65 (expr -> expr GREATER expr .)
    GREATEREQ       reduce using rule 65 (expr -> expr GREATER expr .)
    LESSEQ          reduce using rule 65 (expr -> expr GREATER expr .)
    LESS            reduce using rule 65 (expr -> expr GREATER expr .)
    EQEQ            reduce using rule 65 (expr -> expr GREATER expr .)
    NOTEQ           reduce using rule 65 (expr -> expr GREATER expr .)
    AND             reduce using rule 65 (expr -> expr GREATER expr .)
    OR              reduce using rule 65 (expr -> expr GREATER expr .)
    .               reduce using rule 65 (expr -> expr GREATER expr .)
    ASSIGN          reduce using rule 65 (expr -> expr GREATER expr .)
    ITERATIONS      reduce using rule 65 (expr -> expr GREATER expr .)
    )               reduce using rule 65 (expr -> expr GREATER expr .)
    ,               reduce using rule 65 (expr -> expr GREATER expr .)
    TO              reduce using rule 65 (expr -> expr GREATER expr .)
    {               reduce using rule 65 (expr -> expr GREATER expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 134

    (66) expr -> expr GREATEREQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 66 (expr -> expr GREATEREQ expr .)
    GREATER         reduce using rule 66 (expr -> expr GREATEREQ expr .)
    GREATEREQ       reduce using rule 66 (expr -> expr GREATEREQ expr .)
    LESSEQ          reduce using rule 66 (expr -> expr GREATEREQ expr .)
    LESS            reduce using rule 66 (expr -> expr GREATEREQ expr .)
    EQEQ            reduce using rule 66 (expr -> expr GREATEREQ expr .)
    NOTEQ           reduce using rule 66 (expr -> expr GREATEREQ expr .)
    AND             reduce using rule 66 (expr -> expr GREATEREQ expr .)
    OR              reduce using rule 66 (expr -> expr GREATEREQ expr .)
    .               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    ASSIGN          reduce using rule 66 (expr -> expr GREATEREQ expr .)
    ITERATIONS      reduce using rule 66 (expr -> expr GREATEREQ expr .)
    )               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    ,               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    TO              reduce using rule 66 (expr -> expr GREATEREQ expr .)
    {               reduce using rule 66 (expr -> expr GREATEREQ expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 135

    (67) expr -> expr LESSEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 67 (expr -> expr LESSEQ expr .)
    GREATER         reduce using rule 67 (expr -> expr LESSEQ expr .)
    GREATEREQ       reduce using rule 67 (expr -> expr LESSEQ expr .)
    LESSEQ          reduce using rule 67 (expr -> expr LESSEQ expr .)
    LESS            reduce using rule 67 (expr -> expr LESSEQ expr .)
    EQEQ            reduce using rule 67 (expr -> expr LESSEQ expr .)
    NOTEQ           reduce using rule 67 (expr -> expr LESSEQ expr .)
    AND             reduce using rule 67 (expr -> expr LESSEQ expr .)
    OR              reduce using rule 67 (expr -> expr LESSEQ expr .)
    .               reduce using rule 67 (expr -> expr LESSEQ expr .)
    ASSIGN          reduce using rule 67 (expr -> expr LESSEQ expr .)
    ITERATIONS      reduce using rule 67 (expr -> expr LESSEQ expr .)
    )               reduce using rule 67 (expr -> expr LESSEQ expr .)
    ,               reduce using rule 67 (expr -> expr LESSEQ expr .)
    TO              reduce using rule 67 (expr -> expr LESSEQ expr .)
    {               reduce using rule 67 (expr -> expr LESSEQ expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 136

    (68) expr -> expr LESS expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 68 (expr -> expr LESS expr .)
    GREATER         reduce using rule 68 (expr -> expr LESS expr .)
    GREATEREQ       reduce using rule 68 (expr -> expr LESS expr .)
    LESSEQ          reduce using rule 68 (expr -> expr LESS expr .)
    LESS            reduce using rule 68 (expr -> expr LESS expr .)
    EQEQ            reduce using rule 68 (expr -> expr LESS expr .)
    NOTEQ           reduce using rule 68 (expr -> expr LESS expr .)
    AND             reduce using rule 68 (expr -> expr LESS expr .)
    OR              reduce using rule 68 (expr -> expr LESS expr .)
    .               reduce using rule 68 (expr -> expr LESS expr .)
    ASSIGN          reduce using rule 68 (expr -> expr LESS expr .)
    ITERATIONS      reduce using rule 68 (expr -> expr LESS expr .)
    )               reduce using rule 68 (expr -> expr LESS expr .)
    ,               reduce using rule 68 (expr -> expr LESS expr .)
    TO              reduce using rule 68 (expr -> expr LESS expr .)
    {               reduce using rule 68 (expr -> expr LESS expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68


state 137

    (69) expr -> expr EQEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 69 (expr -> expr EQEQ expr .)
    EQEQ            reduce using rule 69 (expr -> expr EQEQ expr .)
    NOTEQ           reduce using rule 69 (expr -> expr EQEQ expr .)
    AND             reduce using rule 69 (expr -> expr EQEQ expr .)
    OR              reduce using rule 69 (expr -> expr EQEQ expr .)
    .               reduce using rule 69 (expr -> expr EQEQ expr .)
    ASSIGN          reduce using rule 69 (expr -> expr EQEQ expr .)
    ITERATIONS      reduce using rule 69 (expr -> expr EQEQ expr .)
    )               reduce using rule 69 (expr -> expr EQEQ expr .)
    ,               reduce using rule 69 (expr -> expr EQEQ expr .)
    TO              reduce using rule 69 (expr -> expr EQEQ expr .)
    {               reduce using rule 69 (expr -> expr EQEQ expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72


state 138

    (70) expr -> expr NOTEQ expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 70 (expr -> expr NOTEQ expr .)
    EQEQ            reduce using rule 70 (expr -> expr NOTEQ expr .)
    NOTEQ           reduce using rule 70 (expr -> expr NOTEQ expr .)
    AND             reduce using rule 70 (expr -> expr NOTEQ expr .)
    OR              reduce using rule 70 (expr -> expr NOTEQ expr .)
    .               reduce using rule 70 (expr -> expr NOTEQ expr .)
    ASSIGN          reduce using rule 70 (expr -> expr NOTEQ expr .)
    ITERATIONS      reduce using rule 70 (expr -> expr NOTEQ expr .)
    )               reduce using rule 70 (expr -> expr NOTEQ expr .)
    ,               reduce using rule 70 (expr -> expr NOTEQ expr .)
    TO              reduce using rule 70 (expr -> expr NOTEQ expr .)
    {               reduce using rule 70 (expr -> expr NOTEQ expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72


state 139

    (71) expr -> expr AND expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 71 (expr -> expr AND expr .)
    AND             reduce using rule 71 (expr -> expr AND expr .)
    OR              reduce using rule 71 (expr -> expr AND expr .)
    .               reduce using rule 71 (expr -> expr AND expr .)
    ASSIGN          reduce using rule 71 (expr -> expr AND expr .)
    ITERATIONS      reduce using rule 71 (expr -> expr AND expr .)
    )               reduce using rule 71 (expr -> expr AND expr .)
    ,               reduce using rule 71 (expr -> expr AND expr .)
    TO              reduce using rule 71 (expr -> expr AND expr .)
    {               reduce using rule 71 (expr -> expr AND expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74


state 140

    (72) expr -> expr OR expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 72 (expr -> expr OR expr .)
    OR              reduce using rule 72 (expr -> expr OR expr .)
    .               reduce using rule 72 (expr -> expr OR expr .)
    ASSIGN          reduce using rule 72 (expr -> expr OR expr .)
    ITERATIONS      reduce using rule 72 (expr -> expr OR expr .)
    )               reduce using rule 72 (expr -> expr OR expr .)
    ,               reduce using rule 72 (expr -> expr OR expr .)
    TO              reduce using rule 72 (expr -> expr OR expr .)
    {               reduce using rule 72 (expr -> expr OR expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75


state 141

    (85) primitiveValue -> RANDOM FROM expr . TO expr
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    TO              shift and go to state 175
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 142

    (86) primary -> ( expr ) .
    SEP             reduce using rule 86 (primary -> ( expr ) .)
    /               reduce using rule 86 (primary -> ( expr ) .)
    *               reduce using rule 86 (primary -> ( expr ) .)
    -               reduce using rule 86 (primary -> ( expr ) .)
    +               reduce using rule 86 (primary -> ( expr ) .)
    GREATER         reduce using rule 86 (primary -> ( expr ) .)
    GREATEREQ       reduce using rule 86 (primary -> ( expr ) .)
    LESSEQ          reduce using rule 86 (primary -> ( expr ) .)
    LESS            reduce using rule 86 (primary -> ( expr ) .)
    EQEQ            reduce using rule 86 (primary -> ( expr ) .)
    NOTEQ           reduce using rule 86 (primary -> ( expr ) .)
    AND             reduce using rule 86 (primary -> ( expr ) .)
    OR              reduce using rule 86 (primary -> ( expr ) .)
    .               reduce using rule 86 (primary -> ( expr ) .)
    ASSIGN          reduce using rule 86 (primary -> ( expr ) .)
    ITERATIONS      reduce using rule 86 (primary -> ( expr ) .)
    )               reduce using rule 86 (primary -> ( expr ) .)
    ,               reduce using rule 86 (primary -> ( expr ) .)
    TO              reduce using rule 86 (primary -> ( expr ) .)
    {               reduce using rule 86 (primary -> ( expr ) .)


state 143

    (87) primary -> { bookItems } .
    SEP             reduce using rule 87 (primary -> { bookItems } .)
    /               reduce using rule 87 (primary -> { bookItems } .)
    *               reduce using rule 87 (primary -> { bookItems } .)
    -               reduce using rule 87 (primary -> { bookItems } .)
    +               reduce using rule 87 (primary -> { bookItems } .)
    GREATER         reduce using rule 87 (primary -> { bookItems } .)
    GREATEREQ       reduce using rule 87 (primary -> { bookItems } .)
    LESSEQ          reduce using rule 87 (primary -> { bookItems } .)
    LESS            reduce using rule 87 (primary -> { bookItems } .)
    EQEQ            reduce using rule 87 (primary -> { bookItems } .)
    NOTEQ           reduce using rule 87 (primary -> { bookItems } .)
    AND             reduce using rule 87 (primary -> { bookItems } .)
    OR              reduce using rule 87 (primary -> { bookItems } .)
    .               reduce using rule 87 (primary -> { bookItems } .)
    ASSIGN          reduce using rule 87 (primary -> { bookItems } .)
    ITERATIONS      reduce using rule 87 (primary -> { bookItems } .)
    )               reduce using rule 87 (primary -> { bookItems } .)
    ,               reduce using rule 87 (primary -> { bookItems } .)
    TO              reduce using rule 87 (primary -> { bookItems } .)
    {               reduce using rule 87 (primary -> { bookItems } .)


state 144

    (96) bookItems -> STRING : . ( listItems ) , bookItems
    (               shift and go to state 176


state 145

    (88) primary -> [ listItems ] .
    SEP             reduce using rule 88 (primary -> [ listItems ] .)
    /               reduce using rule 88 (primary -> [ listItems ] .)
    *               reduce using rule 88 (primary -> [ listItems ] .)
    -               reduce using rule 88 (primary -> [ listItems ] .)
    +               reduce using rule 88 (primary -> [ listItems ] .)
    GREATER         reduce using rule 88 (primary -> [ listItems ] .)
    GREATEREQ       reduce using rule 88 (primary -> [ listItems ] .)
    LESSEQ          reduce using rule 88 (primary -> [ listItems ] .)
    LESS            reduce using rule 88 (primary -> [ listItems ] .)
    EQEQ            reduce using rule 88 (primary -> [ listItems ] .)
    NOTEQ           reduce using rule 88 (primary -> [ listItems ] .)
    AND             reduce using rule 88 (primary -> [ listItems ] .)
    OR              reduce using rule 88 (primary -> [ listItems ] .)
    .               reduce using rule 88 (primary -> [ listItems ] .)
    ASSIGN          reduce using rule 88 (primary -> [ listItems ] .)
    ITERATIONS      reduce using rule 88 (primary -> [ listItems ] .)
    )               reduce using rule 88 (primary -> [ listItems ] .)
    ,               reduce using rule 88 (primary -> [ listItems ] .)
    TO              reduce using rule 88 (primary -> [ listItems ] .)
    {               reduce using rule 88 (primary -> [ listItems ] .)


state 146

    (94) listItems -> expr , . listItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    ]               reduce using rule 102 (empty -> .)
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 89
    listItems                      shift and go to state 177
    empty                          shift and go to state 88
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 147

    (13) varDecl -> LET ID : type ASSIGN . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 178
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 148

    (14) varDecl -> LET ID : type SEP .
    PUT             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RUN             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESET           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    LET             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BEHAVE          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    AGENT           reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ENV             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    ID              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    $end            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    PICK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    STOP            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    RESTART         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    SELL            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    TALK            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    IN              reduce using rule 14 (varDecl -> LET ID : type SEP .)
    FOREACH         reduce using rule 14 (varDecl -> LET ID : type SEP .)
    REPEAT          reduce using rule 14 (varDecl -> LET ID : type SEP .)
    BUY             reduce using rule 14 (varDecl -> LET ID : type SEP .)
    MOVE            reduce using rule 14 (varDecl -> LET ID : type SEP .)
    }               reduce using rule 14 (varDecl -> LET ID : type SEP .)


state 149

    (12) behaveDecl -> BEHAVE ID { behaveBody } .
    PUT             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RUN             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    RESET           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    LET             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    BEHAVE          reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    AGENT           reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ENV             reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    ID              reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)
    $end            reduce using rule 12 (behaveDecl -> BEHAVE ID { behaveBody } .)


state 150

    (26) statementList -> statement statementList .
    }               reduce using rule 26 (statementList -> statement statementList .)


state 151

    (39) primFuncStmt -> getter . . listVoidFunc SEP
    (48) listVoidFunc -> . REVERSE
    (49) listVoidFunc -> . POP
    (50) listVoidFunc -> . PUSH expr
    REVERSE         shift and go to state 180
    POP             shift and go to state 181
    PUSH            shift and go to state 182

    listVoidFunc                   shift and go to state 179

state 152

    (40) primFuncStmt -> PUT expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 183
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 153

    (41) primFuncStmt -> PICK expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 184
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 154

    (42) primFuncStmt -> STOP SEP .
    PUT             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    PICK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    STOP            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    RESTART         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    SELL            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    TALK            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    IN              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    FOREACH         reduce using rule 42 (primFuncStmt -> STOP SEP .)
    REPEAT          reduce using rule 42 (primFuncStmt -> STOP SEP .)
    LET             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    ID              reduce using rule 42 (primFuncStmt -> STOP SEP .)
    BUY             reduce using rule 42 (primFuncStmt -> STOP SEP .)
    MOVE            reduce using rule 42 (primFuncStmt -> STOP SEP .)
    }               reduce using rule 42 (primFuncStmt -> STOP SEP .)


state 155

    (43) primFuncStmt -> RESTART BEHAVE . SEP
    SEP             shift and go to state 185


state 156

    (44) primFuncStmt -> SELL expr . , expr , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 186
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 157

    (45) primFuncStmt -> buyStmt SEP .
    PUT             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    PICK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    STOP            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    RESTART         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    SELL            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    TALK            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    IN              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    FOREACH         reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    REPEAT          reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    LET             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    ID              reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    BUY             reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    MOVE            reduce using rule 45 (primFuncStmt -> buyStmt SEP .)
    }               reduce using rule 45 (primFuncStmt -> buyStmt SEP .)


state 158

    (46) primFuncStmt -> moveStmt SEP .
    PUT             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    PICK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    STOP            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    RESTART         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    SELL            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    TALK            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    IN              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    FOREACH         reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    REPEAT          reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    LET             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    ID              reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    BUY             reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    MOVE            reduce using rule 46 (primFuncStmt -> moveStmt SEP .)
    }               reduce using rule 46 (primFuncStmt -> moveStmt SEP .)


state 159

    (47) primFuncStmt -> TALK expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 187
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 160

    (35) incaseStmt -> IN CASE . expr { statementList } inothercaseStmt
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 188
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 161

    (34) foreachStmt -> FOREACH ID . IN expr { statementList }
    IN              shift and go to state 189


state 162

    (33) repeatStmt -> REPEAT WHEN . expr { statementList }
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 190
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 163

    (56) buyStmt -> BUY expr .
    (57) buyStmt -> BUY expr . , expr , expr
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 56 (buyStmt -> BUY expr .)
    ,               shift and go to state 191
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 164

    (51) moveStmt -> MOVE RIGHT .
    SEP             reduce using rule 51 (moveStmt -> MOVE RIGHT .)


state 165

    (52) moveStmt -> MOVE LEFT .
    SEP             reduce using rule 52 (moveStmt -> MOVE LEFT .)


state 166

    (53) moveStmt -> MOVE DOWN .
    SEP             reduce using rule 53 (moveStmt -> MOVE DOWN .)


state 167

    (54) moveStmt -> MOVE UP .
    SEP             reduce using rule 54 (moveStmt -> MOVE UP .)


state 168

    (55) moveStmt -> MOVE expr . , expr
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 192
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 169

    (11) agentDecl -> AGENT ID { agentBody } .
    PUT             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RUN             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    RESET           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    LET             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    BEHAVE          reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    AGENT           reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ENV             reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    ID              reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)
    $end            reduce using rule 11 (agentDecl -> AGENT ID { agentBody } .)


state 170

    (23) varList -> varAssign varList .
    }               reduce using rule 23 (varList -> varAssign varList .)


state 171

    (24) varList -> varDecl varList .
    }               reduce using rule 24 (varList -> varDecl varList .)


state 172

    (10) envDecl -> ENV ID { envBody } .
    PUT             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RUN             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    RESET           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    LET             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    BEHAVE          reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    AGENT           reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ENV             reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    ID              reduce using rule 10 (envDecl -> ENV ID { envBody } .)
    $end            reduce using rule 10 (envDecl -> ENV ID { envBody } .)


state 173

    (16) envFunc -> PUT ID IN ID AT expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 193
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 174

    (17) envFunc -> RUN ID WITH expr ITERATIONS SEP .
    PUT             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RUN             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    RESET           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    LET             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    BEHAVE          reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    AGENT           reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ENV             reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    ID              reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)
    $end            reduce using rule 17 (envFunc -> RUN ID WITH expr ITERATIONS SEP .)


state 175

    (85) primitiveValue -> RANDOM FROM expr TO . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 194
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 176

    (96) bookItems -> STRING : ( . listItems ) , bookItems
    (93) listItems -> . empty
    (94) listItems -> . expr , listItems
    (102) empty -> .
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    )               reduce using rule 102 (empty -> .)
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    listItems                      shift and go to state 195
    empty                          shift and go to state 88
    expr                           shift and go to state 89
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 177

    (94) listItems -> expr , listItems .
    ]               reduce using rule 94 (listItems -> expr , listItems .)
    )               reduce using rule 94 (listItems -> expr , listItems .)


state 178

    (13) varDecl -> LET ID : type ASSIGN expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 196
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 179

    (39) primFuncStmt -> getter . listVoidFunc . SEP
    SEP             shift and go to state 197


state 180

    (48) listVoidFunc -> REVERSE .
    SEP             reduce using rule 48 (listVoidFunc -> REVERSE .)


state 181

    (49) listVoidFunc -> POP .
    SEP             reduce using rule 49 (listVoidFunc -> POP .)


state 182

    (50) listVoidFunc -> PUSH . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 198
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 183

    (40) primFuncStmt -> PUT expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 199
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 184

    (41) primFuncStmt -> PICK expr SEP .
    PUT             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    PICK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    STOP            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    RESTART         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    SELL            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    TALK            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    IN              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    FOREACH         reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    REPEAT          reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    LET             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    ID              reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    BUY             reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    MOVE            reduce using rule 41 (primFuncStmt -> PICK expr SEP .)
    }               reduce using rule 41 (primFuncStmt -> PICK expr SEP .)


state 185

    (43) primFuncStmt -> RESTART BEHAVE SEP .
    PUT             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    PICK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    STOP            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    RESTART         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    SELL            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    TALK            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    IN              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    FOREACH         reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    REPEAT          reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    LET             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    ID              reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    BUY             reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    MOVE            reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)
    }               reduce using rule 43 (primFuncStmt -> RESTART BEHAVE SEP .)


state 186

    (44) primFuncStmt -> SELL expr , . expr , expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 200
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 187

    (47) primFuncStmt -> TALK expr SEP .
    PUT             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    PICK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    STOP            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    RESTART         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    SELL            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    TALK            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    IN              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    FOREACH         reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    REPEAT          reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    LET             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    ID              reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    BUY             reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    MOVE            reduce using rule 47 (primFuncStmt -> TALK expr SEP .)
    }               reduce using rule 47 (primFuncStmt -> TALK expr SEP .)


state 188

    (35) incaseStmt -> IN CASE expr . { statementList } inothercaseStmt
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 201
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 189

    (34) foreachStmt -> FOREACH ID IN . expr { statementList }
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 202
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 190

    (33) repeatStmt -> REPEAT WHEN expr . { statementList }
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 203
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 191

    (57) buyStmt -> BUY expr , . expr , expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 204
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 192

    (55) moveStmt -> MOVE expr , . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 205
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 193

    (16) envFunc -> PUT ID IN ID AT expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 206
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 194

    (85) primitiveValue -> RANDOM FROM expr TO expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATEREQ resolved as shift
  ! shift/reduce conflict for LESSEQ resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for EQEQ resolved as shift
  ! shift/reduce conflict for NOTEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEP             reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    .               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ASSIGN          reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ITERATIONS      reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    )               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    ,               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    TO              reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    {               reduce using rule 85 (primitiveValue -> RANDOM FROM expr TO expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 195

    (96) bookItems -> STRING : ( listItems . ) , bookItems
    )               shift and go to state 207


state 196

    (13) varDecl -> LET ID : type ASSIGN expr SEP .
    PUT             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RUN             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESET           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    LET             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BEHAVE          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    AGENT           reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ENV             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    ID              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    $end            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    PICK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    STOP            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    RESTART         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    SELL            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    TALK            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    IN              reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    FOREACH         reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    REPEAT          reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    BUY             reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    MOVE            reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)
    }               reduce using rule 13 (varDecl -> LET ID : type ASSIGN expr SEP .)


state 197

    (39) primFuncStmt -> getter . listVoidFunc SEP .
    PUT             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    PICK            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    STOP            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    RESTART         reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    SELL            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    TALK            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    IN              reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    FOREACH         reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    REPEAT          reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    LET             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    ID              reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    BUY             reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    MOVE            reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)
    }               reduce using rule 39 (primFuncStmt -> getter . listVoidFunc SEP .)


state 198

    (50) listVoidFunc -> PUSH expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 50 (listVoidFunc -> PUSH expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 199

    (40) primFuncStmt -> PUT expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 208
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 200

    (44) primFuncStmt -> SELL expr , expr . , expr SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 209
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 201

    (35) incaseStmt -> IN CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statementList                  shift and go to state 210
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 202

    (34) foreachStmt -> FOREACH ID IN expr . { statementList }
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 211
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 203

    (33) repeatStmt -> REPEAT WHEN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statementList                  shift and go to state 212
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 204

    (57) buyStmt -> BUY expr , expr . , expr
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    ,               shift and go to state 213
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 205

    (55) moveStmt -> MOVE expr , expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 55 (moveStmt -> MOVE expr , expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 206

    (16) envFunc -> PUT ID IN ID AT expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 214
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 207

    (96) bookItems -> STRING : ( listItems ) . , bookItems
    ,               shift and go to state 215


state 208

    (40) primFuncStmt -> PUT expr , expr SEP .
    PUT             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    PICK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    STOP            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    RESTART         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    SELL            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    TALK            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    IN              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    FOREACH         reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    REPEAT          reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    LET             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    ID              reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    BUY             reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    MOVE            reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)
    }               reduce using rule 40 (primFuncStmt -> PUT expr , expr SEP .)


state 209

    (44) primFuncStmt -> SELL expr , expr , . expr SEP
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 216
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 210

    (35) incaseStmt -> IN CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 217


state 211

    (34) foreachStmt -> FOREACH ID IN expr { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statementList                  shift and go to state 218
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 212

    (33) repeatStmt -> REPEAT WHEN expr { statementList . }
    }               shift and go to state 219


state 213

    (57) buyStmt -> BUY expr , expr , . expr
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 220
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 214

    (16) envFunc -> PUT ID IN ID AT expr , expr SEP .
    PUT             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    RUN             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    RESET           reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    LET             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    BEHAVE          reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    AGENT           reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    ENV             reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    ID              reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)
    $end            reduce using rule 16 (envFunc -> PUT ID IN ID AT expr , expr SEP .)


state 215

    (96) bookItems -> STRING : ( listItems ) , . bookItems
    (95) bookItems -> . empty
    (96) bookItems -> . STRING : ( listItems ) , bookItems
    (102) empty -> .
    STRING          shift and go to state 86
    }               reduce using rule 102 (empty -> .)

    bookItems                      shift and go to state 221
    empty                          shift and go to state 85

state 216

    (44) primFuncStmt -> SELL expr , expr , expr . SEP
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             shift and go to state 222
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 217

    (35) incaseStmt -> IN CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 226
    IN              shift and go to state 223
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 224
    empty                          shift and go to state 225

state 218

    (34) foreachStmt -> FOREACH ID IN expr { statementList . }
    }               shift and go to state 227


state 219

    (33) repeatStmt -> REPEAT WHEN expr { statementList } .
    PUT             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    PICK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    STOP            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    RESTART         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    SELL            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    TALK            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    IN              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    FOREACH         reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    REPEAT          reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    LET             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    ID              reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    BUY             reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    MOVE            reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)
    }               reduce using rule 33 (repeatStmt -> REPEAT WHEN expr { statementList } .)


state 220

    (57) buyStmt -> BUY expr , expr , expr .
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    SEP             reduce using rule 57 (buyStmt -> BUY expr , expr , expr .)
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 221

    (96) bookItems -> STRING : ( listItems ) , bookItems .
    }               reduce using rule 96 (bookItems -> STRING : ( listItems ) , bookItems .)


state 222

    (44) primFuncStmt -> SELL expr , expr , expr SEP .
    PUT             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    PICK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    STOP            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    RESTART         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    SELL            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    TALK            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    IN              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    FOREACH         reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    REPEAT          reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    LET             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    ID              reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    BUY             reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    MOVE            reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)
    }               reduce using rule 44 (primFuncStmt -> SELL expr , expr , expr SEP .)


state 223

    (38) inothercaseStmt -> IN . OTHER CASE expr { statementList } inothercaseStmt
    OTHER           shift and go to state 228


state 224

    (35) incaseStmt -> IN CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 35 (incaseStmt -> IN CASE expr { statementList } inothercaseStmt .)


state 225

    (36) inothercaseStmt -> empty .
    PUT             reduce using rule 36 (inothercaseStmt -> empty .)
    PICK            reduce using rule 36 (inothercaseStmt -> empty .)
    STOP            reduce using rule 36 (inothercaseStmt -> empty .)
    RESTART         reduce using rule 36 (inothercaseStmt -> empty .)
    SELL            reduce using rule 36 (inothercaseStmt -> empty .)
    TALK            reduce using rule 36 (inothercaseStmt -> empty .)
    IN              reduce using rule 36 (inothercaseStmt -> empty .)
    FOREACH         reduce using rule 36 (inothercaseStmt -> empty .)
    REPEAT          reduce using rule 36 (inothercaseStmt -> empty .)
    LET             reduce using rule 36 (inothercaseStmt -> empty .)
    ID              reduce using rule 36 (inothercaseStmt -> empty .)
    BUY             reduce using rule 36 (inothercaseStmt -> empty .)
    MOVE            reduce using rule 36 (inothercaseStmt -> empty .)
    }               reduce using rule 36 (inothercaseStmt -> empty .)


state 226

    (37) inothercaseStmt -> OTHERWISE . { statementList }
    {               shift and go to state 229


state 227

    (34) foreachStmt -> FOREACH ID IN expr { statementList } .
    PUT             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    PICK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    STOP            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    RESTART         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    SELL            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    TALK            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    IN              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    FOREACH         reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    REPEAT          reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    LET             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    ID              reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    BUY             reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    MOVE            reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)
    }               reduce using rule 34 (foreachStmt -> FOREACH ID IN expr { statementList } .)


state 228

    (38) inothercaseStmt -> IN OTHER . CASE expr { statementList } inothercaseStmt
    CASE            shift and go to state 230


state 229

    (37) inothercaseStmt -> OTHERWISE { . statementList }
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statementList                  shift and go to state 231
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 230

    (38) inothercaseStmt -> IN OTHER CASE . expr { statementList } inothercaseStmt
    (58) expr -> . call
    (59) expr -> . - expr
    (60) expr -> . ! expr
    (61) expr -> . expr / expr
    (62) expr -> . expr * expr
    (63) expr -> . expr - expr
    (64) expr -> . expr + expr
    (65) expr -> . expr GREATER expr
    (66) expr -> . expr GREATEREQ expr
    (67) expr -> . expr LESSEQ expr
    (68) expr -> . expr LESS expr
    (69) expr -> . expr EQEQ expr
    (70) expr -> . expr NOTEQ expr
    (71) expr -> . expr AND expr
    (72) expr -> . expr OR expr
    (73) call -> . ID dotTail
    (74) call -> . primitiveValue
    (75) call -> . primary
    (83) primitiveValue -> . FIND PEERS
    (84) primitiveValue -> . FIND OBJECTS
    (85) primitiveValue -> . RANDOM FROM expr TO expr
    (86) primary -> . ( expr )
    (87) primary -> . { bookItems }
    (88) primary -> . [ listItems ]
    (89) primary -> . STRING
    (90) primary -> . NUMBER
    (91) primary -> . FALSE
    (92) primary -> . TRUE
    -               shift and go to state 42
    !               shift and go to state 43
    ID              shift and go to state 44
    FIND            shift and go to state 47
    RANDOM          shift and go to state 48
    (               shift and go to state 49
    {               shift and go to state 50
    [               shift and go to state 51
    STRING          shift and go to state 52
    NUMBER          shift and go to state 53
    FALSE           shift and go to state 54
    TRUE            shift and go to state 55

    expr                           shift and go to state 232
    call                           shift and go to state 41
    primitiveValue                 shift and go to state 45
    primary                        shift and go to state 46

state 231

    (37) inothercaseStmt -> OTHERWISE { statementList . }
    }               shift and go to state 233


state 232

    (38) inothercaseStmt -> IN OTHER CASE expr . { statementList } inothercaseStmt
    (61) expr -> expr . / expr
    (62) expr -> expr . * expr
    (63) expr -> expr . - expr
    (64) expr -> expr . + expr
    (65) expr -> expr . GREATER expr
    (66) expr -> expr . GREATEREQ expr
    (67) expr -> expr . LESSEQ expr
    (68) expr -> expr . LESS expr
    (69) expr -> expr . EQEQ expr
    (70) expr -> expr . NOTEQ expr
    (71) expr -> expr . AND expr
    (72) expr -> expr . OR expr
    {               shift and go to state 234
    /               shift and go to state 65
    *               shift and go to state 66
    -               shift and go to state 67
    +               shift and go to state 68
    GREATER         shift and go to state 69
    GREATEREQ       shift and go to state 70
    LESSEQ          shift and go to state 71
    LESS            shift and go to state 72
    EQEQ            shift and go to state 73
    NOTEQ           shift and go to state 74
    AND             shift and go to state 75
    OR              shift and go to state 76


state 233

    (37) inothercaseStmt -> OTHERWISE { statementList } .
    PUT             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    PICK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    STOP            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    RESTART         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    SELL            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    TALK            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    IN              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    FOREACH         reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    REPEAT          reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    LET             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    ID              reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    BUY             reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    MOVE            reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)
    }               reduce using rule 37 (inothercaseStmt -> OTHERWISE { statementList } .)


state 234

    (38) inothercaseStmt -> IN OTHER CASE expr { . statementList } inothercaseStmt
    (25) statementList -> . empty
    (26) statementList -> . statement statementList
    (102) empty -> .
    (27) statement -> . primFuncStmt
    (28) statement -> . incaseStmt
    (29) statement -> . foreachStmt
    (30) statement -> . repeatStmt
    (31) statement -> . varAssign
    (32) statement -> . varDecl
    (39) primFuncStmt -> . getter . listVoidFunc SEP
    (40) primFuncStmt -> . PUT expr , expr SEP
    (41) primFuncStmt -> . PICK expr SEP
    (42) primFuncStmt -> . STOP SEP
    (43) primFuncStmt -> . RESTART BEHAVE SEP
    (44) primFuncStmt -> . SELL expr , expr , expr SEP
    (45) primFuncStmt -> . buyStmt SEP
    (46) primFuncStmt -> . moveStmt SEP
    (47) primFuncStmt -> . TALK expr SEP
    (35) incaseStmt -> . IN CASE expr { statementList } inothercaseStmt
    (34) foreachStmt -> . FOREACH ID IN expr { statementList }
    (33) repeatStmt -> . REPEAT WHEN expr { statementList }
    (15) varAssign -> . getter ASSIGN expr SEP
    (13) varDecl -> . LET ID : type ASSIGN expr SEP
    (14) varDecl -> . LET ID : type SEP
    (76) getter -> . ID dotTail
    (56) buyStmt -> . BUY expr
    (57) buyStmt -> . BUY expr , expr , expr
    (51) moveStmt -> . MOVE RIGHT
    (52) moveStmt -> . MOVE LEFT
    (53) moveStmt -> . MOVE DOWN
    (54) moveStmt -> . MOVE UP
    (55) moveStmt -> . MOVE expr , expr
    }               reduce using rule 102 (empty -> .)
    PUT             shift and go to state 107
    PICK            shift and go to state 108
    STOP            shift and go to state 109
    RESTART         shift and go to state 110
    SELL            shift and go to state 111
    TALK            shift and go to state 114
    IN              shift and go to state 115
    FOREACH         shift and go to state 116
    REPEAT          shift and go to state 117
    LET             shift and go to state 16
    ID              shift and go to state 12
    BUY             shift and go to state 118
    MOVE            shift and go to state 119

    statementList                  shift and go to state 235
    empty                          shift and go to state 98
    statement                      shift and go to state 99
    primFuncStmt                   shift and go to state 100
    incaseStmt                     shift and go to state 101
    foreachStmt                    shift and go to state 102
    repeatStmt                     shift and go to state 103
    varAssign                      shift and go to state 104
    varDecl                        shift and go to state 105
    getter                         shift and go to state 106
    buyStmt                        shift and go to state 112
    moveStmt                       shift and go to state 113

state 235

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList . } inothercaseStmt
    }               shift and go to state 236


state 236

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } . inothercaseStmt
    (36) inothercaseStmt -> . empty
    (37) inothercaseStmt -> . OTHERWISE { statementList }
    (38) inothercaseStmt -> . IN OTHER CASE expr { statementList } inothercaseStmt
    (102) empty -> .
  ! shift/reduce conflict for IN resolved as shift
    OTHERWISE       shift and go to state 226
    IN              shift and go to state 223
    PUT             reduce using rule 102 (empty -> .)
    PICK            reduce using rule 102 (empty -> .)
    STOP            reduce using rule 102 (empty -> .)
    RESTART         reduce using rule 102 (empty -> .)
    SELL            reduce using rule 102 (empty -> .)
    TALK            reduce using rule 102 (empty -> .)
    FOREACH         reduce using rule 102 (empty -> .)
    REPEAT          reduce using rule 102 (empty -> .)
    LET             reduce using rule 102 (empty -> .)
    ID              reduce using rule 102 (empty -> .)
    BUY             reduce using rule 102 (empty -> .)
    MOVE            reduce using rule 102 (empty -> .)
    }               reduce using rule 102 (empty -> .)

    inothercaseStmt                shift and go to state 237
    empty                          shift and go to state 225

state 237

    (38) inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .
    PUT             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    PICK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    STOP            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    RESTART         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    SELL            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    TALK            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    IN              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    FOREACH         reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    REPEAT          reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    LET             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    ID              reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    BUY             reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    MOVE            reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)
    }               reduce using rule 38 (inothercaseStmt -> IN OTHER CASE expr { statementList } inothercaseStmt .)


Conflicts:

shift/reduce conflict for . in state 12 resolved as shift
shift/reduce conflict for . in state 33 resolved as shift
shift/reduce conflict for . in state 44 resolved as shift
shift/reduce conflict for / in state 62 resolved as shift
shift/reduce conflict for * in state 62 resolved as shift
shift/reduce conflict for - in state 62 resolved as shift
shift/reduce conflict for + in state 62 resolved as shift
shift/reduce conflict for GREATER in state 62 resolved as shift
shift/reduce conflict for GREATEREQ in state 62 resolved as shift
shift/reduce conflict for LESSEQ in state 62 resolved as shift
shift/reduce conflict for LESS in state 62 resolved as shift
shift/reduce conflict for EQEQ in state 62 resolved as shift
shift/reduce conflict for NOTEQ in state 62 resolved as shift
shift/reduce conflict for AND in state 62 resolved as shift
shift/reduce conflict for OR in state 62 resolved as shift
shift/reduce conflict for / in state 194 resolved as shift
shift/reduce conflict for * in state 194 resolved as shift
shift/reduce conflict for - in state 194 resolved as shift
shift/reduce conflict for + in state 194 resolved as shift
shift/reduce conflict for GREATER in state 194 resolved as shift
shift/reduce conflict for GREATEREQ in state 194 resolved as shift
shift/reduce conflict for LESSEQ in state 194 resolved as shift
shift/reduce conflict for LESS in state 194 resolved as shift
shift/reduce conflict for EQEQ in state 194 resolved as shift
shift/reduce conflict for NOTEQ in state 194 resolved as shift
shift/reduce conflict for AND in state 194 resolved as shift
shift/reduce conflict for OR in state 194 resolved as shift
shift/reduce conflict for IN in state 217 resolved as shift
shift/reduce conflict for IN in state 236 resolved as shift